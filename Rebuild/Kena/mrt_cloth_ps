mrt_cloth_ps

Shader hash 591227c6-f949c316-fbff3ecd-7d09fb49

ps_5_0
      dcl_globalFlags refactoringAllowed
      dcl_constantbuffer cb0[178], immediateIndexed
      dcl_constantbuffer cb1[21], immediateIndexed
      dcl_constantbuffer cb2[1], immediateIndexed
      dcl_constantbuffer cb3[5], immediateIndexed
      dcl_constantbuffer cb4[18], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_sampler s2, mode_default
      dcl_sampler s3, mode_default
      dcl_sampler s4, mode_default
      dcl_sampler s5, mode_default
      dcl_sampler s6, mode_default
      dcl_sampler s7, mode_default

      dcl_resource_texture2d (float,float,float,float) t0                     kena_cloth_NORMAL
      dcl_resource_texture2d (float,float,float,float) t1                     T_FabricDetailNormal
      dcl_resource_texture2d (float,float,float,float) t2                     kena_cloth_sprint_EMISSIVE
      dcl_resource_texture2d (float,float,float,float) t3                     kena_cloth_BASECOLOR
      dcl_resource_texture2d (float,float,float,float) t4                     Kena_Dirt_MASKS
      dcl_resource_texture2d (float,float,float,float) t5                     T_Ice_Noise
      dcl_resource_texture2d (float,float,float,float) t6                     kena_cloth_AO_R_M
      dcl_resource_texture2d (float,float,float,float) t7                     kena_cloth_MASK

      dcl_input_ps linear centroid v0.xyz                               -> normal -> tangent
      dcl_input_ps linear centroid v1.xyzw                              -> tangent -> normal + sign
      dcl_input_ps linear v2.xy                                         -> uv 
      dcl_input_ps linear v3.xy                                         -> PosOS.xy
      dcl_input_ps linear v4.x                                          -> PosOS.z
      dcl_input_ps_siv linear noperspective v5.xyz, position
      dcl_input_ps_sgv nointerpolation v6.x, isfrontface

      dcl_output o0.xyzw
      dcl_output o1.xyzw
      dcl_output o2.xyzw
      dcl_output o3.xyzw
      dcl_output o4.xyzw
      dcl_temps 7

//Normal
   0: mul r0.xyz, v0.yzxy, v1.zxyz
   1: mad r0.xyz, v1.yzxy, v0.zxyz, -r0.xyzx
   2: mul r0.xyz, r0.xyzx, v1.wwww                    BitangentWS = cross(TangentWS, NormalWS) * sign

   3: mul r0.w, cb0[140].w, cb1[4].w                  flag -> dont flip norm -> true -> 1
   4: movc r1.x, v6.x, l(1.0000), l(-1.0000)
   5: mul r0.w, r0.w, r1.x                            flip boolean -> signed_dir

   6: sample_b(texture2d)(float,float,float,float) r1.xy, v2.xyxx, t0.xyzw, s0, cb0[142].y                  Sample kena_cloth_NORMAL
   7: mad r1.xy, r1.xyxx, l(2.0000, 2.0000, 0.0000, 0.0000), l(-1.0000, -1.0000, 0.0000, 0.0000)
   8: dp2 r1.w, r1.xyxx, r1.xyxx
   9: add r1.w, -r1.w, l(1.0000)
  10: max r1.w, r1.w, l(0)
  11: sqrt r1.z, r1.w                                                   Unpack NormalTS

  12: mul r2.xyz, r1.xyzx, cb4[13].xxxx                                 cb4[13].x=1(BaseNormalPower)
  13: mad r1.xyz, r2.xyzx, l(-0.5000, -0.5000, 0, 0), r1.xyzx           NormalTS = (NormalTS * BaseNormalPower).xyz * (-0.5,-0.5,0) + NormalTS.xyz
  14: add r2.x, r1.z, l(1.0000)                                         //zTS = NormalTS.z + 1

  15: mul r2.yz, v2.xxyx, cb4[13].yyyy                                  uv * cb4[13].y=38(DetailScale)
  16: sample_b(texture2d)(float,float,float,float) r2.yz, r2.yzyy, t1.zxyw, s1, cb0[142].y                  Sample T_FabricDetailNormal -> rawDetailNormXY
  17: add r3.xy, r2.yzyy, r2.yzyy
  18: mad r2.yz, r2.yyzy, l(0.0000, 2.0000, 2.0000, 0.0000), l(0.0000, -1.0000, -1.0000, 0.0000)
  19: dp2 r2.y, r2.yzyy, r2.yzyy
  20: add r2.y, -r2.y, l(1.0000)
  21: max r2.y, r2.y, l(0)
  22: sqrt r3.z, r2.y                                                   nDetailTS = UE_UnpackNormalNoNormalize_Fix(float4(rawDetailNormXY.xy,0,0));
                                                                        nDetailTS.xy = rawDetailNormXY.xy + rawDetailNormXY.xy;

  23: add r2.yzw, r3.xxyz, l(0.0000, -1.0000, -1.0000, -1.0000)         nDetailTS -= 1;
  24: mad r2.yzw, cb4[13].zzzz, r2.yyzw, l(0, 0, 0, 1.0000)             nDetailTS = nDetailTS * cb4[13].z=0.5(DetailAmount) + half3(0, 0, 1);
  25: add r1.w, r1.z, l(1.0000)                                         NormalTS.z += 1;
  26: mul r2.yzw, r2.yyzw, l(0.0000, -1.0000, -1.0000, 1.0000)          nDetailTS *= half3(-1, -1, 1);
  27: dp3 r1.z, r1.xywx, r2.yzwy                                        //dot(NormalTS, nDetailTS)
  28: mul r2.xyz, r2.yzwy, r2.xxxx                                      //nDetailTS * NormalTS.z
  29: mad r1.xyz, r1.xywx, r1.zzzz, -r2.xyzx                            half3 nTS = NormalTS * dot(NormalTS, nDetailTS) - nDetailTS * NormalTS.z;
  30: mad r1.xyz, r1.xyzx, cb0[137].wwww, cb0[137].xyzx                 nTS = nTS * _GlobalNormalScaler + _GlobalNormalBias;
  31: dp3 r1.w, r1.xyzx, r1.xyzx
  32: rsq r1.w, r1.w
  33: mul r1.xyz, r1.wwww, r1.xyzx                                      nTS = normalize(nTS);

  34: mul r0.xyz, r0.xyzx, r1.yyyy
  35: mad r0.xyz, r1.xxxx, v0.xyzx, r0.xyzx
  36: mad r0.xyz, r1.zzzz, v1.xyzx, r0.xyzx
  37: dp3 r1.x, r0.xyzx, r0.xyzx
  38: rsq r1.x, r1.x
  39: mul r0.xyz, r0.xyzx, r1.xxxx
  40: mul r0.xyz, r0.wwww, r0.xyzx                                      half3 nDirWS = normalize(mul(nTS, tbn)) * signed_dir;

//Emissive
  41: sample_b(texture2d)(float,float,float,float) r1.xyz, v2.xyxx, t2.xyzw, s2, cb0[142].y           Sample kena_cloth_sprint_EMISSIVE
  42: mul r1.xyz, r1.xyzx, cb2[0].xxxx                                  EmitCol *= cb2[0].x=0(GlowAmount)
  43: mul r1.xyz, r1.xyzx, cb4[13].wwww                                 EmitCol *= cb4[13].w=1(???)
  44: mad r1.xyz, r1.xyzx, cb4[2].xyzx, cb4[3].xyzx   EmitCol = EmitCol * cb4[2].xyz=[0,1,2](EmissiveTint) + cb4[3].xyz=[0](EmissiveAdd)
  45: add r2.xyz, -r1.xyzx, cb4[4].xyzx   
  46: mad r1.xyz, cb4[14].yyyy, r2.xyzx, r1.xyzx                  lerp(EmitCol, cb4[4].xyz=[0](EmissiveColor), cb4[14].y=0(Desaturate))

  47: sample_b(texture2d)(float,float,float,float) r2.xyz, v2.xyxx, t3.xyzw, s3, cb0[142].y           Sample kena_cloth_BASECOLOR
                                                                        RawAlbedo.xyz
  48: sample_b(texture2d)(float,float,float,float) r3.xyz, v2.xyxx, t4.xyzw, s4, cb0[142].y           Sample Kena_Dirt_MASKS
  49: dp3 r0.w, r3.xyzx, cb4[5].xyzx                                    DirtChan = dot(Dirt.rgb, cb4[5].xyz=[0,1,0](DirtChannel))
  50: add r1.w, -r0.w, l(1.0000)                                        1 - DirtChan

  51: sample_b(texture2d)(float,float,float,float) r3.xyz, v2.xyxx, t5.xyzw, s5, cb0[142].y           Sample T_Ice_Noise
  52: add r4.xyz, -r3.xyzx, l(1.0000, 1.0000, 1.0000, 0.0000)           1 - IceNoise
  53: mad r4.xyz, -cb4[9].xyzx, r4.xyzx, l(1,1,1,0)         IceNoise1 = 1 - (1 - IceNoise) * cb4[9].xyz=[1.489584, 1.6530941, 1.749222](???)
  54: mul r3.xyz, r3.xyzx, cb4[10].xyzx                     IceNoise2 = IceNoise * cb4[10].xyz=[0.510416, 0.346906, 0.250778](DirtColor*2)
  55: ge r5.xy, cb4[14].zwzz, l(0.5000, 0.5000, 0.0000, 0.0000)         dirtSwitch.xy = DirtColor.xy >= 0.5 ? true : false
  56: movc r5.xy, r5.xyxx, r4.xyxx, r3.xyxx                 noise.xy = dirtSwitch.xy ? IceNoise1.xy : IceNoise2.xy
  57: ge r2.w, cb4[15].x, l(0.5000)                         dirtSwitch.z = DirtColor.z >= 0.5 ? true : false
  58: movc r5.z, r2.w, r4.z, r3.z                           noise.z = dirtSwitch.z ? IceNoise1.z : IceNoise2.z
  59: mul r3.xyz, r1.wwww, r5.xyzx                          dirtCol = noise.xyz * (1 - DirtChan)
  60: mad r2.xyz, cb3[0].wwww, r3.xyzx, r2.xyzx             RawAlbedo = cb3[0].w=0(DirtAmount) * dirtCol + RawAlbedo
  61: add r3.xyz, r0.wwww, r5.xyzx                          
  62: add r3.xyz, r3.xyzx, l(-1.0000, -1.0000, -1.0000, 0)  revertDirtCol = 1 - noise * DirtChan
  63: mad r3.xyz, cb3[0].wwww, r3.xyzx, l(1,1,1,0)          revertDirtCol = DirtAmount * revertDirtCol + 1
  64: mul r2.xyz, r2.xyzx, r3.xyzx                          RawAlbedo *= revertDirtCol  (将DirtCol部分提亮)


  65: max r0.w, cb3[0].z, l(0)                              wetA = max(cb3[0].z=0(rawWetA), 0)
  66: min r0.w, r0.w, cb4[15].y                             wetA = min(wet, cb4[15].y=0.75(MaxWet))
  67: add r1.w, r0.w, l(-1.0000)                            wetA - 1
  68: max r3.xy, cb3[1].xyxx, l(0.00001, 0.00001, 0, 0)     wetB.xy = max(cb3[1].xy=0(rawWetB), 0.00001)
  69: min r2.w, r3.x, cb4[15].y                             wetB.x = min(wetB.x, MaxWet)
  70: add r2.w, r2.w, l(-1.0000)                            wetB.x - 1

  71: mul r3.xzw, v3.yyyy, cb1[1].xxyz
  72: mad r3.xzw, v3.xxxx, cb1[0].xxyz, r3.xxzw
  73: mad r3.xzw, v4.xxxx, cb1[2].xxyz, r3.xxzw
  74: add r3.xzw, r3.xxzw, cb1[3].xxyz
  75: add r3.xzw, r3.xxzw, -cb3[4].xxyz                     -V = PosWS - CameraPosWS

  76: dp3 r3.x, r3.xzwx, r3.xzwx
  77: sqrt r3.x, r3.x                                       ViewDistance = length(-V)

  78: div r3.y, l(1.0000, 1.0000, 1.0000, 1.0000), r3.y     //todo...
  79: mad r3.x, -r3.x, r3.y, l(1.0000)
  80: mul_sat r3.x, r3.x, l(10.0000)
  81: add r2.w, abs(r2.w), -r3.x
  82: add r2.w, r2.w, l(1.0000)
  83: min r2.w, r2.w, l(1.0000)
  84: mul r1.w, abs(r1.w), r2.w
  85: max r3.x, r1.w, l(0.3000)
  86: min r3.x, r3.x, l(1.0000)
  87: mul r2.xyz, r2.xyzx, r3.xxxx
  88: sample_b(texture2d)(float,float,float,float) r3.xyz, v2.xyxx, t6.xyzw, s6, cb0[142].y
  89: add r3.w, r3.x, cb4[15].z
  90: max r3.w, r3.w, cb4[15].w
  91: min r3.w, r3.w, l(1.0000)
  92: mul_sat r2.xyz, r2.xyzx, r3.wwww
  93: mul r3.y, r3.y, cb4[16].y
  94: add r0.w, r0.w, -r2.w
  95: add r0.w, r0.w, l(1.0000)
  96: mad_sat r0.w, r3.z, cb4[16].x, -r0.w
  97: mul_sat r1.w, r1.w, r3.y
  98: mov_sat r3.x, r3.x
  99: mad o2.z, r1.w, cb0[138].y, cb0[138].x
 100: mov_sat r3.yzw, cb4[12].xxyz
 101: sqrt o4.xyz, r3.yzwy
 102: sample_b(texture2d)(float,float,float,float) r1.w, v2.xyxx, t7.yzwx, s7, cb0[142].y
 103: add r2.w, cb4[16].w, -cb4[17].x
 104: mad_sat o4.w, r1.w, r2.w, cb4[17].x
 105: add r3.yzw, r2.xxyz, l(0.0000, -0.0400, -0.0400, -0.0400)
 106: mad r3.yzw, r0.wwww, r3.yyzw, l(0.0000, 0.0400, 0.0400, 0.0400)
 107: mad r4.xyz, -r2.xyzx, r0.wwww, r2.xyzx
 108: mad r4.xyz, r4.xyzx, cb0[135].wwww, cb0[135].xyzx
 109: mad r3.yzw, r3.yyzw, cb0[136].wwww, cb0[136].xxyz
 110: ne r1.w, l(0, 0, 0, 0), cb0[177].w
 111: mad r5.xyz, r3.yzwy, l(0.4500, 0.4500, 0.4500, 0.0000), r4.xyzx
 112: movc r4.xyz, r1.wwww, r5.xyzx, r4.xyzx
 113: movc r3.yzw, r1.wwww, l(0, 0, 0, 0), r3.yyzw
 114: dp3 r1.w, r3.yzwy, l(0.3000, 0.5900, 0.1100, 0.0000)
 115: mad r5.xyz, r1.wwww, l(2.0404, -4.7951, 2.7552, 0.0000), l(-0.3324, 0.6417, 0.6903, 0.0000)
 116: mad r1.w, r3.x, r5.x, r5.y
 117: mad r1.w, r1.w, r3.x, r5.z
 118: mul r1.w, r3.x, r1.w
 119: max o3.w, r1.w, r3.x
 120: mad r3.xyz, r3.yzwy, l(0.4500, 0.4500, 0.4500, 0.0000), r4.xyzx
 121: max r1.xyz, r1.xyzx, l(0, 0, 0, 0)
 122: lt r1.w, l(0), cb0[139].x
 123: if_nz r1.w
 124:   mul r4.xyzw, v5.yyyy, cb0[45].xyzw
 125:   mad r4.xyzw, v5.xxxx, cb0[44].xyzw, r4.xyzw
 126:   mad r4.xyzw, v5.zzzz, cb0[46].xyzw, r4.xyzw
 127:   add r4.xyzw, r4.xyzw, cb0[47].xyzw
 128:   div r4.xyz, r4.xyzx, r4.wwww
 129:   add r4.xyz, r4.xyzx, -cb0[70].xyzx
 130:   add r5.xyz, r4.xyzx, -cb1[5].xyzx
 131:   add r6.xyz, cb1[19].xyzx, l(1.0000, 1.0000, 1.0000, 0.0000)
 132:   lt r5.xyz, r6.xyzx, abs(r5.xyzx)
 133:   or r1.w, r5.y, r5.x
 134:   or r1.w, r5.z, r1.w
 135:   dp3 r2.w, r4.xyzx, l(0.5770, 0.5770, 0.5770, 0.0000)
 136:   mul r2.w, r2.w, l(0.0020)
 137:   frc r2.w, r2.w
 138:   lt r2.w, l(0.5000), r2.w
 139:   movc r4.xyz, r2.wwww, l(0.0000, 1.0000, 1.0000, 0.0000), l(1.0000, 1.0000, 0.0000, 0.0000)
 140:   movc r1.xyz, r1.wwww, r4.xyzx, r1.xyzx
 141: endif
 142: mad r1.xyz, cb0[144].yyyy, r3.xyzx, r1.xyzx
 143: mad o1.xyz, r0.xyzx, l(0.5000, 0.5000, 0.5000, 0.0000), l(0.5000, 0.5000, 0.5000, 0.0000)
 144: mul o0.xyz, r1.xyzx, cb0[134].yyyy
 145: mov o0.w, l(0)
 146: mov o1.w, cb1[20].y
 147: mov o2.yw, l(0.0000, 0.5000, 0.0000, 0.6588)
 148: mov o2.x, r0.w
 149: mov o3.xyz, r2.xyzx
 150: ret
