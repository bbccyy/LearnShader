// Copyright Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	DistanceFieldObjectCulling.usf
=============================================================================*/

#include "Common.ush"
#include "DeferredShadingCommon.ush"
#include "DistanceFieldLightingShared.ush"
#include "DistanceFieldAOShared.ush"
#include "GlobalDistanceFieldShared.ush"

uint NumUploadOperations;
Buffer<uint> UploadOperationIndices;
Buffer<float4> UploadOperationData;

// In float4's.  Must match equivalent C++ variables.
#define UPLOAD_DATA_STRIDE (OBJECT_BOUNDS_STRIDE + OBJECT_DATA_STRIDE)

void UploadBoundsFloat4(uint DestIndex, uint UploadIndex)
{
	float4 UploadVector = UploadOperationData[UploadIndex];
	WriteFloat4(RWSceneObjectBounds, DestIndex, UploadVector);
}

void UploadDataFloat4(uint DestIndex, uint UploadIndex)
{
	float4 UploadVector = UploadOperationData[UploadIndex];
	WriteFloat4(RWSceneObjectData, DestIndex, UploadVector);
}

[numthreads(UPDATEOBJECTS_THREADGROUP_SIZE, 1, 1)]
void UploadObjectsToBufferCS(
	uint3 GroupId : SV_GroupID,
	uint3 DispatchThreadId : SV_DispatchThreadID,
    uint3 GroupThreadId : SV_GroupThreadID) 
{
	uint UploadOperationIndex = DispatchThreadId.x;

	if (DispatchThreadId.x < NumUploadOperations)
	{
		uint DestIndex = UploadOperationIndices[UploadOperationIndex];

		UNROLL
		for (uint VectorIndex = 0; VectorIndex < OBJECT_BOUNDS_STRIDE; ++VectorIndex)
		{
			UploadBoundsFloat4(DestIndex * OBJECT_BOUNDS_STRIDE + VectorIndex, UploadOperationIndex * UPLOAD_DATA_STRIDE + VectorIndex);
		}

		UNROLL
		for (uint VectorIndex = 0; VectorIndex < OBJECT_DATA_STRIDE; ++VectorIndex)
		{
			UploadDataFloat4(DestIndex * OBJECT_DATA_STRIDE + VectorIndex, UploadOperationIndex * UPLOAD_DATA_STRIDE + OBJECT_BOUNDS_STRIDE + VectorIndex);
		}
	}
}

#if PLATFORM_SUPPORTS_4COMPONENT_UAV_READ_WRITE
RWBuffer<float4> RWCopyObjectBounds;
RWBuffer<float4> RWCopyObjectData;
#else
RWBuffer<float> RWCopyObjectBounds;
RWBuffer<float> RWCopyObjectData;
#endif

void CopyBoundsFloat4(uint DestIndex, uint SourceIndex)
{
	WriteFloat4(RWCopyObjectBounds, DestIndex, LoadFloat4(SceneObjectBounds, SourceIndex));
}

void CopyDataFloat4(uint DestIndex, uint SourceIndex)
{
	WriteFloat4(RWCopyObjectData, DestIndex, LoadFloat4(SceneObjectData, SourceIndex));
}

[numthreads(UPDATEOBJECTS_THREADGROUP_SIZE, 1, 1)]
void CopyObjectBufferCS(
	uint3 GroupId : SV_GroupID,
	uint3 DispatchThreadId : SV_DispatchThreadID,
    uint3 GroupThreadId : SV_GroupThreadID) 
{
	uint CopyOperationIndex = DispatchThreadId.x;

	if (CopyOperationIndex < NumSceneObjects)
	{
		uint SourceIndex = CopyOperationIndex;
		uint DestIndex = CopyOperationIndex;

		UNROLL
		for (uint VectorIndex = 0; VectorIndex < OBJECT_BOUNDS_STRIDE; ++VectorIndex)
		{
			CopyBoundsFloat4(DestIndex * OBJECT_BOUNDS_STRIDE + VectorIndex, SourceIndex * OBJECT_BOUNDS_STRIDE + VectorIndex);
		}

		UNROLL
		for (uint VectorIndex = 0; VectorIndex < OBJECT_DATA_STRIDE; VectorIndex++)
		{
			CopyDataFloat4(DestIndex * OBJECT_DATA_STRIDE + VectorIndex, SourceIndex * OBJECT_DATA_STRIDE + VectorIndex);
		}
	}
}

uint NumRemoveOperations;
Buffer<uint4> RemoveOperationIndices;

#if REMOVE_FROM_SAME_BUFFER
	#define RWBoundsRemoveSource RWSceneObjectBounds
	#define RWDataRemoveSource RWSceneObjectData
#else

	#if PLATFORM_SUPPORTS_4COMPONENT_UAV_READ_WRITE
		Buffer<float4> ObjectBounds2;
		Buffer<float4> ObjectData2;
	#else
		Buffer<float> ObjectBounds2;
		Buffer<float> ObjectData2;
	#endif

	#define RWBoundsRemoveSource ObjectBounds2
	#define RWDataRemoveSource ObjectData2
#endif

void WriteBoundsFloat4(uint DestIndex, uint SourceIndex)
{
	WriteFloat4(RWSceneObjectBounds, DestIndex, LoadFloat4(RWBoundsRemoveSource, SourceIndex));
}

void WriteDataFloat4(uint DestIndex, uint SourceIndex)
{
	WriteFloat4(RWSceneObjectData, DestIndex, LoadFloat4(RWDataRemoveSource, SourceIndex));
}

[numthreads(UPDATEOBJECTS_THREADGROUP_SIZE, 1, 1)]
void RemoveObjectsFromBufferCS(
	uint3 GroupId : SV_GroupID,
	uint3 DispatchThreadId : SV_DispatchThreadID,
    uint3 GroupThreadId : SV_GroupThreadID) 
{
	uint RemoveOperationIndex = DispatchThreadId.x;

	if (RemoveOperationIndex < NumRemoveOperations)
	{
		// RemoveAtSwap
		uint SourceIndex = RemoveOperationIndices[RemoveOperationIndex].y;
		uint DestIndex = RemoveOperationIndices[RemoveOperationIndex].x;

		UNROLL
		for (uint VectorIndex = 0; VectorIndex < OBJECT_BOUNDS_STRIDE; ++VectorIndex)
		{
			WriteBoundsFloat4(DestIndex * OBJECT_BOUNDS_STRIDE + VectorIndex, SourceIndex * OBJECT_BOUNDS_STRIDE + VectorIndex);
		}

		UNROLL
		for (uint VectorIndex = 0; VectorIndex < OBJECT_DATA_STRIDE; VectorIndex++)
		{
			WriteDataFloat4(DestIndex * OBJECT_DATA_STRIDE + VectorIndex, SourceIndex * OBJECT_DATA_STRIDE + VectorIndex);
		}
	}
}

uint ObjectBoundingGeometryIndexCount;

groupshared uint NumGroupObjects;

groupshared uint GroupBaseIndex;
groupshared uint GroupObjectIndices[UPDATEOBJECTS_THREADGROUP_SIZE];

void CopyCulledObjectData(uint DestIndex, uint SourceIndex)
{
	RWCulledObjectBounds[DestIndex] = LoadFloat4(SceneObjectBounds, SourceIndex);

	UNROLL
	for (uint VectorIndex = 0; VectorIndex < CULLED_OBJECT_DATA_STRIDE; VectorIndex++)
	{
		float4 Data = LoadFloat4(SceneObjectData, SourceIndex * OBJECT_DATA_STRIDE + VectorIndex);

		// Note: only copying the first CULLED_OBJECT_DATA_STRIDE of the original object data
		RWCulledObjectData[DestIndex * CULLED_OBJECT_DATA_STRIDE + VectorIndex] = Data;
	}
}

[numthreads(UPDATEOBJECTS_THREADGROUP_SIZE, 1, 1)]
void CullObjectsForViewCS(
	uint3 GroupId : SV_GroupID,
	uint3 DispatchThreadId : SV_DispatchThreadID,
    uint3 GroupThreadId : SV_GroupThreadID) 
{
	uint ObjectIndex = DispatchThreadId.x;

#define USE_FRUSTUM_CULLING 1
#if USE_FRUSTUM_CULLING
	if (DispatchThreadId.x == 0)
	{
		// RWObjectIndirectArguments is zeroed by a clear before this shader, only need to set things that are non-zero (and are not read by this shader as that would be a race condition)
		// IndexCount, NumInstances, StartIndex, BaseVertexIndex, FirstInstance
		RWObjectIndirectArguments[0] = ObjectBoundingGeometryIndexCount;
	}

	if (GroupThreadId.x == 0)
	{
		NumGroupObjects = 0;
	}

	GroupMemoryBarrierWithGroupSync();

	if (ObjectIndex < NumSceneObjects)
	{
		uint SourceIndex = ObjectIndex;

		float4 ObjectBoundingSphere = LoadFloat4(SceneObjectBounds, SourceIndex);
		float DistanceToViewSq = dot(View.WorldCameraOrigin - ObjectBoundingSphere.xyz, View.WorldCameraOrigin - ObjectBoundingSphere.xyz);

		if (DistanceToViewSq < Square(AOMaxViewDistance + ObjectBoundingSphere.w)
			&& ViewFrustumIntersectSphere(ObjectBoundingSphere.xyz, ObjectBoundingSphere.w + AOObjectMaxDistance))
		{
            float2 MinMaxDrawDist2 = LoadGlobalObjectMinMaxDrawDistance2(SourceIndex);

            if ((MinMaxDrawDist2.x < 0.0001 || DistanceToViewSq > MinMaxDrawDist2.x)
                && (MinMaxDrawDist2.y < 0.0001 || DistanceToViewSq < MinMaxDrawDist2.y))
            {
                uint DestIndex;
                InterlockedAdd(NumGroupObjects, 1U, DestIndex);
                GroupObjectIndices[DestIndex] = SourceIndex;
            }
        }
	}

	GroupMemoryBarrierWithGroupSync();

	if (GroupThreadId.x == 0)
	{
		InterlockedAdd(RWObjectIndirectArguments[1], NumGroupObjects, GroupBaseIndex);
	}

	GroupMemoryBarrierWithGroupSync();

	if (GroupThreadId.x < NumGroupObjects)
	{
		uint SourceIndex = GroupObjectIndices[GroupThreadId.x];
		uint DestIndex = GroupBaseIndex + GroupThreadId.x;
		CopyCulledObjectData(DestIndex, SourceIndex);
	}

#else

	if (DispatchThreadId.x == 0)
	{
		// IndexCount, NumInstances, StartIndex, BaseVertexIndex, FirstInstance
		RWObjectIndirectArguments[0] = ObjectBoundingGeometryIndexCount;
		RWObjectIndirectArguments[1] = NumSceneObjects;
	}

	GroupMemoryBarrierWithGroupSync();

	if (ObjectIndex < NumSceneObjects)
	{
		uint SourceIndex = ObjectIndex;
		uint DestIndex = ObjectIndex;

		CopyCulledObjectData(DestIndex, SourceIndex);
	}

#endif
}

/** Min and Max depth for this tile. */
groupshared uint IntegerTileMinZ;
groupshared uint IntegerTileMaxZ;

/** Inner Min and Max depth for this tile. */
groupshared uint IntegerTileMinZ2;
groupshared uint IntegerTileMaxZ2;

/** View rect min in xy, max in zw. */
uint4 ViewDimensions;
float2 NumGroups;

RWBuffer<float4> RWTileConeAxisAndCos;
RWBuffer<float4> RWTileConeDepthRanges;

/** Builds tile depth ranges and bounding cones. */
[numthreads(THREADGROUP_SIZEX, THREADGROUP_SIZEY, 1)]
void BuildTileConesMain(
	uint3 GroupId : SV_GroupID,
	uint3 DispatchThreadId : SV_DispatchThreadID,
    uint3 GroupThreadId : SV_GroupThreadID) 
{
    uint ThreadIndex = GroupThreadId.y * THREADGROUP_SIZEX + GroupThreadId.x;

	float2 BaseLevelScreenUV = (DispatchThreadId.xy + float2(.5f, .5f)) * DOWNSAMPLE_FACTOR * View.BufferSizeAndInvSize.zw;
	float SceneDepth = GetDownsampledDepth(BaseLevelScreenUV);

	//float2 ScreenUV = (DispatchThreadId.xy * DOWNSAMPLE_FACTOR + View.ViewRectMin.xy + float2(.5f, .5f)) * View.BufferSizeAndInvSize.zw;
	//float SceneDepth = CalcSceneDepth(ScreenUV);

	// Initialize per-tile variables
    if (ThreadIndex == 0) 
	{
        IntegerTileMinZ = 0x7F7FFFFF;     
        IntegerTileMaxZ = 0;
		IntegerTileMinZ2 = 0x7F7FFFFF;  
		IntegerTileMaxZ2 = 0;
    }

    GroupMemoryBarrierWithGroupSync();
    
	// Use shared memory atomics to build the depth bounds for this tile
	// Each thread is assigned to a pixel at this point

	if (SceneDepth < AOMaxViewDistance)
	{
		InterlockedMin(IntegerTileMinZ, asuint(SceneDepth));
		InterlockedMax(IntegerTileMaxZ, asuint(SceneDepth));
	}

    GroupMemoryBarrierWithGroupSync();

    float MinTileZ = asfloat(IntegerTileMinZ);
    float MaxTileZ = asfloat(IntegerTileMaxZ);

	float HalfZ = .5f * (MinTileZ + MaxTileZ);

	// Compute a second min and max Z, clipped by HalfZ, so that we get two depth bounds per tile
	// This results in more conservative tile depth bounds and fewer intersections
	if (SceneDepth >= HalfZ && SceneDepth < AOMaxViewDistance)
	{
		InterlockedMin(IntegerTileMinZ2, asuint(SceneDepth));
	}

	if (SceneDepth <= HalfZ)
	{
		InterlockedMax(IntegerTileMaxZ2, asuint(SceneDepth));
	}

	GroupMemoryBarrierWithGroupSync();
	
	float MinTileZ2 = asfloat(IntegerTileMinZ2);
	float MaxTileZ2 = asfloat(IntegerTileMaxZ2);

	if (ThreadIndex == 0)
	{
		float3 TileConeVertex;
		float3 TileConeAxis;
		float TileConeAngleCos;
		float TileConeAngleSin;
		float4 ConeAxisDepthRanges;

		{
			float2 ViewSize = float2(1 / View.ViewToClip[0][0], 1 / View.ViewToClip[1][1]);
			float3 TileCorner00 = normalize(float3((GroupId.x + 0) / NumGroups.x * ViewSize.x * 2 - ViewSize.x, ViewSize.y - (GroupId.y + 0) / NumGroups.y * ViewSize.y * 2, 1));
			float3 TileCorner10 = normalize(float3((GroupId.x + 1) / NumGroups.x * ViewSize.x * 2 - ViewSize.x, ViewSize.y - (GroupId.y + 0) / NumGroups.y * ViewSize.y * 2, 1));
			float3 TileCorner01 = normalize(float3((GroupId.x + 0) / NumGroups.x * ViewSize.x * 2 - ViewSize.x, ViewSize.y - (GroupId.y + 1) / NumGroups.y * ViewSize.y * 2, 1));
			float3 TileCorner11 = normalize(float3((GroupId.x + 1) / NumGroups.x * ViewSize.x * 2 - ViewSize.x, ViewSize.y - (GroupId.y + 1) / NumGroups.y * ViewSize.y * 2, 1));

			TileConeAxis = normalize(TileCorner00 + TileCorner10 + TileCorner01 + TileCorner11);
			TileConeAngleCos = dot(TileConeAxis, TileCorner00);
			TileConeAngleSin = sqrt(1 - TileConeAngleCos * TileConeAngleCos);

			float TileConeAngleTan = TileConeAngleSin / TileConeAngleCos; 
			float ConeExpandDistance = 0;
			float VertexPullbackLength = ConeExpandDistance / TileConeAngleTan;
			float DistanceToNearPlane = length(TileConeAxis / TileConeAxis.z * View.NearPlane);
			// 1 / cos(AngleBetweenTileCenterAndViewForward)
			float InvCosTileAngle = 1.0f / TileConeAxis.z;
			float ConeAxisDistanceMultiply = InvCosTileAngle;
			float ConeAxisDistanceAdd = VertexPullbackLength + DistanceToNearPlane;
			ConeAxisDepthRanges.x = ConeAxisDistanceMultiply * (MinTileZ - ConeExpandDistance) + ConeAxisDistanceAdd;
			ConeAxisDepthRanges.y = ConeAxisDistanceMultiply * (MaxTileZ2 + ConeExpandDistance) + ConeAxisDistanceAdd;
			ConeAxisDepthRanges.z = ConeAxisDistanceMultiply * (MinTileZ2 - ConeExpandDistance) + ConeAxisDistanceAdd;
			ConeAxisDepthRanges.w = ConeAxisDistanceMultiply * (MaxTileZ + ConeExpandDistance) + ConeAxisDistanceAdd;

			// Pull back cone vertex to contain potential samples
			TileConeVertex = float3(0, 0, 0) - TileConeAxis * VertexPullbackLength;
		}

		uint TileIndex = GroupId.y * NumGroups.x + GroupId.x;
		if (IntegerTileMinZ > IntegerTileMaxZ)
		{
			// Guard against IntegerTileMinZ never getting updated
			RWTileConeAxisAndCos[TileIndex] = float4(0, 0, 0, 1);
			RWTileConeDepthRanges[TileIndex] = 0;
		}
		else
		{
			RWTileConeAxisAndCos[TileIndex] = float4(TileConeAxis, TileConeAngleCos);
			RWTileConeDepthRanges[TileIndex] = ConeAxisDepthRanges;
		}
	}
}


struct FObjectCullVertexOutput
{
	nointerpolation float4 PositionAndRadius : TEXCOORD0;
	nointerpolation uint ObjectIndex : TEXCOORD1;
};
 
float ConservativeRadiusScale;

/** Used when culling objects into screenspace tile lists */
void ObjectCullVS(
	float4 InPosition : ATTRIBUTE0, 		//有理由认为，这是一个方向向量 -> GLowPolyStencilSphereIndexBuffer.IndexBufferRHI 
	uint ObjectIndex : SV_InstanceID,  		//注意，这个货是唯一的！意味着一个VS + PS流程就处理了1个Object！  
	out FObjectCullVertexOutput Output,
	out float4 OutPosition : SV_POSITION
	)
{
	//@todo - implement ConservativelyBoundSphere
	// 获取待测试物体(Object)的世界空间坐标 
	float4 ObjectPositionAndRadius = LoadObjectPositionAndRadius(ObjectIndex); 
	//@todo - expand to handle conservative rasterization
	// 计算最大影响半径 = (物体的模型半径 + AO最大追踪距离) * 缩放系数 
	// AOObjectMaxDistance=100, ConservativeRadiusScale=0.00781 
	float EffectiveRadius = (ObjectPositionAndRadius.w + AOObjectMaxDistance) * ConservativeRadiusScale;	
	//InPosition.xyz只有方向向量时，下面的WorldPosition才有意义，不然会丢失了旋转操作，且对该该float3值的缩放也无法解释。 
	//WorldPosition = 以Object世界坐标为中心，沿着InPosition.xyz方向投射最大影响半径的距离，生成一个新的世界坐标  
	float3 WorldPosition = InPosition.xyz * EffectiveRadius + ObjectPositionAndRadius.xyz;
	//上述生成的世界坐标变换的HClip空间，从而影响到PS的ScreenGrid（或者TileIndex） 
	OutPosition = mul(float4(WorldPosition, 1), View.WorldToClip);
	Output.PositionAndRadius = ObjectPositionAndRadius;
	Output.ObjectIndex = ObjectIndex;
} 

/** Used for object <-> tile culling */
bool IntersectObjectWithConeDepthRange(
	float3 TileConeVertex, 
	float3 TileConeAxis, 
	float TileConeAngleCos, 
	float TileConeAngleSin, 
	float2 ConeDepthRange, 
	float2 ConeAxisDistanceMinMax,  
	uint ObjectIndex)
{
	BRANCH
	if (ConeAxisDistanceMinMax.x > ConeDepthRange.x && ConeAxisDistanceMinMax.y < ConeDepthRange.y)
	{
#define USE_DISTANCE_FIELD_FOR_OBJECT_CULLING 1
#if USE_DISTANCE_FIELD_FOR_OBJECT_CULLING

		// Use the position halfway between the depth ranges as the center for the bounding sphere of this tile depth range
		float3 ViewTileBoundingSphereCenter = TileConeVertex + TileConeAxis * (.5f * (ConeDepthRange.x + ConeDepthRange.y));
		float3 WorldTileBoundingSphereCenter = mul(float4(ViewTileBoundingSphereCenter.xyz, 1), View.ViewToTranslatedWorld).xyz - View.PreViewTranslation.xyz;
		float DistanceAlongAxis = .5f * (ConeDepthRange.y - ConeDepthRange.x);
		float FarDepthDistanceToEdgeOfCone = ConeDepthRange.y * TileConeAngleSin / TileConeAngleCos;
		float TileBoundingSphereRadius = sqrt(DistanceAlongAxis * DistanceAlongAxis + FarDepthDistanceToEdgeOfCone * FarDepthDistanceToEdgeOfCone);

		float3 LocalPositionExtent = LoadObjectLocalPositionExtent(ObjectIndex);
		float4x4 WorldToVolume = LoadObjectWorldToVolume(ObjectIndex);
		bool bGeneratedAsTwoSided;
		float4 UVScaleAndVolumeScale = LoadObjectUVScale(ObjectIndex, bGeneratedAsTwoSided);
		float3 VolumeTileBoundingSphereCenter = mul(float4(WorldTileBoundingSphereCenter, 1), WorldToVolume).xyz;
		float BoxDistance = ComputeDistanceFromBoxToPoint(-LocalPositionExtent, LocalPositionExtent, VolumeTileBoundingSphereCenter) * UVScaleAndVolumeScale.w;

		BRANCH
		if (BoxDistance < TileBoundingSphereRadius + AOObjectMaxDistance)
		{
			float3 UVAdd = LoadObjectUVAddAndSelfShadowBias(ObjectIndex).xyz;
			float2 DistanceFieldMAD = LoadObjectDistanceFieldMAD(ObjectIndex);

			float3 ClampedSamplePosition = clamp(VolumeTileBoundingSphereCenter, -LocalPositionExtent, LocalPositionExtent);
			float DistanceToClamped = length(VolumeTileBoundingSphereCenter - ClampedSamplePosition);

			float3 StepVolumeUV = DistanceFieldVolumePositionToUV(ClampedSamplePosition, UVScaleAndVolumeScale.xyz, UVAdd);
			float DistanceToOccluder = (SampleMeshDistanceField(StepVolumeUV, DistanceFieldMAD).x + DistanceToClamped) * UVScaleAndVolumeScale.w;

			BRANCH
			if (DistanceToOccluder < TileBoundingSphereRadius + AOObjectMaxDistance)
			{
				return true;
			}
		}

#else
		return true;
#endif
	}

	return false;
}

Buffer<float4> TileConeAxisAndCos;
Buffer<float4> TileConeDepthRanges;

RWBuffer<uint> RWNumCulledTilesArray;
RWBuffer<uint> RWCulledTilesStartOffsetArray;
RWBuffer<uint> RWCulledTileDataArray;

/** Intersects a single object with the tile and adds to the intersection list if needed. */ 
// 通过ObjectCullVS的调节，每个PS对应了一个Obj，同时也会映射到Group中的一个Cone(类比于Grid Frustum) 
void ObjectCullPS(
	FObjectCullVertexOutput Input, 
	in float4 SVPos : SV_POSITION,
	out float4 OutColor : SV_Target0) 
{
	OutColor = 0;
	
	uint2 TilePosition = (uint2)SVPos.xy;  //说明当前PS对应的分辨率 = [54，30]  
	uint TileIndex = TilePosition.y * NumGroups.x + TilePosition.x;  //NumGroups = [54, 30] 
	float4 ConeAxisAndCos = TileConeAxisAndCos.Load(TileIndex);
	float4 ConeAxisDepthRanges = TileConeDepthRanges.Load(TileIndex);
	float3 TileConeVertex = 0; 										//在View Space中，原点0代表摄像机位置 
	float3 TileConeAxis = ConeAxisAndCos.xyz;
	float TileConeAngleCos = ConeAxisAndCos.w;
	float TileConeAngleSin = sqrt(1 - TileConeAngleCos * TileConeAngleCos);

	float4 WorldSphereCenterAndRadius = Input.PositionAndRadius;
	float3 ViewSpaceSphereCenter = mul(float4(WorldSphereCenterAndRadius.xyz + View.PreViewTranslation.xyz, 1), View.TranslatedWorldToView).xyz;
	
	// A value of 1 is conservative, but has a huge impact on performance
	float RadiusScale = .5f;

	// ViewSpace中待测试Object的中心点位置和作用半径 
	float4 SphereCenterAndRadius = float4(ViewSpaceSphereCenter, WorldSphereCenterAndRadius.w + RadiusScale * AOObjectMaxDistance);

	// 先判断Cone - Sphere 是否相交 
	if (SphereIntersectCone(SphereCenterAndRadius, TileConeVertex, TileConeAxis, TileConeAngleCos, TileConeAngleSin))
	{
		float ConeAxisDistance = dot(SphereCenterAndRadius.xyz - TileConeVertex, TileConeAxis);
		float2 ConeAxisDistanceMinMax = float2(ConeAxisDistance + SphereCenterAndRadius.w, ConeAxisDistance - SphereCenterAndRadius.w);

		uint TotalNumGroups = (uint)(NumGroups.x * NumGroups.y + .5f);

		// 再判断是否与Cone中的一段（由最远和最近深度确定）相交 
		bool bTileIntersectsObject = IntersectObjectWithConeDepthRange(TileConeVertex, TileConeAxis, TileConeAngleCos, TileConeAngleSin, ConeAxisDepthRanges.xy, ConeAxisDistanceMinMax, Input.ObjectIndex);

		if (!bTileIntersectsObject)
		{
			bTileIntersectsObject = IntersectObjectWithConeDepthRange(TileConeVertex, TileConeAxis, TileConeAngleCos, TileConeAngleSin, ConeAxisDepthRanges.zw, ConeAxisDistanceMinMax, Input.ObjectIndex);
		}

		if (bTileIntersectsObject)  //如果相交，那么当前Tile就和这个物体产生了关联 -> 在计算当前Tile表面像素时，从表面开展RayMarching可能会遇到当前的Object 
		{
#if SCATTER_CULLING_COUNT_PASS
			InterlockedAdd(RWNumCulledTilesArray[Input.ObjectIndex], 1);
#else
			// RWNumCulledTilesArray 是uint数组，下标代表ObjectIndex，值代表该Object与多少个Tile有交集 
			// 这里使用了atomic操作，说明一个ObjectIndex可能带有多个VS+PS，意味着VS中的InPosition可能不止一个朝向 
			uint CulledTileIndex; 
			InterlockedAdd(RWNumCulledTilesArray[Input.ObjectIndex], 1, CulledTileIndex);

			uint CulledTileDataStart = CulledTilesStartOffsetArray[Input.ObjectIndex]; //找到偏移起始点 -> 参考 ComputeCulledTilesStartOffsetCS  

			// 证明一个Object可能影响多个Tile，所以才有下面的 “ + CulledTileIndex” 
			// 这个数据结构数组记录了 Object 和可能影响的(0个到多个)TileIndex之间的关系 
			RWCulledTileDataArray[(CulledTileDataStart + CulledTileIndex) * CULLED_TILE_DATA_STRIDE + 0] = TileIndex;
			RWCulledTileDataArray[(CulledTileDataStart + CulledTileIndex) * CULLED_TILE_DATA_STRIDE + 1] = Input.ObjectIndex;
#endif
		}
	}
}

RWBuffer<uint> RWObjectTilesIndirectArguments;
Buffer<uint> NumCulledTilesArray;

#ifndef COMPUTE_START_OFFSET_GROUP_SIZE
#define COMPUTE_START_OFFSET_GROUP_SIZE 1
#endif

[numthreads(COMPUTE_START_OFFSET_GROUP_SIZE, 1, 1)]  //64,1,1 
void ComputeCulledTilesStartOffsetCS(
	uint3 GroupId : SV_GroupID,
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint3 GroupThreadId : SV_GroupThreadID)
{
	uint ObjectIndex = DispatchThreadId.x; 				// 最多支持 64 * 168 = 10752 个待Cull物体 
	uint NumCulledObjects = GetCulledNumObjects(); 		// Cull 之后剩余 2413 -> TODO 怎么知道的? 

	if (ObjectIndex < NumCulledObjects)
	{
		//获取当前Obj到底与多少个Tile相交了 
		uint NumIntersectingTiles = NumCulledTilesArray[ObjectIndex];  //会在之前通过ObjectCullPS Pass填充 
		//如果1个CS_ThreadGroup能处理4个Tile，那么要多少个ThreadGroup来处理这个Object所对应的Tile呢？ 举例，若相交Tile=55，则需要14个ThreadGroup来处理这个Object 
		uint NumConeTraceThreadGroups = (NumIntersectingTiles + CONE_TRACE_TILES_PER_THREADGROUP - 1) / CONE_TRACE_TILES_PER_THREADGROUP;
		//通过原子累加，一边计算总共需要多少个ThreadGroup来处理全部Object，一边获取每个Object对应的起始偏移地址 
		uint StartOffsetThreadGroups;
		InterlockedAdd(RWObjectTilesIndirectArguments[0], NumConeTraceThreadGroups, StartOffsetThreadGroups);
		uint StartOffset = StartOffsetThreadGroups * CONE_TRACE_TILES_PER_THREADGROUP;  // CONE_TRACE_TILES_PER_THREADGROUP = 4 
		RWCulledTilesStartOffsetArray[ObjectIndex] = StartOffset;

		// Pad remaining entries with INVALID_TILE_INDEX so we can skip computing them in the cone tracing pass
		// 简言之，如下for循环最多执行 CONE_TRACE_TILES_PER_THREADGROUP - 1 次，负责把最后一个ThreadGroup中只起到填充padding作用的TileData给置位Invalid 
		for (uint PaddingTileIndex = NumIntersectingTiles; PaddingTileIndex < NumConeTraceThreadGroups * CONE_TRACE_TILES_PER_THREADGROUP; PaddingTileIndex++)
		{
			RWCulledTileDataArray[(StartOffset + PaddingTileIndex) * CULLED_TILE_DATA_STRIDE + 0] = INVALID_TILE_INDEX;
			RWCulledTileDataArray[(StartOffset + PaddingTileIndex) * CULLED_TILE_DATA_STRIDE + 1] = ObjectIndex;
		}
	}

	if (DispatchThreadId.x == 0)
	{
		RWObjectTilesIndirectArguments[1] = 1;
		RWObjectTilesIndirectArguments[2] = 1;
	}
}