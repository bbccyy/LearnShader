PS_HangingLantern

Shader hash 1362272f-b4a82c02-e95a84e6-5039fa79

ps_5_0
      dcl_globalFlags refactoringAllowed
      dcl_constantbuffer cb0[178], immediateIndexed
      dcl_constantbuffer cb1[2], immediateIndexed
      dcl_constantbuffer cb2[7], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_sampler s2, mode_default
      dcl_sampler s3, mode_default
      dcl_sampler s4, mode_default

      dcl_resource_structured t0, 16
      dcl_resource_texture2d (float,float,float,float) t1               T_THangingLantern_N
      dcl_resource_texture2d (float,float,float,float) t2               T_THangingLantern_E
      dcl_resource_texture2d (float,float,float,float) t3               T_THangingLantern_Flicker
      dcl_resource_texture2d (float,float,float,float) t4               T_THangingLantern_D
      dcl_resource_texture2d (float,float,float,float) t5               T_THangingLantern_Comp_H_R_AO

      dcl_input_ps linear centroid v0.xyz                               Tangent
      dcl_input_ps linear centroid v1.xyzw                              Normal + Sign
      dcl_input_ps linear v2.xy                                         UV
      dcl_input_ps nointerpolation v3.x                                 InstanceID
      dcl_input_ps_siv linear noperspective v4.xyz, position            SVPos
      dcl_input_ps_sgv nointerpolation v5.x, isfrontface                VFace

      dcl_output o0.xyzw                CameraColor
      dcl_output o1.xyzw                Normal
      dcl_output o2.xyzw                M_D_R_I
      dcl_output o3.xyzw                Diffuse
      dcl_output o4.xyzw                Custom
      dcl_temps 7

   0: mul r0.xyz, v0.yzxy, v1.zxyz
   1: mad r0.xyz, v1.yzxy, v0.zxyz, -r0.xyzx
   2: mul r0.xyz, r0.xyzx, v1.wwww                    BitangentWS = cross(TangentWS, NormalWS) * sign

   3: imad r1.xyz, v3.xxxx, l(35, 35, 35, 0), l(4, 5, 20, 0)
   4: ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r0.w, r1.x, l(12), t0.xxxx
   5: mul r0.w, r0.w, cb0[140].w                      flag -> dont flip norm -> true -> 1

   6: movc r1.x, v5.x, l(1.0000), l(-1.0000)
   7: mul r0.w, r0.w, r1.x                            flip boolean -> signed_dir

   8: sample_b(texture2d)(float,float,float,float) r1.xw, v2.xyxx, t1.xzwy, s0, cb0[142].y
   9: mad r2.xy, r1.xwxx, l(2.0000, 2.0000, 0.0000, 0.0000), l(-1.0000, -1.0000, 0.0000, 0.0000)
  10: dp2 r1.x, r2.xyxx, r2.xyxx
  11: add r1.x, -r1.x, l(1.0000)
  12: max r1.x, r1.x, l(0)
  13: sqrt r2.z, r1.x                                 Unpack NormalTS RGB in Tangent Space

  14: mad r2.xyz, r2.xyzx, cb0[137].wwww, cb0[137].xyzx     NormalTS * 1 + 0
  15: dp3 r1.x, r2.xyzx, r2.xyzx
  16: rsq r1.x, r1.x
  17: mul r2.xyz, r1.xxxx, r2.xyzx                    normalize(NormalTS)

  18: mul r0.xyz, r0.xyzx, r2.yyyy
  19: mad r0.xyz, r2.xxxx, v0.xyzx, r0.xyzx
  20: mad r0.xyz, r2.zzzz, v1.xyzx, r0.xyzx
  21: dp3 r1.x, r0.xyzx, r0.xyzx
  22: rsq r1.x, r1.x
  23: mul r0.xyz, r0.xyzx, r1.xxxx                    nDirWS = normalize(mul(NormalTS, tbn))

  24: mul r0.xyz, r0.wwww, r0.xyzx                    nDirWS = nDirWS * signed_dir

  25: sample_b(texture2d)(float,float,float,float) r0.w, v2.xyxx, t2.yzwx, s1, cb0[142].y       Sample Emittion x channel
  26: mul r0.w, r0.w, cb2[6].x                        E * 10      -> * WindShakeStrengthCap

  27: add r1.x, cb1[1].y, l(-1.0000)                  (1) - 1 -> ??
  28: mul r1.x, r1.x, l(0.0526)
  29: add r2.xyz, cb2[3].xyzx, -cb2[4].xyzx           Tint2(5, 0.3, 0) - Tint1(1, 0.3, 0)
  30: mad r2.xyz, r1.xxxx, r2.xyzx, cb2[4].xyzx       lerp(Tint1, Tint2, r1.x) -> r1.x == 0
  31: mul r2.xyz, r0.wwww, r2.xyzx                    E * (~) -> E Tint

  32: add r3.xy, -cb2[6].yzyy, l(0.1000, 1.0000, 0.0000, 0.0000)        1 - (BottomValueA, BottomValueB)
  33: mad r0.w, r1.x, r3.x, cb2[6].y                  BottomValue1 = lerp(BottomValueA, 1, r1.x) -> r1.x == 0

  34: sample_b(texture2d)(float,float,float,float) r1.x, v2.xyxx, t3.xyzw, s2, cb0[142].y       Sample Flicker x channel

  35: ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r1.w, r1.y, l(0), t0.xxxx    推测是Matrix_M[0][3]
  36: frc r1.xw, r1.xxxw                              取余 -> r1.w 是利用世界坐标产生的随机值
  37: add r1.x, r1.w, r1.x                            frac(Flicker.x) + frac(Matrix_M[0][3])
  38: add r1.x, r1.x, l(1.0000)                       1 + (~)
  39: mul r1.x, r1.x, cb0[141].z                      (~) * 45.591671 (?数字含义不明) -> 有可能与 Time 相关 

  40: mul r3.xzw, r1.xxxx, l(2.0944, 0.0000, 1.2566, 4.4880)      (2.0944, 1.2566, 4.4880) * (~) 理论上是个三维的随机数
  41: sincos r3.xzw, null, r3.xxzw                    calc sin val against r3.xzw
  42: mul r3.xzw, r3.xxzw, l(6.2832, 0.0000, 6.2832, 6.2832)      (~) * (6.2832, 6.2832, 6.2832) 
  43: sincos r3.xzw, null, r3.xxzw                    calc cos val based on (~)

  44: add r3.xzw, r3.xxzw, l(1.0000, 0.0000, 1.0000, 1.0000)      (~) + 1 -> 调整范围到[0,2]区间 
  45: mul r1.xw, r3.xxxw, l(0.5000, 0.0000, 0.0000, 0.5000)       (~).xw * 0.5 -> XW通道调整范围到[0,1]区间 -> Z通道还是保持[0,2]区间

  46: add r2.w, -r0.w, l(1.0000)                      1 - BottomValue1
  47: mad r1.x, r1.x, r2.w, r0.w                      lerp(BottomValue1, 1, r1.x) -> r1.x是[0,1]区间的随机量

  48: mul r2.w, r2.w, r3.z                            (1 - BottomValue1) * r3.z([0,2]区间随机值)
  49: mad r0.w, r2.w, l(0.5000), r0.w                 0.5 * (~) + BottomValue1
  50: mul r0.w, r0.w, r1.x                            mixedBottomValue1 = (~) * lerp(...)

  51: mad r1.x, r1.w, r3.y, cb2[6].z                  r1.w([0,1]区间随机值) * (1 - BottomValueB) + BottomValueB
                                                      BottomValue2 = lerp(BottomValueB, 1, r1.w)

  52: mul r0.w, r0.w, r1.x                            mixedBottomValue = mixedBottomValue1 * BottomValue2
  53: frc r0.w, r0.w                                  frac(mixedBottomValue)
  54: mul r0.w, r0.w, cb1[1].y                        mixedBottomValue * 1

  55: mul r3.xyz, r0.wwww, r2.xyzx                    BottomETint = E Tint * mixedBottomValue
  56: mad r2.xyz, -r2.xyzx, r0.wwww, cb2[5].xyzx      cb2[5].xyz=0(E_Zero) - BottomETint
  57: mad r2.xyz, cb2[6].wwww, r2.xyzx, r3.xyzx       Final E = lerp(BottomETint, E_Zero, cb2[6].w=0=WindShakeStrength)

  58: sample_b(texture2d)(float,float,float,float) r3.xyz, v2.xyxx, t4.xyzw, s3, cb0[142].y     Sample Diffuse
  59: sample_b(texture2d)(float,float,float,float) r1.xw, v2.xyxx, t5.zxwy, s4, cb0[142].y      Sample Comp_H_R_AO

  60: mov_sat r3.xyz, r3.xyzx                         saturate(Diffuse)
  61: mov_sat r1.xw, r1.xxxw                          saturate(AO_R)

  62: mad o2.z, r1.w, cb0[138].y, cb0[138].x          Roughness = AO_R.y * 1 + 0

  63: ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) o1.w, r1.z, l(4), t0.xxxx    0.333

  64: mad r4.xyz, r3.xyzx, cb0[135].wwww, cb0[135].xyzx                                   Diffuse * 1 + 0
  65: mad r5.xyz, cb0[136].wwww, l(0.0400, 0.0400, 0.0400, 0.0000), cb0[136].xyzx         Specular = 1 * 0.04 + 0

  66: ne r0.w, l(0, 0, 0, 0), cb0[177].w              0 != 0 ? -> false -> not View.RenderingReflectionCaptureMask

  67: mad r6.xyz, r5.xyzx, l(0.4500, 0.4500, 0.4500, 0.0000), r4.xyzx
  68: movc r4.xyz, r0.wwww, r6.xyzx, r4.xyzx
  69: movc r5.xyz, r0.wwww, l(0, 0, 0, 0), r5.xyzx    EnvBRDFApproxFullyRough(Diffuse, Specular)

  70: dp3 r0.w, r5.xyzx, l(0.3000, 0.5900, 0.1100, 0.0000)
  71: mad r6.xyz, r0.wwww, l(2.0404, -4.7951, 2.7552, 0.0000), l(-0.3324, 0.6417, 0.6903, 0.0000)
  72: mad r0.w, r1.x, r6.x, r6.y
  73: mad r0.w, r0.w, r1.x, r6.z
  74: mul r0.w, r1.x, r0.w
  75: max o3.w, r0.w, r1.x                            AOMultiBounce(Luminance(Specular), AO_R.x)

  76: mad r1.xzw, r5.xxyz, l(0.4500, 0.0000, 0.4500, 0.4500), r4.xxyz   EnvBRDFApproxFullyRough(Diffuse, Specular) -> ReflectDiffuse

  77: max r2.xyz, r2.xyzx, l(0, 0, 0, 0)              max(Final E, 0)

  78: lt r0.w, l(0), cb0[139].x
  79: if_nz r0.w
  80:   mul r4.xyzw, v4.yyyy, cb0[45].xyzw
  81:   mad r4.xyzw, v4.xxxx, cb0[44].xyzw, r4.xyzw
  82:   mad r4.xyzw, v4.zzzz, cb0[46].xyzw, r4.xyzw
  83:   add r4.xyzw, r4.xyzw, cb0[47].xyzw
  84:   div r4.xyz, r4.xyzx, r4.wwww
  85:   add r4.xyz, r4.xyzx, -cb0[70].xyzx
  86:   ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r5.xyz, r1.y, l(0), t0.xyzx
  87:   add r5.xyz, r4.xyzx, -r5.xyzx
  88:   imad r0.w, v3.x, l(35), l(19)
  89:   ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r6.xyz, r0.w, l(0), t0.xyzx
  90:   add r6.xyz, r6.xyzx, l(1.0000, 1.0000, 1.0000, 0.0000)
  91:   lt r5.xyz, r6.xyzx, abs(r5.xyzx)
  92:   or r0.w, r5.y, r5.x
  93:   or r0.w, r5.z, r0.w
  94:   dp3 r1.y, r4.xyzx, l(0.5770, 0.5770, 0.5770, 0.0000)
  95:   mul r1.y, r1.y, l(0.0020)
  96:   frc r1.y, r1.y
  97:   lt r1.y, l(0.5000), r1.y
  98:   movc r4.xyz, r1.yyyy, l(0.0000, 1.0000, 1.0000, 0.0000), l(1.0000, 1.0000, 0.0000, 0.0000)
  99:   movc r2.xyz, r0.wwww, r4.xyzx, r2.xyzx
 100: endif

 101: mad r1.xyz, cb0[144].yyyy, r1.xzwx, r2.xyzx     0 * ReflectDiffuse + Final E
 102: mad o1.xyz, r0.xyzx, l(0.5000, 0.5000, 0.5000, 0.0000), l(0.5000, 0.5000, 0.5000, 0.0000)       nDirWS * 0.5 + 0.5
 103: mul o0.xyz, r1.xyzx, cb0[134].yyyy              Final E * 1
 104: mov o0.w, l(0)                                  E Intensity = 0
 105: mov o2.xyw, l(0.0000, 0.5000, 0.0000, 0.6941)   Metallic=0, Spec=0.5, Flag=177/255
 106: mov o3.xyz, r3.xyzx                             saturate(Diffuse)
 107: mov o4.xyzw, l(0, 0, 0, 0)                      CustomData
 108: ret
