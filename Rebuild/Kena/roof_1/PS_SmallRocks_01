PS_SmallRocks_01

Shader hash 6ddc25b5-e04c8398-0369463b-32c50cb5

ps_5_0
      dcl_globalFlags refactoringAllowed
      dcl_constantbuffer cb0[178], immediateIndexed
      dcl_constantbuffer cb1[9], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_sampler s2, mode_default

      dcl_resource_structured t0, 16
      dcl_resource_texture2d (float,float,float,float) t1               NormalRG
      dcl_resource_texture2d (float,float,float,float) t2               Albedo
      dcl_resource_texture2d (float,float,float,float) t3               Comp_Ao_M_R

      dcl_input_ps linear centroid v0.xyz                               Tangent
      dcl_input_ps linear centroid v1.xyzw                              Normal + Sign
      dcl_input_ps linear v2.xy                                         UV
      dcl_input_ps nointerpolation v3.x                                 InstanceID
      dcl_input_ps_siv linear noperspective v4.xyz, position            SVPos

      dcl_output o0.xyzw                CameraColor
      dcl_output o1.xyzw                Normal
      dcl_output o2.xyzw                M_D_R_I
      dcl_output o3.xyzw                Diffuse
      dcl_output o4.xyzw                Custom
      dcl_temps 8

   0: mul r0.xyz, v0.yzxy, v1.zxyz
   1: mad r0.xyz, v1.yzxy, v0.zxyz, -r0.xyzx
   2: mul r0.xyz, r0.xyzx, v1.wwww                    BitangentWS = cross(TangentWS, NormalWS) * sign

   3: mul r1.xy, v2.xyxx, cb1[6].yyyy                 UV * 1
   4: sample_b(texture2d)(float,float,float,float) r1.zw, r1.xyxx, t1.zwxy, s0, cb0[142].y            Sample NormalTS
   5: mad r2.xy, r1.zwzz, l(2.0000, 2.0000, 0.0000, 0.0000), l(-1.0000, -1.0000, 0.0000, 0.0000)
   6: dp2 r0.w, r2.xyxx, r2.xyxx
   7: add r0.w, -r0.w, l(1.0000)
   8: max r0.w, r0.w, l(0)
   9: sqrt r2.z, r0.w                                 Unpack NormalTS RGB in Tangent Space -> r2.xyz 

  10: mad r2.xyz, cb1[2].xyzx, r2.xyzx, r2.xyzx
  11: mad r2.xyz, r2.xyzx, cb0[137].wwww, cb0[137].xyzx     (NormalTS * half3(0,0,0) + NormalTS) * 1 + half3(0,0,0) -> rotated normTS

  12: dp3 r0.w, r2.xyzx, r2.xyzx
  13: rsq r0.w, r0.w
  14: mul r2.xyz, r0.wwww, r2.xyzx                    normalize(NormalTS)

  15: mul r0.xyz, r0.xyzx, r2.yyyy
  16: mad r0.xyz, r2.xxxx, v0.xyzx, r0.xyzx
  17: mad r0.xyz, r2.zzzz, v1.xyzx, r0.xyzx
  18: dp3 r0.w, r0.xyzx, r0.xyzx
  19: rsq r0.w, r0.w
  20: mul r0.xyz, r0.wwww, r0.xyzx                    nDirWS = normalize(mul(NormalTS, tbn))

  21: mul r2.xyz, cb1[3].xyzx, cb1[6].zzzz            _Emissive_Color = 0

  22: sample_b(texture2d)(float,float,float,float) r3.xyz, r1.xyxx, t2.xyzw, s1, cb0[142].y     Sampel Diffuse
  23: mul r3.xyz, r3.xyzx, cb1[6].wwww
  24: mul r4.xyz, r3.xyzx, cb1[5].xyzx                (0.253183, 0.276297, 0.291667) * diffuse -> _Color_Overlay

  25: dp3 r0.w, r4.xyzx, l(0.3000, 0.5900, 0.1100, 0.0000)
  26: mad r3.xyz, -r3.xyzx, cb1[5].xyzx, r0.wwww
  27: mad_sat r3.xyz, cb1[7].zzzz, r3.xyzx, r4.xyzx   dBase = lerp(dBase, lum(dBase) - dBase, 0) -> _Desaturate = 0

  28: sample_b(texture2d)(float,float,float,float) r1.xyz, r1.xyxx, t3.zxyw, s2, cb0[142].y     Sample Comp_M_R_Ao -> [Ao, M, Rough]

  29: mul_sat r4.x, r1.y, cb1[7].w                    Metallic = sat(M * 0)         MetallicScaler = 0
  30: mul_sat r0.w, r1.z, cb1[8].y                    Roughness = sat(Rough * 1)    RoughnessScaler = 1

  31: mov_sat r4.y, cb1[8].x                          Specular = sat(0.3)
  32: mov_sat r1.x, r1.x                              baseAO = sat(texD)      //Comp_Ao_M_R.x -> Ao来自纹理

  33: mad o2.z, r0.w, cb0[138].y, cb0[138].x          Output Roughness = Roughness * 1 + 0

  34: imad r0.w, v3.x, l(35), l(20)
  35: ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) o1.w, r0.w, l(4), t0.xxxx    0.333

  36: mul r0.w, r4.y, l(0.0800)
  37: mad r1.yzw, -r4.yyyy, l(0.0000, 0.0800, 0.0800, 0.0800), r3.xxyz
  38: mad r1.yzw, r4.xxxx, r1.yyzw, r0.wwww           SpecCol = ComputeF0(Specular, dBase, Metallic)

  39: mad r5.xyz, -r3.xyzx, r4.xxxx, r3.xyzx                      BaseCol = dBase * (1 - Metallic)
  40: mad r5.xyz, r5.xyzx, cb0[135].wwww, cb0[135].xyzx           BaseCol * 1 + 0
  41: mad r1.yzw, r1.yyzw, cb0[136].wwww, cb0[136].xxyz           SpecCol * 1 + 0

  42: ne r0.w, l(0, 0, 0, 0), cb0[177].w                          0 != 0 ? -> false -> not View.RenderingReflectionCaptureMask

  43: mad r6.xyz, r1.yzwy, l(0.4500, 0.4500, 0.4500, 0.0000), r5.xyzx         SpecCol * 0.45 + BaseCol -> reflectionBaseCol
                                                                  EnvBRDFApproxFullyRough(diffuseCol, specularCol)
  44: movc r5.xyz, r0.wwww, r6.xyzx, r5.xyzx                      BaseCol = RenderingReflectionCaptureMask ? reflectionBaseCol : BaseCol;
  45: movc r1.yzw, r0.wwww, l(0, 0, 0, 0), r1.yyzw                SpecCol = RenderingReflectionCaptureMask ? 0 : SpecCol;

  46: dp3 r0.w, r1.yzwy, l(0.3000, 0.5900, 0.1100, 0.0000)
  47: mad r6.xyz, r0.wwww, l(2.0404, -4.7951, 2.7552, 0.0000), l(-0.3324, 0.6417, 0.6903, 0.0000)
  48: mad r0.w, r1.x, r6.x, r6.y
  49: mad r0.w, r0.w, r1.x, r6.z
  50: mul r0.w, r1.x, r0.w
  51: max o3.w, r0.w, r1.x                                        AOMultiBounce(Luminance(SpecCol), baseAO)

  52: mad r1.xyz, r1.yzwy, l(0.4500, 0.4500, 0.4500, 0.0000), r5.xyzx   EnvBRDFApproxFullyRough -> DiffuseCol for rendering ReflectCapMsk
  53: max r2.xyz, r2.xyzx, l(0, 0, 0, 0)                                SpeclCol for rendering ReflectCapMsk

  54: lt r0.w, l(0), cb0[139].x                                   Emittion related 
  55: if_nz r0.w
  56:   mul r5.xyzw, v4.yyyy, cb0[45].xyzw
  57:   mad r5.xyzw, v4.xxxx, cb0[44].xyzw, r5.xyzw
  58:   mad r5.xyzw, v4.zzzz, cb0[46].xyzw, r5.xyzw
  59:   add r5.xyzw, r5.xyzw, cb0[47].xyzw
  60:   div r5.xyz, r5.xyzx, r5.wwww
  61:   add r5.xyz, r5.xyzx, -cb0[70].xyzx
  62:   imad r4.zw, v3.xxxx, l(0, 0, 35, 35), l(0, 0, 5, 19)
  63:   ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r6.xyz, r4.z, l(0), t0.xyzx
  64:   add r6.xyz, r5.xyzx, -r6.xyzx
  65:   ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r7.xyz, r4.w, l(0), t0.xyzx
  66:   add r7.xyz, r7.xyzx, l(1.0000, 1.0000, 1.0000, 0.0000)
  67:   lt r6.xyz, r7.xyzx, abs(r6.xyzx)
  68:   or r0.w, r6.y, r6.x
  69:   or r0.w, r6.z, r0.w
  70:   dp3 r1.w, r5.xyzx, l(0.5770, 0.5770, 0.5770, 0.0000)
  71:   mul r1.w, r1.w, l(0.0020)
  72:   frc r1.w, r1.w
  73:   lt r1.w, l(0.5000), r1.w
  74:   movc r5.xyz, r1.wwww, l(0.0000, 1.0000, 1.0000, 0.0000), l(1.0000, 1.0000, 0.0000, 0.0000)
  75:   movc r2.xyz, r0.wwww, r5.xyzx, r2.xyzx
  76: endif

  77: mad r1.xyz, cb0[144].yyyy, r1.xyzx, r2.xyzx                 DiffuseCol * _ReflectionAmount + SpecCol
  78: mad o1.xyz, r0.xyzx, l(0.5000, 0.5000, 0.5000, 0.0000), l(0.5000, 0.5000, 0.5000, 0.0000)
                                                                  nDirWS * 0.5 + 0.5 

  79: mul o0.xyz, r1.xyzx, cb0[134].yyyy                          EmitOrRelectionCol * EmittionIntense

  80: mov o0.w, l(0)                                              Emittion Strength?
  81: mov o2.w, l(0.6941)                                         Flag = 177 / 255
  82: mov o2.xy, r4.xyxx                                          Comp_M_D_R
  83: mov o3.xyz, r3.xyzx                                         BaseCol
  84: mov o4.xyzw, l(0, 0, 0, 0)                                  Custom
  85: ret
