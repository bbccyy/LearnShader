SSAO_Unity_MainPS_2

Shader hash a5cae5ac-856d162f-c04a2688-f7e70385

ps_4_0
      dcl_constantbuffer cb0[24], immediateIndexed
      dcl_constantbuffer cb1[13], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default

      dcl_resource_texture2d (float,float,float,float) t0               Depth with 10 Mips
      dcl_resource_texture2d (float,float,float,float) t1               HalfSize Norm + Depth
      dcl_resource_texture2d (float,float,float,float) t2               Random Texture

      dcl_input_ps_siv linear noperspective v0.xy, position             pixel index XY
      dcl_input_ps linear v1.xy                                         UV
      dcl_output o0.xyzw

      dcl_temps 11

   0: mad r0.xy, v1.xyxx, cb1[9].xyxx, cb1[11].xyxx                     TemporalOffset + UV * ViewportUVToRandomUV
   1: sample_b r0.xyzw, r0.xyxx, t2.xyzw, s1, cb0[5].x                  Sample _RandomNormalTex
   2: mad r0.xyz, r0.xyxx, l(2.0000, 2.0000, 2.0000, 0.0000), l(-1.0000, -1.0000, -1.0000, 0.0000) -> float2 RandomVec

   3: frc r1.xy, v1.xyxx
   4: sample_l r1.xyzw, r1.xyxx, t1.xyzw, s0, l(0)
   5: mad r2.xy, -r1.wwww, l(1024.0000, 1024.0000, 0.0000, 0.0000), l(1.0000, 10.0000, 0.0000, 0.0000)
   6: mul r3.z, r1.w, l(1024.0000)                                      float SceneDepth = GetDepthFromAOInput(UV)

   7: mad r1.xyz, r1.xyzx, l(2.0000, 2.0000, 2.0000, 0.0000), l(-1.0000, -1.0000, -1.0000, 0.0000)
                                                                        float3 WorldNormal = GetWorldSpaceNormalFromAOInput(UV);

   8: mad r2.xy, cb1[10].zzzz, r2.xyxx, r3.zzzz                         lerp(SceneDepth, 1, ScaleRadiusInWorldSpace)  -> 还是 SceneDepth
                                                                        lerp(SceneDepth, 10, ScaleRadiusInWorldSpace)

   9: mul r0.w, r2.x, cb1[9].z                                          float ActualAORadius = AORadiusInShader * lerp(... 1)
  10: mul r1.w, r2.y, l(8.0000)                                         8 * lerp(... 10)

  11: mul r0.xyw, r0.wwww, r0.xyxz                                      RandomVec *= ActualAORadius; -> RandomVec.xyx
  12: mov r0.z, -r0.y                                                   xy(-y)x == float4(RandomVec, -RandomVec.y, RandomVec.x)

  13: mov r2.yw, cb1[11].wwww
  14: div r2.xz, cb1[11].wwww, cb1[9].wwww                  float4(InvTanHalfFov/Ratio, InvTanHalfFov, InvTanHalfFov/Ratio, InvTanHalfFov)

  15: mul r4.xyz, r1.yyyy, cb1[1].xyzx
  16: mad r4.xyz, cb1[0].xyzx, r1.xxxx, r4.xyzx
  17: mad r1.xyz, cb1[2].xyzx, r1.zzzz, r4.xyzx
  18: dp3 r3.w, r1.xyzx, r1.xyzx
  19: rsq r3.w, r3.w
  20: mul r1.xyz, r1.xyzx, r3.wwww                    float3 ViewSpaceNormal = TransformViewToWorldDirOveride(WorldNormal, true);

  21: mul r4.xy, v0.xyxx, cb1[4].xyxx                 float2 ScreenPos = PixelIndexToScreenPosition(i.positionCS.xy);
  22: mad r4.xy, r4.xyxx, l(2.0000, 2.0000, 0.0000, 0.0000), l(-1.0000, -1.0000, 0.0000, 0.0000)

  23: mul r3.xy, r3.zzzz, r4.xyxx                     float3 ViewSpacePosition = ReconstructCSPos(SceneDepth, ScreenPos)

  24: mul r3.w, r3.z, cb1[8].y                                          AmbientOcclusionBias * SceneDepth
  25: mul r3.w, r3.w, cb1[10].x                                         ~ * ScaleFactor
  26: mad r3.xyz, r3.wwww, r1.xyzx, r3.xyzx     ViewSpacePosition += AmbientOcclusionBias * SceneDepth * ScaleFactor * ViewSpaceNormal;

  27: mul r1.xyz, r1.wwww, r1.xyzx                    float3 ScaledViewSpaceNormal = 8 * lerp(...) * ViewSpaceNormal

  28: div r1.w, l(1.0000, 1.0000, 1.0000, 1.0000), r3.z                 1.0f / ViewSpacePosition.z
  29: mul r4.xyzw, r1.wwww, r2.xyzw                                     float4 FovFixXY = FovFix.xyxy * (1.0f / ViewSpacePosition.z)

  30: div r2.x, l(1.0000, 1.0000, 1.0000, 1.0000), r2.z                 1.0f / FovFix.x

  31: mul r0.xyzw, r0.xyzw, r4.xyzw       float4 RandomBase = float4(RandomVec, -RandomVec.y, RandomVec.x) * float4(FovFixXY, FovFixXY);

sampleid = 1
  32: mul r4.xyzw, r0.xyzw, l(0.3250, 0.3250, 0.1010, 0.1010)
  33: add r4.xy, r4.zwzz, r4.xyxx                                       LocalRandom for sampleid 1

  34: div r4.zw, r3.xxxy, r3.zzzz                                       float2 ScreenSpacePos = ViewSpacePosition.xy / ViewSpacePosition.z

  35: mad r5.xy, r4.xyxx, l(0.5000, 0.5000, 0.0000, 0.0000), r4.zwzz    Scale = 0.5 -> step = 0
                                                                        float2 ScreenSpacePosL = ScreenSpacePosCenter + InLocalRandom;

  36: mad r5.zw, r5.xxxy, l(0.0000, 0.0000, 0.5000, 0.5000), l(0.0000, 0.0000, 0.5000, 0.5000)
                                                                        ScreenPositionToUV(ScreenSpacePosL)

  37: mul r6.xyzw, cb1[12].zzzz, l(0.0417, 0.0833, 0.1250, 0.2500)      for sampleid = 0,0,1,1  and  step = 0,1,0,1
  38: log r6.xyzw, r6.xyzw                                              float MipLevel = ComputeMipLevel(i, step);

  39: sample_l r7.xyzw, r5.zwzz, t0.xyzw, s0, r6.z
  40: mad r1.w, cb0[23].z, r7.x, cb0[23].w
  41: div r7.z, l(1.0000, 1.0000, 1.0000, 1.0000), r1.w                 float AbsL = ConvertFromDeviceZ(TexL);

  42: mul r7.xy, r5.xyxx, r7.zzzz                                       float3 SamplePositionL = ReconstructCSPos(AbsL, ScreenSpacePosL);
  43: add r5.xyz, -r3.xyzx, r7.xyzx                                     (SamplePositionL - ViewSpacePosition)

  44: div r2.y, l(1.0000, 1.0000, 1.0000, 1.0000), cb1[11].w
  45: mov r2.z, l(1.0000)
  46: mul r5.xyz, r2.xyzx, r5.xyzx                    float3 DeltaL = (SamplePositionL - ViewSpacePosition) * InvFovFix;  ->  (for step 0)

  47: dp3 r1.w, r5.xyzx, r5.xyzx                                        dot(DeltaL, DeltaL)
  48: dp3 r2.w, r5.xyzx, r1.xyzx                                        dot(DeltaL, ScaledViewSpaceNormal)
  49: div_sat r5.x, r2.w, r1.w                        float InvNormAngleL = saturate(dot(...) / dot(DeltaL, DeltaL)) -> (for step 0)

  50: mad r5.zw, -r4.xxxy, l(0.0000, 0.0000, 0.5000, 0.5000), r4.zzzw   float2 ScreenSpacePosR = ScreenSpacePosCenter - InLocalRandom;
  51: mad r7.xy, r5.zwzz, l(0.5000, 0.5000, 0.0000, 0.0000), l(0.5000, 0.5000, 0.0000, 0.0000)  ScreenPositionToUV(ScreenSpacePosR)
  52: sample_l r7.xyzw, r7.xyxx, t0.xyzw, s0, r6.z
  53: mad r1.w, cb0[23].z, r7.x, cb0[23].w
  54: div r7.z, l(1.0000, 1.0000, 1.0000, 1.0000), r1.w
  55: mul r7.xy, r5.zwzz, r7.zzzz
  56: add r7.xyz, -r3.xyzx, r7.xyzx
  57: mul r7.xyz, r2.xyzx, r7.xyzx
  58: dp3 r1.w, r7.xyzx, r7.xyzx
  59: dp3 r2.w, r7.xyzx, r1.xyzx
  60: div_sat r5.y, r2.w, r1.w                        float InvNormAngleR for step 0 sampleid 1

  61: add r5.zw, r4.xxxy, r4.zzzw                     float2 ScreenSpacePosL for step 1
  62: add r4.xy, -r4.xyxx, r4.zwzz                    float2 ScreenSpacePosR for step 1

  63: mad r7.xy, r5.zwzz, l(0.5000, 0.5000, 0.0000, 0.0000), l(0.5000, 0.5000, 0.0000, 0.0000)  Left step 1
  64: sample_l r7.xyzw, r7.xyxx, t0.xyzw, s0, r6.w
  65: mad r1.w, cb0[23].z, r7.x, cb0[23].w
  66: div r7.z, l(1.0000, 1.0000, 1.0000, 1.0000), r1.w
  67: mul r7.xy, r5.zwzz, r7.zzzz
  68: add r7.xyz, -r3.xyzx, r7.xyzx
  69: mul r7.xyz, r2.xyzx, r7.xyzx
  70: dp3 r1.w, r7.xyzx, r7.xyzx
  71: dp3 r2.w, r7.xyzx, r1.xyzx
  72: div_sat r7.x, r2.w, r1.w                        float InvNormAngleL

  73: mad r5.zw, r4.xxxy, l(0.0000, 0.0000, 0.5000, 0.5000), l(0.0000, 0.0000, 0.5000, 0.5000)  Right step 1
  74: sample_l r8.xyzw, r5.zwzz, t0.xyzw, s0, r6.w
  75: mad r1.w, cb0[23].z, r8.x, cb0[23].w
  76: div r8.z, l(1.0000, 1.0000, 1.0000, 1.0000), r1.w
  77: mul r8.xy, r4.xyxx, r8.zzzz
  78: add r8.xyz, -r3.xyzx, r8.xyzx
  79: mul r8.xyz, r2.xyzx, r8.xyzx
  80: dp3 r1.w, r8.xyzx, r8.xyzx
  81: dp3 r2.w, r8.xyzx, r1.xyzx
  82: div_sat r7.y, r2.w, r1.w                        float InvNormAngleR

  83: max r4.xy, r5.xyxx, r7.xyxx                     LocalAccumulator = max(LocalAccumulator.xy, StepSample.xy) 

  84: add r4.xy, -r4.xyxx, l(1.0000, 1.0000, 0.0000, 0.0000)      1 - LocalAccumulator.xy for step 0 and 1 in sampleid 1

sampleid = 0
  85: mad r5.xyzw, r0.zwzw, l(0.1000, 0.1000, 0.2000, 0.2000), r4.zwzw
                                          ScreenSpacePosCenter.xyxy + RandomBase.zwzw * OcclusionSamplesOffsets[0].yyyy * (0.5,0.5,1,1)
                                          0.1000 = 0.5 * 0.2000 -> 由于OcclusionSamplesOffsets[0].x == 0, 这里直接屏蔽了RandomBase.xy

  86: mad r7.xyzw, r5.xyzw, l(0.5000, 0.5000, 0.5000, 0.5000), l(0.5000, 0.5000, 0.5000, 0.5000)  xy:step0 and zw:step 1
  87: sample_l r8.xyzw, r7.xyxx, t0.xyzw, s0, r6.x
  88: sample_l r7.xyzw, r7.zwzz, t0.xyzw, s0, r6.y
  89: mad r1.w, cb0[23].z, r7.x, cb0[23].w
  90: div r7.z, l(1.0000, 1.0000, 1.0000, 1.0000), r1.w      float AbsL = ConvertFromDeviceZ(TexL);  for step 1 sampleid 0
  91: mad r1.w, cb0[23].z, r8.x, cb0[23].w
  92: div r8.z, l(1.0000, 1.0000, 1.0000, 1.0000), r1.w      float AbsL = ConvertFromDeviceZ(TexL);  for step 0 sampleid 0

  93: mul r8.xy, r5.xyxx, r8.zzzz
  94: add r8.xyz, -r3.xyzx, r8.xyzx
  95: mul r8.xyz, r2.xyzx, r8.xyzx                           float3 DeltaL = (SamplePositionL - ViewSpacePosition) * InvFovFix;

  96: mul r7.xy, r5.zwzz, r7.zzzz
  97: add r5.xyz, -r3.xyzx, r7.xyzx
  98: mul r5.xyz, r2.xyzx, r5.xyzx

  99: dp3 r1.w, r8.xyzx, r8.xyzx
 100: dp3 r2.w, r8.xyzx, r1.xyzx
 101: div_sat r7.x, r2.w, r1.w                              float InvNormAngleL for step 0

 102: mad r8.xyzw, -r0.zwzw, l(0.1000, 0.1000, 0.2000, 0.2000), r4.zwzw       xy:step0 and zw:step 1
 103: mad r9.xyzw, r8.xyzw, l(0.5000, 0.5000, 0.5000, 0.5000), l(0.5000, 0.5000, 0.5000, 0.5000)
 104: sample_l r10.xyzw, r9.xyxx, t0.xyzw, s0, r6.x
 105: sample_l r6.xyzw, r9.zwzz, t0.xyzw, s0, r6.y
 106: mad r1.w, cb0[23].z, r6.x, cb0[23].w
 107: div r6.z, l(1.0000, 1.0000, 1.0000, 1.0000), r1.w           float AbsR = ConvertFromDeviceZ(TexR) for step 1
 108: mad r1.w, cb0[23].z, r10.x, cb0[23].w
 109: div r9.z, l(1.0000, 1.0000, 1.0000, 1.0000), r1.w           float AbsR = ConvertFromDeviceZ(TexR) for step 0

 110: mul r9.xy, r8.xyxx, r9.zzzz
 111: add r9.xyz, -r3.xyzx, r9.xyzx
 112: mul r9.xyz, r2.xyzx, r9.xyzx                          float3 DeltaR for step 0

 113: mul r6.xy, r6.zzzz, r8.zwzz
 114: add r6.xyz, -r3.xyzx, r6.xyzx
 115: mul r6.xyz, r2.xyzx, r6.xyzx                          float3 DeltaR for step 1

 116: dp3 r1.w, r9.xyzx, r9.xyzx
 117: dp3 r2.w, r9.xyzx, r1.xyzx
 118: div_sat r7.y, r2.w, r1.w                              float InvNormAngleR for step 0

 119: dp3 r1.w, r5.xyzx, r5.xyzx
 120: dp3 r2.w, r5.xyzx, r1.xyzx
 121: div_sat r5.x, r2.w, r1.w                              float InvNormAngleL for step 1

 122: dp3 r1.w, r6.xyzx, r6.xyzx
 123: dp3 r2.w, r6.xyzx, r1.xyzx
 124: div_sat r5.y, r2.w, r1.w                              float InvNormAngleR for step 1

 125: max r5.xy, r5.xyxx, r7.xyxx                           max(LocalAccumulator.xy, StepSample.xy)  for step 0 and 1 in sampleid 0

 126: add r5.xy, -r5.xyxx, l(1.0000, 1.0000, 0.0000, 0.0000)      1 - LocalAccumulator.xy
 127: mad r1.w, r5.x, r5.x, l(0.0001)
 128: mad r1.w, r5.y, r5.y, r1.w
 129: mad r1.w, r4.x, r4.x, r1.w
 130: mad r1.w, r4.y, r4.y, r1.w                            WeightAccumulator += ... for sampleid 0 and 1

sampleid = 2
 131: mul r5.xyzw, r0.xyzw, l(0.2720, 0.2720, -0.3960, -0.3960)
 132: add r4.xy, r5.zwzz, r5.xyxx                           float2 LocalRandom for sampleid 2

 133: mad r5.xy, r4.xyxx, l(0.5000, 0.5000, 0.0000, 0.0000), r4.zwzz    Scale = 0.5 -> step = 0
                                                                        float2 ScreenSpacePosL = ScreenSpacePosCenter + InLocalRandom;

 134: mad r5.zw, r5.xxxy, l(0.0000, 0.0000, 0.5000, 0.5000), l(0.0000, 0.0000, 0.5000, 0.5000)  ScreenPositionToUV(ScreenSpacePosL)

 135: mul r6.xyzw, cb1[12].zzzz, l(0.2083, 0.4167, 0.2917, 0.5833)
 136: log r6.xyzw, r6.xyzw                                              MipLevel

 137: sample_l r7.xyzw, r5.zwzz, t0.xyzw, s0, r6.x
 138: mad r2.w, cb0[23].z, r7.x, cb0[23].w
 139: div r7.z, l(1.0000, 1.0000, 1.0000, 1.0000), r2.w                 AbsL
 140: mul r7.xy, r5.xyxx, r7.zzzz
 141: add r5.xyz, -r3.xyzx, r7.xyzx
 142: mul r5.xyz, r2.xyzx, r5.xyzx
 143: dp3 r2.w, r5.xyzx, r5.xyzx
 144: dp3 r3.w, r5.xyzx, r1.xyzx
 145: div_sat r5.x, r3.w, r2.w                              float InvNormAngleL for step 0 sampleid 2

 146: mad r5.zw, -r4.xxxy, l(0.0000, 0.0000, 0.5000, 0.5000), r4.zzzw         float2 ScreenSpacePosR
 147: mad r7.xy, r5.zwzz, l(0.5000, 0.5000, 0.0000, 0.0000), l(0.5000, 0.5000, 0.0000, 0.0000)
 148: sample_l r7.xyzw, r7.xyxx, t0.xyzw, s0, r6.x
 149: mad r2.w, cb0[23].z, r7.x, cb0[23].w
 150: div r7.z, l(1.0000, 1.0000, 1.0000, 1.0000), r2.w                 AbsR
 151: mul r7.xy, r5.zwzz, r7.zzzz
 152: add r7.xyz, -r3.xyzx, r7.xyzx
 153: mul r7.xyz, r2.xyzx, r7.xyzx
 154: dp3 r2.w, r7.xyzx, r7.xyzx
 155: dp3 r3.w, r7.xyzx, r1.xyzx
 156: div_sat r5.y, r3.w, r2.w                              float InvNormAngleR for step 0 sampleid 2

 157: add r5.zw, r4.xxxy, r4.zzzw                           Left for step 1
 158: add r4.xy, -r4.xyxx, r4.zwzz                          Right for step 1

 159: mad r7.xy, r5.zwzz, l(0.5000, 0.5000, 0.0000, 0.0000), l(0.5000, 0.5000, 0.0000, 0.0000)  ScreenPositionToUV(ScreenSpacePosL)
 160: sample_l r7.xyzw, r7.xyxx, t0.xyzw, s0, r6.y
 161: mad r2.w, cb0[23].z, r7.x, cb0[23].w
 162: div r7.z, l(1.0000, 1.0000, 1.0000, 1.0000), r2.w     AbsL for step 1
 163: mul r7.xy, r5.zwzz, r7.zzzz
 164: add r7.xyz, -r3.xyzx, r7.xyzx
 165: mul r7.xyz, r2.xyzx, r7.xyzx
 166: dp3 r2.w, r7.xyzx, r7.xyzx
 167: dp3 r3.w, r7.xyzx, r1.xyzx
 168: div_sat r7.x, r3.w, r2.w                              float InvNormAngleL for step 1 sampleid 2

 169: mad r5.zw, r4.xxxy, l(0.0000, 0.0000, 0.5000, 0.5000), l(0.0000, 0.0000, 0.5000, 0.5000)  ScreenPositionToUV(ScreenSpacePosR)
 170: sample_l r8.xyzw, r5.zwzz, t0.xyzw, s0, r6.y
 171: mad r2.w, cb0[23].z, r8.x, cb0[23].w
 172: div r8.z, l(1.0000, 1.0000, 1.0000, 1.0000), r2.w     AbsR for step 1
 173: mul r8.xy, r4.xyxx, r8.zzzz
 174: add r8.xyz, -r3.xyzx, r8.xyzx
 175: mul r8.xyz, r2.xyzx, r8.xyzx
 176: dp3 r2.w, r8.xyzx, r8.xyzx
 177: dp3 r3.w, r8.xyzx, r1.xyzx
 178: div_sat r7.y, r3.w, r2.w                              float InvNormAngleR for step 1 sampleid 2

 179: max r4.xy, r5.xyxx, r7.xyxx                           max(LocalAccumulator.xy, StepSample.xy)

 180: add r4.xy, -r4.xyxx, l(1.0000, 1.0000, 0.0000, 0.0000)      1 - LocalAccumulator.xy
 181: mad r1.w, r4.x, r4.x, r1.w
 182: mad r1.w, r4.y, r4.y, r1.w                            WeightAccumulator += ... up to sampleid 2

sampleid = 3
 183: mul r5.xyzw, r0.xyzw, l(-0.3850, -0.3850, -0.4880, -0.4880)
 184: add r4.xy, r5.zwzz, r5.xyxx
 185: mad r5.xy, r4.xyxx, l(0.5000, 0.5000, 0.0000, 0.0000), r4.zwzz          ScreenSpacePosL for step 0      
 186: mad r5.zw, r5.xxxy, l(0.0000, 0.0000, 0.5000, 0.5000), l(0.0000, 0.0000, 0.5000, 0.5000)
 187: sample_l r7.xyzw, r5.zwzz, t0.xyzw, s0, r6.z
 188: mad r2.w, cb0[23].z, r7.x, cb0[23].w
 189: div r7.z, l(1.0000, 1.0000, 1.0000, 1.0000), r2.w      AbsL step 0
 190: mul r7.xy, r5.xyxx, r7.zzzz
 191: add r5.xyz, -r3.xyzx, r7.xyzx
 192: mul r5.xyz, r2.xyzx, r5.xyzx
 193: dp3 r2.w, r5.xyzx, r5.xyzx
 194: dp3 r3.w, r5.xyzx, r1.xyzx
 195: div_sat r5.x, r3.w, r2.w                               InvNormAngleL step 0

 196: mad r5.zw, -r4.xxxy, l(0.0000, 0.0000, 0.5000, 0.5000), r4.zzzw         ScreenSpacePosR
 197: mad r6.xy, r5.zwzz, l(0.5000, 0.5000, 0.0000, 0.0000), l(0.5000, 0.5000, 0.0000, 0.0000)
 198: sample_l r7.xyzw, r6.xyxx, t0.xyzw, s0, r6.z
 199: mad r2.w, cb0[23].z, r7.x, cb0[23].w
 200: div r6.z, l(1.0000, 1.0000, 1.0000, 1.0000), r2.w     AbsR step 0
 201: mul r6.xy, r5.zwzz, r6.zzzz
 202: add r6.xyz, -r3.xyzx, r6.xyzx
 203: mul r6.xyz, r2.xyzx, r6.xyzx
 204: dp3 r2.w, r6.xyzx, r6.xyzx
 205: dp3 r3.w, r6.xyzx, r1.xyzx
 206: div_sat r5.y, r3.w, r2.w                              InvNormAngleR step 0

 207: add r5.zw, r4.xxxy, r4.zzzw                           ScreenSpacePosL   step 1
 208: add r4.xy, -r4.xyxx, r4.zwzz                          ScreenSpacePosR   step 1
 209: mad r6.xy, r5.zwzz, l(0.5000, 0.5000, 0.0000, 0.0000), l(0.5000, 0.5000, 0.0000, 0.0000)
 210: sample_l r7.xyzw, r6.xyxx, t0.xyzw, s0, r6.w
 211: mad r2.w, cb0[23].z, r7.x, cb0[23].w
 212: div r6.z, l(1.0000, 1.0000, 1.0000, 1.0000), r2.w     AbsL step 1
 213: mul r6.xy, r5.zwzz, r6.zzzz
 214: add r6.xyz, -r3.xyzx, r6.xyzx
 215: mul r6.xyz, r2.xyzx, r6.xyzx
 216: dp3 r2.w, r6.xyzx, r6.xyzx
 217: dp3 r3.w, r6.xyzx, r1.xyzx
 218: div_sat r6.x, r3.w, r2.w                              InvNormAngleL step 1

 219: mad r5.zw, r4.xxxy, l(0.0000, 0.0000, 0.5000, 0.5000), l(0.0000, 0.0000, 0.5000, 0.5000)
 220: sample_l r7.xyzw, r5.zwzz, t0.xyzw, s0, r6.w
 221: mad r2.w, cb0[23].z, r7.x, cb0[23].w
 222: div r7.z, l(1.0000, 1.0000, 1.0000, 1.0000), r2.w     AbsR step 1
 223: mul r7.xy, r4.xyxx, r7.zzzz
 224: add r7.xyz, -r3.xyzx, r7.xyzx
 225: mul r7.xyz, r2.xyzx, r7.xyzx
 226: dp3 r2.w, r7.xyzx, r7.xyzx
 227: dp3 r3.w, r7.xyzx, r1.xyzx
 228: div_sat r6.y, r3.w, r2.w                              InvNormAngleR step 1

 229: max r4.xy, r5.xyxx, r6.xyxx                           max(LocalAccumulator.xy, StepSample.xy)
 230: add r4.xy, -r4.xyxx, l(1.0000, 1.0000, 0.0000, 0.0000)      1 - LocalAccumulator.xy
 231: mad r1.w, r4.x, r4.x, r1.w
 232: mad r1.w, r4.y, r4.y, r1.w                            WeightAccumulator += ... up to sampleid 3

sampleid = 4
 233: mul r5.xyzw, r0.xyzw, l(-0.7110, -0.7110, 0.2740, 0.2740)
sampleid = 5
 234: mul r0.xyzw, r0.xyzw, l(0.0600, 0.0600, 0.9000, 0.9000)

 235: add r0.xy, r0.zwzz, r0.xyxx                           LocalRandom for sampleid 5
 236: add r0.zw, r5.zzzw, r5.xxxy                           LocalRandom for sampleid 4

 237: mad r4.xy, r0.zwzz, l(0.5000, 0.5000, 0.0000, 0.0000), r4.zwzz                            ScreenSpacePosL for step 0 in sampleid 4
 238: mad r5.xy, r4.xyxx, l(0.5000, 0.5000, 0.0000, 0.0000), l(0.5000, 0.5000, 0.0000, 0.0000)  UV

 239: mul r6.xyzw, cb1[12].zzzz, l(0.3750, 0.7500, 0.4583, 0.9167)
 240: log r6.xyzw, r6.xyzw                                  MipLevel

 241: sample_l r5.xyzw, r5.xyxx, t0.xyzw, s0, r6.x
 242: mad r2.w, cb0[23].z, r5.x, cb0[23].w
 243: div r5.z, l(1.0000, 1.0000, 1.0000, 1.0000), r2.w     AbsL for step 0 in sampleid 4
 244: mul r5.xy, r4.xyxx, r5.zzzz
 245: add r5.xyz, -r3.xyzx, r5.xyzx
 246: mul r5.xyz, r2.xyzx, r5.xyzx
 247: dp3 r2.w, r5.xyzx, r5.xyzx
 248: dp3 r3.w, r5.xyzx, r1.xyzx
 249: div_sat r4.x, r3.w, r2.w                              InvNormAngleL step 0 in sampleid 4

 250: mad r5.xy, -r0.zwzz, l(0.5000, 0.5000, 0.0000, 0.0000), r4.zwzz                           ScreenSpacePosR for step 0 in sampleid 4
 251: mad r5.zw, r5.xxxy, l(0.0000, 0.0000, 0.5000, 0.5000), l(0.0000, 0.0000, 0.5000, 0.5000)
 252: sample_l r7.xyzw, r5.zwzz, t0.xyzw, s0, r6.x
 253: mad r2.w, cb0[23].z, r7.x, cb0[23].w
 254: div r7.z, l(1.0000, 1.0000, 1.0000, 1.0000), r2.w     AbsR for step 0 in sampleid 4
 255: mul r7.xy, r5.xyxx, r7.zzzz
 256: add r5.xyz, -r3.xyzx, r7.xyzx
 257: mul r5.xyz, r2.xyzx, r5.xyzx
 258: dp3 r2.w, r5.xyzx, r5.xyzx
 259: dp3 r3.w, r5.xyzx, r1.xyzx
 260: div_sat r4.y, r3.w, r2.w                              InvNormAngleR step 0 in sampleid 4

 261: add r5.xy, r0.zwzz, r4.zwzz                           ScreenSpacePosL for step 1 in sampleid 4
 262: add r0.zw, -r0.zzzw, r4.zzzw                          ScreenSpacePosR for step 1 in sampleid 4

 263: mad r5.zw, r5.xxxy, l(0.0000, 0.0000, 0.5000, 0.5000), l(0.0000, 0.0000, 0.5000, 0.5000)
 264: sample_l r7.xyzw, r5.zwzz, t0.xyzw, s0, r6.y
 265: mad r2.w, cb0[23].z, r7.x, cb0[23].w
 266: div r7.z, l(1.0000, 1.0000, 1.0000, 1.0000), r2.w     AbsL step 1
 267: mul r7.xy, r5.xyxx, r7.zzzz
 268: add r5.xyz, -r3.xyzx, r7.xyzx
 269: mul r5.xyz, r2.xyzx, r5.xyzx
 270: dp3 r2.w, r5.xyzx, r5.xyzx
 271: dp3 r3.w, r5.xyzx, r1.xyzx
 272: div_sat r5.x, r3.w, r2.w                              InvNormAngleL step 1

 273: mad r5.zw, r0.zzzw, l(0.0000, 0.0000, 0.5000, 0.5000), l(0.0000, 0.0000, 0.5000, 0.5000)
 274: sample_l r7.xyzw, r5.zwzz, t0.xyzw, s0, r6.y
 275: mad r2.w, cb0[23].z, r7.x, cb0[23].w
 276: div r7.z, l(1.0000, 1.0000, 1.0000, 1.0000), r2.w     AbsR step 1
 277: mul r7.xy, r0.zwzz, r7.zzzz
 278: add r7.xyz, -r3.xyzx, r7.xyzx
 279: mul r7.xyz, r2.xyzx, r7.xyzx
 280: dp3 r0.z, r7.xyzx, r7.xyzx
 281: dp3 r0.w, r7.xyzx, r1.xyzx
 282: div_sat r5.y, r0.w, r0.z                              InvNormAngleR step 1

 283: max r0.zw, r4.xxxy, r5.xxxy                           max(LocalAccumulator.xy, StepSample.xy)

 284: add r0.zw, -r0.zzzw, l(0.0000, 0.0000, 1.0000, 1.0000)      1 - LocalAccumulator.xy
 285: mad r0.z, r0.z, r0.z, r1.w
 286: mad r0.z, r0.w, r0.w, r0.z                            WeightAccumulator += ... up to sampleid 4

sampleid = 5
 287: mad r4.xy, r0.xyxx, l(0.5000, 0.5000, 0.0000, 0.0000), r4.zwzz          ScreenSpacePosL for step 0 in sampleid 5
 288: mad r5.xy, r4.xyxx, l(0.5000, 0.5000, 0.0000, 0.0000), l(0.5000, 0.5000, 0.0000, 0.0000)
 289: sample_l r5.xyzw, r5.xyxx, t0.xyzw, s0, r6.z
 290: mad r0.w, cb0[23].z, r5.x, cb0[23].w
 291: div r5.z, l(1.0000, 1.0000, 1.0000, 1.0000), r0.w     AbsL step 0
 292: mul r5.xy, r4.xyxx, r5.zzzz
 293: add r5.xyz, -r3.xyzx, r5.xyzx
 294: mul r5.xyz, r2.xyzx, r5.xyzx
 295: dp3 r0.w, r5.xyzx, r5.xyzx
 296: dp3 r1.w, r5.xyzx, r1.xyzx
 297: div_sat r4.x, r1.w, r0.w                              InvNormAngleL step 0

 298: mad r5.xy, -r0.xyxx, l(0.5000, 0.5000, 0.0000, 0.0000), r4.zwzz         ScreenSpacePosR for step 0 in sampleid 5
 299: mad r5.zw, r5.xxxy, l(0.0000, 0.0000, 0.5000, 0.5000), l(0.0000, 0.0000, 0.5000, 0.5000)
 300: sample_l r7.xyzw, r5.zwzz, t0.xyzw, s0, r6.z
 301: mad r0.w, cb0[23].z, r7.x, cb0[23].w
 302: div r6.z, l(1.0000, 1.0000, 1.0000, 1.0000), r0.w     AbsR step 0
 303: mul r6.xy, r5.xyxx, r6.zzzz
 304: add r5.xyz, -r3.xyzx, r6.xyzx
 305: mul r5.xyz, r2.xyzx, r5.xyzx
 306: dp3 r0.w, r5.xyzx, r5.xyzx
 307: dp3 r1.w, r5.xyzx, r1.xyzx
 308: div_sat r4.y, r1.w, r0.w                              InvNormAngleR step 0

 309: add r5.xy, r0.xyxx, r4.zwzz                           ScreenSpacePosL for step 1
 310: add r0.xy, -r0.xyxx, r4.zwzz                          ScreenSpacePosR for step 1
 311: mad r4.zw, r5.xxxy, l(0.0000, 0.0000, 0.5000, 0.5000), l(0.0000, 0.0000, 0.5000, 0.5000)
 312: sample_l r7.xyzw, r4.zwzz, t0.xyzw, s0, r6.w
 313: mad r0.w, cb0[23].z, r7.x, cb0[23].w
 314: div r6.z, l(1.0000, 1.0000, 1.0000, 1.0000), r0.w     AbsL step 1
 315: mul r6.xy, r5.xyxx, r6.zzzz
 316: add r5.xyz, -r3.xyzx, r6.xyzx
 317: mul r5.xyz, r2.xyzx, r5.xyzx
 318: dp3 r0.w, r5.xyzx, r1.xyzx
 319: dp3 r1.w, r5.xyzx, r5.xyzx
 320: div_sat r5.x, r0.w, r1.w                              InvNormAngleL step 1

 321: mad r4.zw, r0.xxxy, l(0.0000, 0.0000, 0.5000, 0.5000), l(0.0000, 0.0000, 0.5000, 0.5000)
 322: sample_l r6.xyzw, r4.zwzz, t0.xyzw, s0, r6.w
 323: mad r0.w, cb0[23].z, r6.x, cb0[23].w
 324: div r6.z, l(1.0000, 1.0000, 1.0000, 1.0000), r0.w     AbsR step 1
 325: mul r6.xy, r0.xyxx, r6.zzzz
 326: add r0.xyw, -r3.xyxz, r6.xyxz
 327: mul r0.xyw, r2.xyxz, r0.xyxw
 328: dp3 r1.x, r0.xywx, r1.xyzx
 329: dp3 r0.x, r0.xywx, r0.xywx
 330: div_sat r5.y, r1.x, r0.x                              InvNormAngleR step 1

 331: max r0.xy, r4.xyxx, r5.xyxx                           max 
 332: add r0.xy, -r0.xyxx, l(1.0000, 1.0000, 0.0000, 0.0000)
 333: mad r0.x, r0.x, r0.x, r0.z
 334: mad r0.x, r0.y, r0.y, r0.x                            WeightAccumulator += ... up to sampleid 5

 335: mul o0.x, r0.x, l(0.0833)                             WeightAccumulator /= 12
 336: mov o0.yzw, l(0, 0, 0, 0)
 337: ret
