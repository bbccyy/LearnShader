ReflectionEnvironmentSkyLighting in UE4.25 

Shader hash aaf2c2ab-ed877ec0-380d2878-c5689711

ps_5_0
      dcl_globalFlags refactoringAllowed
      dcl_constantbuffer cb0[10], immediateIndexed
      dcl_constantbuffer cb1[201], immediateIndexed
      dcl_constantbuffer cb2[1], immediateIndexed
      dcl_constantbuffer cb3[4], immediateIndexed
      dcl_constantbuffer cb4[1023], dynamicIndexed

      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_sampler s2, mode_default
      dcl_sampler s3, mode_default
      dcl_sampler s4, mode_default
      dcl_sampler s5, mode_default
      dcl_sampler s6, mode_default
      dcl_sampler s7, mode_default

      dcl_resource_texturecube (float,float,float,float) t0                   -> 天空 
      dcl_resource_texturecube (float,float,float,float) t1                   -> cubemap 几乎全黑 
      dcl_resource_texturecubearray (float,float,float,float) t2              -> IBL cubemap，有 57 张 
      dcl_resource_buffer (uint,uint,uint,uint) t3                            -> No use 
      dcl_resource_buffer (uint,uint,uint,uint) t4                            -> No use 
      dcl_resource_texture2d (float,float,float,float) t5                     -> BRDF LUT 
      dcl_resource_texture2d (float,float,float,float) t6                     -> [NormalWS.xyz, DepthWS] 看起来像被模糊过，且分辨率减半 
      dcl_resource_texture2d (float,float,float,float) t7                     -> Depth01 (R通道) 
      dcl_resource_texture2d (float,float,float,float) t8                     -> Normal Normal[R10G10B10] Mask?[A2] 
      dcl_resource_texture2d (float,float,float,float) t9                     -> Comp Metallic[R8] DieletricSpec[G8] Rough[B8] Flag[A8] 
      dcl_resource_texture2d (float,float,float,float) t10                    -> Albedo BaseCol[R8G8B8] AO[A8] 
      dcl_resource_texture2d (float,float,float,float) t11                    -> Comp Extra_Albedo[R8G8B8] Spec_Intensity[A8] 
                                                                                    [Note1] 对植被 -> SubsurfaceColor[R8G8B8] 
                                                                                    [Note2] 对头发 -> FresnelPow[R8] Rough[B8] ?? 
                                                                                    [Note3] 对皮肤 -> SubsurfaceProfile[R8] 
      dcl_resource_texture2d (float,float,float,float) t12                    -> 似乎是自发光或高光相关的值 -> 4通道 
      dcl_resource_texture2d (float,float,float,float) t13                    -> SSAO (R通道) 

      dcl_input_ps_siv linear noperspective v0.xyw, position                  -> VertexInputPS 
      dcl_output o0.xyzw
      dcl_temps 20

   0: mul r0.xy, v0.xyxx, cb1[131].zwzz                                       -> float2 BufferUV = SvPositionToBufferUV(SvPosition);

   1: add r0.zw, v0.xxxy, -cb1[129].xxxy                                      -> float2 PixelPos = SvPosition.xy - View.ViewRectMin.xy;   
   2: mad r1.xy, r0.zwzz, cb1[130].zwzz, l(-0.5000, -0.5000, 0.0000, 0.0000)
   3: mul r1.xy, r1.xyxx, v0.wwww
   4: mul r1.xy, r1.xyxx, l(2.0000, -2.0000, 0.0000, 0.0000)                  -> float4 SvPositionToScreenPosition(float4 SvPosition)

------------Func:DecodeGBufferData() Start------------
   5: sample_l(texture2d)(float,float,float,float) r2.xyz, r0.xyxx, t8.xyzw, s0, l(0)     -> Normal
   6: sample_l(texture2d)(float,float,float,float) r3.xyzw, r0.xyxx, t9.xywz, s0, l(0)    -> Comp_M_D_R_F -> 注意输出通道顺序为 xywz 
   7: sample_l(texture2d)(float,float,float,float) r4.xyzw, r0.xyxx, t10.xyzw, s0, l(0)   -> Albedo
   8: sample_l(texture2d)(float,float,float,float) r5.xyzw, r0.xyxx, t11.xyzw, s0, l(0)   -> Comp_F_R_X_I -> CustomData 
   9: sample_l(texture2d)(float,float,float,float) r1.z, r0.xyxx, t7.yzxw, s0, l(0)       -> Depth

  10: mad r1.w, r1.z, cb1[65].x, cb1[65].y
  11: mad r1.z, r1.z, cb1[65].z, -cb1[65].w
  12: div r1.z, l(1.0000, 1.0000, 1.0000, 1.0000), r1.z
  13: add r1.z, r1.z, r1.w                                        -> float SceneDepth = ConvertFromDeviceZ(DeviceZ);

  14: mul r6.xy, r0.xyxx, cb1[131].xyxx
  15: ftou r6.xy, r6.xyxx                                         -> uint2 PixelPos = uint2(UVSceneColor * View.BufferSizeAndInvSize.xy);

  16: ftou r1.w, cb1[151].x                                       -> uint TemporalAASampleIndex = View.TemporalAAParams.x;
  17: iadd r2.w, r6.y, r6.x
  18: iadd r1.w, r1.w, r2.w
  19: and r1.w, r1.w, l(1)                                        -> return (PixelPos.x + PixelPos.y + TemporalAASampleIndex) % 2;
                                                                  -> CheckerFromSceneColorUV(UV)

  20: mad r2.xyz, r2.xyzx, l(2, 2, 2, 0), l(-1, -1, -1, 0)
  21: dp3 r2.w, r2.xyzx, r2.xyzx
  22: rsq r2.w, r2.w
  23: mul r6.xyz, r2.wwww, r2.xyzx                                -> GBuffer.WorldNormal = normalize(DecodeNormal( InGBufferA.xyz )); 

  24: mul r7.xy, r3.zyzz, l(255.0000, 0.0800, 0, 0)
  25: round_ne r6.w, r7.x
  26: ftou r6.w, r6.w
  27: and r7.xz, r6.wwww, l(15, 0, 16, 0)                         -> GBuffer.ShadingModelID = DecodeShadingModelId(InGBufferB.a);               -> r7.x
                                                                  -> GBuffer.SelectiveOutputMask = DecodeSelectiveOutputMask(InGBufferB.a);     -> r7.z

  28: movc r5.xyzw, r7.zzzz, l(0, 0, 0, 0), r5.xyzw               -> GBuffer.CustomData = !(GBuffer.SelectiveOutputMask & SKIP_CUSTOMDATA_MASK) ? InGBufferD : 0; 
  29: ieq r8.xyz, r7.xxxx, l(9, 5, 4, 0)                          -> Eye=9, Skin=5, ClearCoat=4

  30: movc r6.w, r8.x, l(0), r3.x                                 -> if(GBuffer.ShadingModelID == SHADINGMODELID_EYE) GBuffer.Metallic=0; else GBuffer.Metallic=Comp_M_D_R_F.x; 

  31: mad r9.xyz, -r3.yyyy, l(0.08, 0.08, 0.08, 0), r4.xyzx 
  32: mad r9.xyz, r6.wwww, r9.xyzx, r7.yyyy                       -> return lerp(DielectricSpecularToF0(Specular).xxx, BaseColor, Metallic.xxx);
                                                                  -> GBuffer.SpecularColor = ComputeF0(GBuffer.Specular, GBuffer.BaseColor, GBuffer.Metallic);

  33: or r7.y, r8.x, r8.y                                         -> UseSubsurfaceProfile(GBuffer.ShadingModelID) -> Skin or Eye 
  34: lt r7.z, l(0), cb1[155].x                                   -> View.bSubsurfacePostprocessEnabled=1 > 0                 -> true
  35: lt r7.w, l(0), cb1[200].z                                   -> View.bCheckerboardSubsurfaceProfileRendering=1 > 0       -> true
  36: and r7.z, r7.w, r7.z                                        -> const bool bCheckerboardRequired = both (~) 

  37: ne r7.w, l(0, 0, 0, 0), cb1[155].x
  38: movc r8.xyw, r7.wwww, l(1.0000, 1.0000, 0, 1), r4.xyxz      -> BaseColor = View.bSubsurfacePostprocessEnabled ? float3(1, 1, 1) : BaseColor;

  39: movc r10.xy, r1.wwww, l(1, 0, 0, 0), l(0, 1, 0, 0)          -> r10.x=bChecker;  r10.y=!bChecker; 
  40: mul r11.xyz, r9.xyzx, r10.yyyy                              -> SpecularColor *= !bChecker;
  41: mul r11.w, r3.y, r10.y                                      -> Specular *= !bChecker

  42: movc r10.xyz, r7.zzzz, r10.xxxx, r8.xywx                    -> if (bCheckerboardRequired) set GBuffer.BaseColor

  43: mov r9.w, r3.y                                              -> SpecularColor.w = Specular

  44: movc r11.xyzw, r7.zzzz, r11.xyzw, r9.xyzw                   -> if (bCheckerboardRequired) set SpecularColor+Specular

  45: mov r10.w, r11.w                                            -> BaseColor.w = Specular
                                                                  -> AdjustBaseColorAndSpecularColorForSubsurfaceProfileLighting(...) Done 
  46: mov r12.xyz, r4.xyzx
  47: mov r12.w, r9.w                                             -> r12 = Old_BaseColor + Specular

  48: movc r10.xyzw, r7.yyyy, r10.xyzw, r12.xyzw                  -> if (UseSubsurfaceProfile(GBuffer.ShadingModelID)) set BaseColor_New else set BaseColor 
------------Func:DecodeGBufferData() Partially End------------


------------Func:RemapClearCoatDiffuseAndSpecularColor() Start------------
  49: mul r4.xy, r1.zzzz, r1.xyxx                                 -> SceneDepth * ScreenPosition 
  50: mul r8.xyw, r4.yyyy, cb1[49].xyxz
  51: mad r4.xyz, r4.xxxx, cb1[48].xyzx, r8.xywx
  52: mad r4.xyz, r1.zzzz, cb1[50].xyzx, r4.xyzx
  53: add r4.xyz, r4.xyzx, cb1[51].xyzx                           -> float3 WorldPosition = mul(
                                                                        float4(ScreenPosition * GBuffer.Depth, GBuffer.Depth, 1), 
                                                                        View.ScreenToWorld
                                                                        ).xyz;

  54: add r8.xyw, r4.xyxz, -cb1[67].xyxz
  55: dp3 r1.w, r8.xywx, r8.xywx
  56: rsq r1.w, r1.w
  57: mul r8.xyw, r1.wwww, r8.xyxw                                -> float3 CameraToPixel = normalize(WorldPosition - View.WorldCameraOrigin);

  58: dp3 r1.w, r6.xyzx, -r8.xywx
  59: mov_sat r3.x, r1.w                                          -> float NoV = saturate(dot(GBuffer.WorldNormal, V));

  60: mad r7.z, r3.x, l(0.5000), l(0.5000)
  61: mad r7.z, r7.z, r3.x, l(-1.0000)
  62: mad_sat r7.w, -r3.w, l(1.2500), l(1.2500)
  63: mul r9.w, r7.w, r7.z
  64: mad r7.z, r7.z, r7.w, l(1.0000)                             -> float RefractionScale = ((NoV * 0.5 + 0.5) * NoV - 1) * saturate(1.25 - 1.25 * GBuffer.Roughness) + 1;

  65: mul r12.xyz, r10.xyzx, l(1.1111, 1.1111, 1.1111, 0.0000)    -> float3 AbsorptionColor = GBuffer.BaseColor * (1 / MetalSpec); 其中 float MetalSpec = 0.9;

  66: add r7.w, r3.x, l(-1.0000)
  67: mul r7.w, r7.w, l(0.8500)
  68: mad r13.xyz, r12.xyzx, r12.xyzx, -r12.xyzx
  69: mad r13.xyz, r13.xyzx, l(-0.7800, -0.7800, -0.7800, 0.0000), r12.xyzx
  70: add r13.xyz, -r13.xyzx, l(1.0000, 1.0000, 1.0000, 0.0000)
  71: mad r13.xyz, r7.wwww, r13.xyzx, l(1.0000, 1.0000, 1.0000, 0.0000)
  72: mul r12.xyz, r12.xyzx, r13.xyzx          -> float3 Absorption = AbsorptionColor * ((NoV - 1) * 0.85 * (1 - lerp(AbsorptionColor, Square(AbsorptionColor), -0.78)) + 1);

  73: add r7.w, -r3.x, l(1.0000)                                  -> 1 - NoV 
  74: mul r11.w, r7.w, r7.w
  75: mul r11.w, r11.w, r11.w
  76: mul r12.w, r7.w, r11.w                                      -> float Fc = Pow5(1 - NoV);

  77: mad r7.w, -r11.w, r7.w, l(1.0000)                           -> (1 - Fc)
  78: mad r7.w, r7.w, l(0.0400), r12.w                            -> float F = Fc + (1 - Fc) * F0;

  79: mad r7.w, r5.x, -r7.w, l(1.0000)                            -> r5.x = float ClearCoat = GBuffer.CustomData.x; 
  80: mul r13.xyz, r7.wwww, r10.xyzx                              -> (1 - ClearCoat * F) * GBuffer.BaseColor
                                                                  -> float LayerAttenuation = lerp(1, (1 - F), ClearCoat);
                                                                  -> (GBuffer.BaseColor * LayerAttenuation) 
  81: mul r12.xyz, r7.zzzz, r12.xyzx
  82: mul r7.z, r5.x, r6.w                                        -> LerpRate = GBuffer.Metallic * ClearCoat
  83: mad r12.xyz, r12.xyzx, l(0.9000, 0.9000, 0.9000, 0.0000), -r13.xyzx
  84: mad r12.xyz, r7.zzzz, r12.xyzx, r13.xyzx                    -> float3 BaseColor = lerp(GBuffer.BaseColor * LayerAttenuation, 
                                                                        MetalSpec * Absorption * RefractionScale, GBuffer.Metallic * ClearCoat);
------------Func:RemapClearCoatDiffuseAndSpecularColor() Partially End------------

  85: sample_l(texture2d)(float,float,float,float) r7.z, r0.xyxx, t13.yzxw, s7, l(0)      -> SSAO 
                                                                  -> float AmbientOcclusion = AmbientOcclusionTexture.SampleLevel(AmbientOcclusionSampler, BufferUV, 0).r; 

                                                                  -> UpsampleDFAO(...)
  86: mad r13.xy, -cb1[129].xyxx, cb1[131].zwzz, r0.xyxx          -> 
  87: min r13.xy, r13.xyxx, cb0[6].xyxx
  88: mul r13.zw, cb1[131].xxxy, l(0.0000, 0.0000, 0.5000, 0.5000)
  89: round_ni r13.zw, r13.zzzw
  90: div r14.xy, l(1.0000, 1.0000, 1.0000, 1.0000), r13.zwzz
  91: mad r15.xy, r13.xyxx, r13.zwzz, l(-0.5000, -0.5000, 0.0000, 0.0000)
  92: round_ni r15.xy, r15.xyxx
  93: div r15.xy, r15.xyxx, r13.zwzz
  94: mad r15.xy, r14.xyxx, l(0.5000, 0.5000, 0.0000, 0.0000), r15.xyxx
  95: add r13.xy, r13.xyxx, -r15.xyxx
  96: mul r15.zw, r13.zzzw, r13.xxxy
  97: sample_l(texture2d)(float,float,float,float) r16.xyzw, r15.xyxx, t6.xyzw, s5, l(0)
  98: mov r14.z, l(0)
  99: add r17.xyzw, r14.xzzy, r15.xyxy
 100: sample_l(texture2d)(float,float,float,float) r18.xyzw, r17.xyxx, t6.xyzw, s5, l(0)
 101: sample_l(texture2d)(float,float,float,float) r17.xyzw, r17.zwzz, t6.xyzw, s5, l(0)
 102: add r14.xy, r14.xyxx, r15.xyxx
 103: sample_l(texture2d)(float,float,float,float) r14.xyzw, r14.xyxx, t6.xyzw, s5, l(0)
 104: mad r13.xy, -r13.yxyy, r13.wzww, l(1.0000, 1.0000, 0.0000, 0.0000)
 105: mul r19.x, r13.y, r13.x
 106: mul r19.yz, r15.zzwz, r13.xxyx
 107: mul r19.w, r15.z, r15.w
 108: mov r13.x, r16.w
 109: mov r13.y, r18.w
 110: mov r13.z, r17.w
 111: mov r13.w, r14.w
 112: add r13.xyzw, -r1.zzzz, r13.xyzw
 113: add r13.xyzw, abs(r13.xyzw), l(0.0001, 0.0001, 0.0001, 0.0001)
 114: div r13.xyzw, l(1.0000, 1.0000, 1.0000, 1.0000), r13.xyzw
 115: mul r13.xyzw, r13.xyzw, r19.xyzw
 116: dp4 r7.w, r13.xyzw, l(1.0000, 1.0000, 1.0000, 1.0000)
 117: div r7.w, l(1.0000, 1.0000, 1.0000, 1.0000), r7.w
 118: mul r15.xyz, r18.xyzx, r13.yyyy
 119: mad r15.xyz, r13.xxxx, r16.xyzx, r15.xyzx
 120: mad r13.xyz, r13.zzzz, r17.xyzx, r15.xyzx
 121: mad r13.xyz, r13.wwww, r14.xyzx, r13.xyzx
 122: add r11.w, -r1.z, cb0[2].w
 123: mul_sat r11.w, r11.w, cb0[3].x
 124: mov r14.xyz, -r6.xyzx
 125: mad r13.xyz, r13.xyzx, r7.wwww, r14.xyzx
 126: mad r13.xyz, r11.wwww, r13.xyzx, r6.xyzx                    ->
                                                                  -> BentNormal = UpsampleDFAO(BufferUV, GBuffer.Depth, GBuffer.WorldNormal);

 127: if_nz r7.x                                                  -> if (ShadingModelID != SHADINGMODELID_UNLIT) 

------------Func:DecodeGBufferData() Partially Start------------
 128:   mad r15.xyz, -r10.xyzx, r6.wwww, r10.xyzx                 -> GBuffer.DiffuseColor = GBuffer.BaseColor - GBuffer.BaseColor * GBuffer.Metallic;
 129:   mad r15.xyz, r15.xyzx, cb1[135].wwww, cb1[135].xyzx       -> (BaseColor - BaseColor * Metallic) * (cb1[135].w=1) + (cb1[135].xyz=0) 
                                                                  -> GBuffer.DiffuseColor = GBuffer.DiffuseColor * View.DiffuseOverrideParameter.www + View.DiffuseOverrideParameter.xyz;
------------Func:DecodeGBufferData() Partially End------------


------------Func:RemapClearCoatDiffuseAndSpecularColor() Partially Start------------                                                               
 130:   mad r16.xyz, -r12.xyzx, r6.wwww, r12.xyzx                 -> DiffuseColor = BaseColor - BaseColor * GBuffer.Metallic;
 131:   movc r15.xyz, r8.zzzz, r16.xyzx, r15.xyzx                 -> if (GBuffer.ShadingModelID == SHADINGMODELID_CLEAR_COAT) set DiffuseColor else ...
------------Func:RemapClearCoatDiffuseAndSpecularColor() Partially End------------  


------------Func:SkyLightDiffuse() Start------------
 132:   dp3 r7.w, r13.xyzx, r13.xyzx
 133:   sqrt r7.w, r7.w                                           -> SkyVisibility = length(BentNormal);
 134:   max r11.w, r7.w, l(0.0000)
 135:   div r16.xyz, r13.xyzx, r11.wwww                           -> float3 NormalizedBentNormal = BentNormal / (max(SkyVisibility, .00001f));

 136:   mad r17.xyz, r2.xyzx, r2.wwww, -r16.xyzx 
 137:   mad r17.xyz, r7.wwww, r17.xyzx, r16.xyzx                  -> float BentNormalWeightFactor = SkyVisibility;
                                                                  -> SkyLightingNormal = lerp(NormalizedBentNormal, GBuffer.WorldNormal, BentNormalWeightFactor); 
 138:   dp3 r11.w, r16.xyzx, r6.xyzx
 139:   add r12.w, -r11.w, l(1.0000)
 140:   mad r11.w, r7.w, r12.w, r11.w                             -> DotProductFactor = lerp(dot(NormalizedBentNormal, GBuffer.WorldNormal), 1, BentNormalWeightFactor);

 141:   mad r7.w, r7.w, l(10.0000), l(-5.0000)
 142:   mul r7.w, r7.w, -cb0[8].x                                 -> cb0[8].x=0.01f ~ ContrastAndNormalizeMulAdd 
 143:   mul r7.w, r7.w, l(1.4427)
 144:   exp r7.w, r7.w
 145:   add r7.w, r7.w, l(1.0000)
 146:   div r7.w, l(1.0000, 1.0000, 1.0000, 1.0000), r7.w         -> float ContrastCurve = 1 / (1 + exp(-ContrastAndNormalizeMulAdd.x * (SkyVisibility * 10 - 5))); 

 147:   mad_sat r7.w, r7.w, cb0[8].y, cb0[8].z                    -> SkyVisibility = 
                                                                        saturate(ContrastCurve * ContrastAndNormalizeMulAdd.y + ContrastAndNormalizeMulAdd.z);
                                                                  -> cb0_v8[0.01, 40.00843, -19.50422, 0.70]            
 148:   log r7.w, r7.w
 149:   mul r7.w, r7.w, cb0[8].w                                  -> OcclusionExponent=0.7f 
 150:   exp r7.w, r7.w                                            -> SkyVisibility = pow(SkyVisibility, OcclusionExponent);

 151:   add r12.w, -r7.w, l(1.0000)                               -> OcclusionTintAndMinOcclusion.w=0 
 152:   mad r7.w, cb0[1].w, r12.w, r7.w                           -> SkyVisibility = lerp(SkyVisibility, 1, OcclusionTintAndMinOcclusion.w);

 153:   eq r12.w, cb0[9].x, l(0)                                  -> if (OcclusionCombineMode == 0) -> cb0[9].x=1 -> false 

 154:   min r13.w, r4.w, r7.z
 155:   min r15.w, r7.w, r13.w                                    -> SkyVisibility = min(SkyVisibility, min(GBuffer.GBufferAO, AmbientOcclusion));
                                                                  -> Combine with min 

 156:   mul r7.w, r7.w, r13.w                                     -> SkyVisibility = SkyVisibility * min(GBuffer.GBufferAO, AmbientOcclusion);
                                                                  -> Combine with mul -> AO效果会比较强 

 157:   movc r7.w, r12.w, r15.w, r7.w                             -> if (OcclusionCombineMode == 0) SkyVisibility=... else ...

 158:   ieq r16.xyzw, r7.xxxx, l(6, 2, 3, 7)                      ->TWOSIDED_FOLIAGE=6，SUBSURFACE=2，PREINTEGRATED_SKIN=3，HAIR=7

 159:   if_nz r16.x                                               -> if (GBuffer.ShadingModelID == SHADINGMODELID_TWOSIDED_FOLIAGE) 

 160:     mov r14.w, l(1.0000)
 161:     dp4 r18.x, cb1[181].xyzw, r14.xyzw
 162:     dp4 r18.y, cb1[182].xyzw, r14.xyzw
 163:     dp4 r18.z, cb1[183].xyzw, r14.xyzw
 164:     mul r14.xyzw, r6.yzzx, r6.xyzz
 165:     dp4 r19.x, cb1[184].xyzw, r14.xyzw
 166:     dp4 r19.y, cb1[185].xyzw, r14.xyzw
 167:     dp4 r19.z, cb1[186].xyzw, r14.xyzw
 168:     mul r12.w, r6.y, r6.y
 169:     mad r12.w, r6.x, r6.x, -r12.w
 170:     add r14.xyz, r18.xyzx, r19.xyzx
 171:     mad r14.xyz, cb1[187].xyzx, r12.wwww, r14.xyzx
 172:     max r14.xyz, r14.xyzx, l(0, 0, 0, 0)                    -> return max(0, Intermediate0 + Intermediate1 + Intermediate2);
                                                                  -> GetSkySHDiffuse(-GBuffer.WorldNormal) 

 173:     mul r14.xyz, r14.xyzx, cb1[180].xyzx                    -> vfloat3 SubsurfaceLookup = GetSkySHDiffuse(-GBuffer.WorldNormal) * View.SkyLightColor.rgb;

 174:     mul r18.xyz, r5.xyzx, r5.xyzx                           -> Square(BufferData.CustomData.rgb)
                                                                  -> float3 SubsurfaceColor = ExtractSubsurfaceColor(GBuffer);

 175:     mul r14.xyz, r7.wwww, r14.xyzx
 176:     mul r14.xyz, r18.xyzx, r14.xyzx                         -> Lighting += ScalarFactors * SubsurfaceLookup * SubsurfaceColor;
 177:   else
 178:     mov r14.xyz, l(0, 0, 0, 0)                              -> Lighting = 0
 179:   endif

 180:   or r12.w, r16.z, r16.y            -> if (GBuffer.ShadingModelID == SHADINGMODELID_SUBSURFACE || GBuffer.ShadingModelID == SHADINGMODELID_PREINTEGRATED_SKIN)
 181:   mul r16.xyz, r5.xyzx, r5.xyzx
 182:   mad r18.xyz, r5.xyzx, r5.xyzx, r15.xyzx                   -> float3 SubsurfaceColor = ExtractSubsurfaceColor(GBuffer);
                                                                  -> DiffuseColor += SubsurfaceColor;
 183:   movc r15.xyz, r12.wwww, r18.xyzx, r15.xyzx                -> if ... else ... 

 184:   if_nz r16.w                                               -> if (GBuffer.ShadingModelID == SHADINGMODELID_HAIR)
 185:     mul r18.xyz, r1.yyyy, cb1[49].xyzx
 186:     mad r18.xyz, r1.xxxx, cb1[48].xyzx, r18.xyzx
 187:     add r18.xyz, r18.xyzx, cb1[50].xyzx
 188:     dp3 r1.x, r18.xyzx, r18.xyzx
 189:     rsq r1.x, r1.x
 190:     mul r18.xyz, r1.xxxx, r18.xyzx                          -> float3 V = -normalize(mul(float4(ScreenPosition, 1, 0), View.ScreenToWorld).xyz);

 191:     dp3 r1.x, -r18.xyzx, r6.xyzx                            -> dot(V, N) 其中 r6.xyz=GBuffer.WorldNormal 

 192:     mad r19.xyz, -r6.xyzx, r1.xxxx, -r18.xyzx
 193:     dp3 r1.y, r19.xyzx, r19.xyzx
 194:     rsq r5.z, r1.y
 195:     mul r17.xyz, r5.zzzz, r19.xyzx                          -> float3 L = normalize(V - N * dot(V, N)); 
                                                                  -> SkyLightingNormal = L 这个分支会替换 SkyLightingNormal 的值 
------------Func:HairShading() Start------------
 196:     max r5.z, r3.w, l(0.0039)
 197:     min r5.z, r5.z, l(1.0000)
 198:     dp3 r12.w, -r18.xyzx, r17.xyzx
 199:     dp3 r13.w, r6.xyzx, r17.xyzx
 200:     mad r14.w, abs(r1.x), l(-0.1566), l(1.5708)
 201:     add r15.w, -abs(r1.x), l(1.0000)
 202:     sqrt r15.w, r15.w
 203:     mul r16.w, r14.w, r15.w
 204:     ge r18.x, r1.x, l(0)
 205:     mad r14.w, -r14.w, r15.w, l(3.1416)
 206:     movc r14.w, r18.x, r16.w, r14.w
 207:     add r14.w, -r14.w, l(1.5708)
 208:     mad r15.w, abs(r13.w), l(-0.1566), l(1.5708)
 209:     add r16.w, -abs(r13.w), l(1.0000)
 210:     sqrt r18.x, r16.w
 211:     mul r18.y, r15.w, r18.x
 212:     ge r18.z, r13.w, l(0)
 213:     mad r15.w, -r15.w, r18.x, l(3.1416)
 214:     movc r15.w, r18.z, r18.y, r15.w
 215:     add r15.w, -r15.w, l(1.5708)
 216:     add r14.w, r14.w, -r15.w
 217:     mul r14.w, abs(r14.w), l(0.5000)
 218:     sincos null, r14.w, r14.w
 219:     mad r18.xyz, -r13.wwww, r6.xyzx, r17.xyzx
 220:     dp3 r15.w, r18.xyzx, r19.xyzx
 221:     dp3 r18.x, r18.xyzx, r18.xyzx
 222:     mad r1.y, r18.x, r1.y, l(0.0001)
 223:     rsq r1.y, r1.y
 224:     mul r1.y, r1.y, r15.w
 225:     mad r18.xy, r1.yyyy, l(0.5000, 17.0000, 0.0000, 0.0000), l(0.5000, -16.7800, 0.0000, 0.0000)
 226:     mov_sat r18.x, r18.x
 227:     sqrt r1.y, r18.x
 228:     mul r15.w, r5.z, r5.z
 229:     mad r5.z, r5.z, r5.z, l(0.2000)
 230:     mad r15.w, r15.w, l(2.0000), l(0.2000)
 231:     mad r18.z, -r1.x, r1.x, l(1.0000)
 232:     sqrt r18.z, r18.z
 233:     mul r18.xw, r1.yyyx, l(0.9976, 0.0000, 0.0000, -0.0699)
 234:     mad r18.x, r18.x, r18.z, r18.w
 235:     mul r5.z, r1.y, r5.z
 236:     mul r18.zw, r5.zzzz, l(0.0000, 0.0000, 1.4142, 3.5449)
 237:     add r1.x, r1.x, r13.w
 238:     mad r5.z, -r18.x, l(-0.1399), r1.x
 239:     mul r5.z, r5.z, r5.z
 240:     mul r5.z, r5.z, l(-0.5000)
 241:     mul r13.w, r18.z, r18.z
 242:     div r5.z, r5.z, r13.w
 243:     mul r5.z, r5.z, l(1.4427)
 244:     exp r5.z, r5.z
 245:     div r5.z, r5.z, r18.w
 246:     mul r1.y, r1.y, r5.z
 247:     mad_sat r5.z, r12.w, l(0.5000), l(0.5000)
 248:     sqrt r5.z, r5.z
 249:     add r5.z, -r5.z, l(1.0000)
 250:     mul r13.w, r5.z, r5.z
 251:     mul r13.w, r13.w, r13.w
 252:     mul r5.z, r5.z, r13.w
 253:     mad r5.z, r5.z, l(0.9535), l(0.0465)
 254:     mul r1.y, r1.y, r5.z
 255:     mul r1.y, r10.w, r1.y
 256:     mov_sat r12.w, -r12.w
 257:     add r5.z, -r12.w, l(1.0000)
 258:     add r1.x, r1.x, l(-0.1400)
 259:     mul r1.x, r1.x, r1.x
 260:     mul r1.xy, r1.xyxx, l(-0.5000, 0.5000, 0.0000, 0.0000)
 261:     mul r10.w, r15.w, r15.w
 262:     div r1.x, r1.x, r10.w
 263:     mul r1.x, r1.x, l(1.4427)
 264:     exp r1.x, r1.x
 265:     mul r10.w, r15.w, l(2.5066)
 266:     div r1.x, r1.x, r10.w
 267:     mad r10.w, -r14.w, l(0.5000), l(1.0000)
 268:     mul r12.w, r10.w, r10.w
 269:     mul r12.w, r12.w, r12.w
 270:     mul r10.w, r10.w, r12.w
 271:     mad r10.w, r10.w, l(0.9535), l(0.0465)
 272:     add r12.w, -r10.w, l(1.0000)
 273:     mul r12.w, r12.w, r12.w
 274:     mul r10.w, r10.w, r12.w
 275:     div r12.w, l(0.8000), r14.w
 276:     log r18.xzw, r10.xxyz
 277:     mul r18.xzw, r12.wwww, r18.xxzw
 278:     exp r18.xzw, r18.xxzw
 279:     mul r12.w, r18.y, l(1.4427)
 280:     exp r12.w, r12.w
 281:     mul r1.x, r1.x, r12.w
 282:     mul r1.x, r10.w, r1.x
 283:     mul r18.xyz, r18.xzwx, r1.xxxx
 284:     mad r18.xyz, r1.yyyy, r5.zzzz, r18.xyzx
 285:     dp3 r1.x, r17.xyzx, r17.xyzx
 286:     add r1.x, r1.x, l(1.0000)
 287:     mul r1.x, r1.x, l(0.2500)
 288:     min r1.x, r1.x, l(1.0000)
 289:     add r1.y, -r1.x, r16.w
 290:     mad r1.x, r1.y, l(0.3300), r1.x
 291:     mul r1.x, r1.x, r6.w
 292:     mul r1.x, r1.x, l(0.3183)
 293:     sqrt r10.xyz, r10.xyzx
 294:     mad r10.xyz, r10.xyzx, r1.xxxx, r18.xyzx
 295:     min r10.xyz, -r10.xyzx, l(0, 0, 0, 0)
 296:     mul r15.xyz, r10.xyzx, l(-3.1416, -3.1416, -3.1416, 0)  -> DiffuseColor = PI * 
                                                                  HairShading(GBuffer, L, V, N, 1, TransmittanceData, 0, 0.2, uint2(0, 0), bEvalMultiScatter); 
------------Func:HairShading() End------------ 
 297:   endif

 298:   ieq r1.x, r7.x, l(8)                                      -> if (GBuffer.ShadingModelID == SHADINGMODELID_CLOTH) 

 299:   mad r10.xyz, r16.xyzx, r5.wwww, r15.xyzx                  -> float3 ClothFuzz = ExtractSubsurfaceColor(GBuffer);
                                                                  -> DiffuseColor += ClothFuzz * GBuffer.CustomData.a;
 300:   movc r10.xyz, r1.xxxx, r10.xyzx, r15.xyzx                 -> if ... else ... 

 301:   mov r17.w, l(1.0000)
 302:   dp4 r15.x, cb1[181].xyzw, r17.xyzw
 303:   dp4 r15.y, cb1[182].xyzw, r17.xyzw
 304:   dp4 r15.z, cb1[183].xyzw, r17.xyzw
 305:   mul r16.xyzw, r17.yzzx, r17.xyzz
 306:   dp4 r18.x, cb1[184].xyzw, r16.xyzw
 307:   dp4 r18.y, cb1[185].xyzw, r16.xyzw
 308:   dp4 r18.z, cb1[186].xyzw, r16.xyzw
 309:   mul r1.x, r17.y, r17.y
 310:   mad r1.x, r17.x, r17.x, -r1.x
 311:   add r15.xyz, r15.xyzx, r18.xyzx
 312:   mad r15.xyz, cb1[187].xyzx, r1.xxxx, r15.xyzx
 313:   max r15.xyz, r15.xyzx, l(0, 0, 0, 0)                      -> GetSkySHDiffuse(SkyLightingNormal)
 314:   mul r15.xyz, r15.xyzx, cb1[180].xyzx                      -> float3 DiffuseLookup = GetSkySHDiffuse(SkyLightingNormal) * View.SkyLightColor.rgb;

 315:   mul r1.x, r11.w, r7.w                                     -> DotProductFactor * SkyVisibility
 316:   add r1.y, -r7.w, l(1.0000)                                -> (1 - SkyVisibility)
 317:   mul r16.xyz, r1.yyyy, cb0[1].xyzx                         -> (1 - SkyVisibility) * OcclusionTintAndMinOcclusion.xyz 
 318:   mad r15.xyz, r1.xxxx, r15.xyzx, r16.xyzx                  -> DiffuseLookup * DotProductFactor * ScalarFactors + 
                                                                        (1 - SkyVisibility) * OcclusionTintAndMinOcclusion.xyz 
                                                                  -> 注意，前半式中出现的 ScalarFactors == SkyVisibility 
 319:   mad r10.xyz, r15.xyzx, r10.xyzx, r14.xyzx                 -> Lighting += DiffuseColor * (~) 

                                                                  -> Lighting += DiffuseIrradiance * GBuffer.DiffuseColor * (GBuffer.GBufferAO * AmbientOcclusion);
                                                                  -> 这部分代码因为 DiffuseIrradiance == 0 的情况，被抹去了对应DXBC 

 320:   mul r10.xyz, r10.xyzx, cb1[134].yyyy                      -> Lighting *= View.PreExposure;  其中 View.PreExposure=1 

 321:   eq r1.x, cb1[200].z, l(0)                                 -> cb1[200].z=1 ~= 0 -> false 
 322:   dp3 r1.y, r10.xyzx, l(0.3000, 0.5900, 0.1100, 0.0000)     -> Ret.a = Luminance(In.ScatterableLight);
 323:   and r1.y, r1.y, r1.x                                      -> ?
 324:   and r1.y, r1.y, r7.y
 325:   and o0.w, r1.y, r1.x                                      -> alpha = 0 
 326: else
 327:   mov r10.xyz, l(0, 0, 0, 0)                                -> Lighting = 0 
 328:   mov o0.w, l(0)                                            -> alpha = 0 
 329: endif











 330: ine r1.xy, r7.xxxx, l(0, 7, 0, 0)
 331: and r1.x, r1.y, r1.x
 332: if_nz r1.x
 333:   movc r9.xyz, r7.yyyy, r11.xyzx, r9.xyzx
 334:   mad r9.xyz, r9.xyzx, cb1[136].wwww, cb1[136].xyzx
 335:   mad r1.x, r5.x, r9.w, l(1.0000)
 336:   mul r1.y, r1.x, l(0.0800)
 337:   mad r11.xyz, -r1.xxxx, l(0.0800, 0.0800, 0.0800, 0.0000), r12.xyzx
 338:   mad r11.xyz, r6.wwww, r11.xyzx, r1.yyyy
 339:   movc r9.xyz, r8.zzzz, r11.xyzx, r9.xyzx
 340:   add r1.x, r1.w, r1.w
 341:   mad r11.yzw, r1.xxxx, r6.xxyz, r8.xxyw
 342:   mul r1.x, r3.w, r3.w
 343:   mad r1.y, -r3.w, r3.w, l(1.0000)
 344:   sqrt r1.w, r1.y
 345:   mad r1.w, r3.w, r3.w, r1.w
 346:   mul r1.y, r1.w, r1.y
 347:   mad r2.xyz, -r2.xyzx, r2.wwww, r11.yzwy
 348:   mad r2.yzw, r1.yyyy, r2.xxyz, r6.xxyz
 349:   sample_indexable(texture2d)(float,float,float,float) r6.xyzw, r0.xyxx, t12.xyzw, s6
 350:   add r0.x, -r6.w, l(1.0000)
 351:   mad r12.xyzw, r6.xyzw, l(1.0000, 1.0000, 1.0000, -1.0000), l(0.0000, 0.0000, 0.0000, 1.0000)
 352:   add r14.xyzw, -r12.xyzw, l(0.0000, 0.0000, 0.0000, 1.0000)
 353:   mad r14.xyzw, r5.xxxx, r14.xyzw, r12.xyzw
 354:   movc r12.xyzw, r8.zzzz, r14.xyzw, r12.xyzw
 355:   mad r0.y, r4.w, r7.z, r3.x
 356:   log r0.y, r0.y
 357:   mul r0.y, r0.y, r1.x
 358:   exp r0.y, r0.y
 359:   mad r0.y, r4.w, r7.z, r0.y
 360:   add_sat r0.y, r0.y, l(-1.0000)
 361:   mul r1.x, r0.y, r12.w
 362:   ftou r0.zw, r0.zzzw
 363:   mad r1.y, r1.z, cb3[3].x, cb3[3].y
 364:   log r1.y, r1.y
 365:   mul r1.y, r1.y, cb3[3].z
 366:   max r1.y, r1.y, l(0)
 367:   ftou r1.y, r1.y
 368:   iadd r1.z, cb3[1].z, l(-1)
 369:   umin r1.y, r1.z, r1.y
 370:   ushr r0.zw, r0.zzzw, cb3[2].xxxx
 371:   imad r0.w, r1.y, cb3[1].y, r0.w
 372:   imad r0.z, r0.w, cb3[1].x, r0.z
 373:   iadd r0.z, r0.z, cb3[0].w
 374:   ishl r0.w, r0.z, l(1)
 375:   ld_indexable(buffer)(uint,uint,uint,uint) r0.w, r0.wwww, t3.yzwx
 376:   umin r0.w, r0.w, cb3[0].y
 377:   bfi r0.z, l(31), l(1), r0.z, l(1)
 378:   ld_indexable(buffer)(uint,uint,uint,uint) r0.z, r0.zzzz, t3.yzxw
 379:   ieq r1.y, r7.x, l(6)
 380:   lt r1.z, l(0), cb0[0].x
 381:   if_nz r1.z
 382:     dp3 r1.w, r13.xyzx, r13.xyzx
 383:     sqrt r1.w, r1.w
 384:     if_nz cb1[189].x
 385:       if_z r1.y
 386:         max r1.y, r3.w, l(0.1000)
 387:         mul r4.w, r1.w, cb0[0].y
 388:         mul r5.z, r4.w, l(3.1416)
 389:         dp3 r5.w, r13.xyzx, r2.yzwy
 390:         max r6.w, r1.w, l(0.0010)
 391:         div r5.w, r5.w, r6.w
 392:         add r6.w, -abs(r5.w), l(1.0000)
 393:         sqrt r6.w, r6.w
 394:         mad r7.x, abs(r5.w), l(-0.0187), l(0.0743)
 395:         mad r7.x, r7.x, abs(r5.w), l(-0.2121)
 396:         mad r7.x, r7.x, abs(r5.w), l(1.5707)
 397:         mul r7.y, r6.w, r7.x
 398:         mad r7.y, r7.y, l(-2.0000), l(3.1416)
 399:         lt r5.w, r5.w, -r5.w
 400:         and r5.w, r5.w, r7.y
 401:         mad r5.w, r7.x, r6.w, r5.w
 402:         mad r6.w, r1.y, l(3.1416), -r5.z
 403:         add r5.w, r5.w, -abs(r6.w)
 404:         mad r1.y, r1.y, l(3.1416), r5.z
 405:         add r1.y, -abs(r6.w), r1.y
 406:         div_sat r1.y, r5.w, r1.y
 407:         add r1.y, -r1.y, l(1.0000)
 408:         mad r5.z, r1.y, l(-2.0000), l(3.0000)
 409:         mul r1.y, r1.y, r1.y
 410:         mul r1.y, r1.y, r5.z
 411:         mad r4.w, r4.w, l(3.1416), l(-0.1000)
 412:         mul_sat r4.w, r4.w, l(5.0000)
 413:         mul r1.w, r1.y, r4.w
 414:       endif
 415:     endif
 416:     add r1.y, -r1.w, l(1.0000)
 417:     mad r1.y, cb0[1].w, r1.y, r1.w
 418:     add r1.w, -r1.y, l(1.0000)
 419:     mul r7.xyz, r1.wwww, cb0[1].xyzx
 420:   else
 421:     mov r7.xyz, l(0, 0, 0, 0)
 422:     mov r1.y, l(1.0000)
 423:   endif
 424:   log r1.w, r3.w
 425:   mad r1.w, -r1.w, l(1.2000), l(1.0000)
 426:   add r4.w, cb1[188].z, l(-1.0000)
 427:   add r5.z, -r1.w, r4.w
 428:   mov r2.x, l(0)
 429:   mov r8.xyw, l(0, 0, 0, 0)
 430:   mov r5.w, r1.x
 431:   mov r6.w, l(0)
 432:   loop
 433:     uge r7.w, r6.w, r0.w
 434:     breakc_nz r7.w
 435:     lt r7.w, r5.w, l(0.0010)
 436:     if_nz r7.w
 437:       break
 438:     endif
 439:     iadd r7.w, r0.z, r6.w
 440:     ld_indexable(buffer)(uint,uint,uint,uint) r7.w, r7.wwww, t4.yzwx
 441:     add r14.xyz, r4.xyzx, -cb4[r7.w + 0].xyzx
 442:     dp3 r9.w, r14.xyzx, r14.xyzx
 443:     sqrt r10.w, r9.w
 444:     lt r12.w, r10.w, cb4[r7.w + 0].w
 445:     if_nz r12.w
 446:       div_sat r10.w, r10.w, cb4[r7.w + 0].w
 447:       dp3 r12.w, r2.yzwy, r14.xyzx
 448:       mad r9.w, -cb4[r7.w + 0].w, cb4[r7.w + 0].w, r9.w
 449:       mad r9.w, r12.w, r12.w, -r9.w
 450:       ge r13.w, r9.w, l(0)
 451:       sqrt r9.w, r9.w
 452:       add r9.w, -r12.w, r9.w
 453:       mad r14.xyz, r9.wwww, r2.yzwy, r14.xyzx
 454:       add r14.yzw, r14.xxyz, -cb4[r7.w + 682].xxyz
 455:       mad r9.w, r10.w, l(2.5000), l(-1.5000)
 456:       max r9.w, r9.w, l(0)
 457:       mul r10.w, r9.w, r9.w
 458:       mad r9.w, -r9.w, l(2.0000), l(3.0000)
 459:       mad r14.x, -r10.w, r9.w, l(1.0000)
 460:       movc r14.xyzw, r13.wwww, r14.xyzw, r2.xyzw
 461:       mov r15.xyz, r14.yzwy
 462:       mov r15.w, cb4[r7.w + 341].y
 463:       sample_l(texturecubearray)(float,float,float,float) r15.xyzw, r15.xyzw, t2.xyzw, s3, r5.z
 464:       mul r14.yzw, r15.xxyz, cb4[r7.w + 341].xxxx
 465:       mul r14.yzw, r14.xxxx, r14.yyzw
 466:       mul r14.yzw, r5.wwww, r14.yyzw
 467:       mad r8.xyw, r14.yzyw, r1.yyyy, r8.xyxw
 468:       mad r7.w, -r15.w, r14.x, l(1.0000)
 469:       mul r5.w, r5.w, r7.w
 470:     endif
 471:     iadd r6.w, r6.w, l(1)
 472:   endloop
 473:   lt r1.x, l(0), cb2[0].y
 474:   if_nz r1.x
 475:     add r1.w, -r1.w, cb2[0].x
 476:     add r1.w, r1.w, l(-1.0000)
 477:     sample_l(texturecube)(float,float,float,float) r14.xyz, r2.yzwy, t0.xyzw, s1, r1.w
 478:     mul r14.xyz, r14.xyzx, cb1[180].xyzx
 479:     lt r2.x, l(0), cb2[0].w
 480:     if_nz r2.x
 481:       sample_l(texturecube)(float,float,float,float) r2.xyz, r2.yzwy, t1.xyzw, s2, r1.w
 482:       mad r2.xyz, r2.xyzx, cb1[180].xyzx, -r14.xyzx
 483:       mad r14.xyz, cb2[0].wwww, r2.xyzx, r14.xyzx
 484:     endif
 485:     mad r7.xyz, r14.xyzx, r1.yyyy, r7.xyzx
 486:   endif
 487:   mul r2.xyz, r5.wwww, r7.xyzx
 488:   mad r2.xyz, r8.xywx, cb1[156].xyzx, r2.xyzx
 489:   mad r2.xyz, cb1[134].yyyy, r2.xyzx, r12.xyzx
 490:   if_nz r8.z
 491:     mov r3.y, r3.w
 492:     sample_l(texture2d)(float,float,float,float) r1.yw, r3.xyxx, t5.zxwy, s4, l(0)
 493:     mul_sat r2.w, r9.y, l(50.0000)
 494:     mul r1.w, r1.w, r2.w
 495:     add r2.w, -r5.x, l(1.0000)
 496:     mul r1.w, r1.w, r2.w
 497:     mad r7.xyz, r9.xyzx, r1.yyyy, r1.wwww
 498:     mul r7.xyz, r2.xyzx, r7.xyzx
 499:     mov r3.z, r5.y
 500:     sample_l(texture2d)(float,float,float,float) r1.yw, r3.xzxx, t5.zxwy, s4, l(0)
 501:     mad r1.y, r1.y, l(0.0400), r1.w
 502:     mul r1.w, r5.x, r1.y
 503:     mad r1.y, -r1.y, r5.x, l(1.0000)
 504:     mul r5.xzw, r1.wwww, r6.xxyz
 505:     mad r5.xzw, r7.xxyz, r1.yyyy, r5.xxzw
 506:     mul r0.x, r0.x, r1.w
 507:     mul r0.x, r0.y, r0.x
 508:     if_nz r1.z
 509:       dp3 r0.y, r13.xyzx, r13.xyzx
 510:       sqrt r0.y, r0.y
 511:       if_nz cb1[189].x
 512:         max r1.y, r5.y, l(0.1000)
 513:         mul r1.z, r0.y, cb0[0].y
 514:         mul r1.w, r1.z, l(3.1416)
 515:         dp3 r2.w, r13.xyzx, r11.yzwy
 516:         max r3.y, r0.y, l(0.0010)
 517:         div r2.w, r2.w, r3.y
 518:         add r3.y, -abs(r2.w), l(1.0000)
 519:         sqrt r3.y, r3.y
 520:         mad r3.z, abs(r2.w), l(-0.0187), l(0.0743)
 521:         mad r3.z, r3.z, abs(r2.w), l(-0.2121)
 522:         mad r3.z, r3.z, abs(r2.w), l(1.5707)
 523:         mul r6.x, r3.y, r3.z
 524:         mad r6.x, r6.x, l(-2.0000), l(3.1416)
 525:         lt r2.w, r2.w, -r2.w
 526:         and r2.w, r2.w, r6.x
 527:         mad r2.w, r3.z, r3.y, r2.w
 528:         mad r3.y, r1.y, l(3.1416), -r1.w
 529:         add r2.w, r2.w, -abs(r3.y)
 530:         mad r1.y, r1.y, l(3.1416), r1.w
 531:         add r1.y, -abs(r3.y), r1.y
 532:         div_sat r1.y, r2.w, r1.y
 533:         add r1.y, -r1.y, l(1.0000)
 534:         mad r1.w, r1.y, l(-2.0000), l(3.0000)
 535:         mul r1.y, r1.y, r1.y
 536:         mul r1.y, r1.y, r1.w
 537:         mad r1.z, r1.z, l(3.1416), l(-0.1000)
 538:         mul_sat r1.z, r1.z, l(5.0000)
 539:         mul r0.y, r1.y, r1.z
 540:       endif
 541:       add r1.y, -r0.y, l(1.0000)
 542:       mad r0.y, cb0[1].w, r1.y, r0.y
 543:       add r1.y, -r0.y, l(1.0000)
 544:       mul r1.yzw, r1.yyyy, cb0[1].xxyz
 545:     else
 546:       mov r1.yzw, l(0, 0, 0, 0)
 547:       mov r0.y, l(1.0000)
 548:     endif
 549:     log r2.w, r5.y
 550:     mad r2.w, -r2.w, l(1.2000), l(1.0000)
 551:     add r3.y, -r2.w, r4.w
 552:     mov r11.x, l(0)
 553:     mov r6.xyz, l(0, 0, 0, 0)
 554:     mov r3.z, r0.x
 555:     mov r4.w, l(0)
 556:     loop
 557:       uge r5.y, r4.w, r0.w
 558:       breakc_nz r5.y
 559:       lt r5.y, r3.z, l(0.0010)
 560:       if_nz r5.y
 561:         break
 562:       endif
 563:       iadd r5.y, r0.z, r4.w
 564:       ld_indexable(buffer)(uint,uint,uint,uint) r5.y, r5.yyyy, t4.yxzw
 565:       add r7.xyz, r4.xyzx, -cb4[r5.y + 0].xyzx
 566:       dp3 r6.w, r7.xyzx, r7.xyzx
 567:       sqrt r7.w, r6.w
 568:       lt r8.x, r7.w, cb4[r5.y + 0].w
 569:       if_nz r8.x
 570:         div_sat r7.w, r7.w, cb4[r5.y + 0].w
 571:         dp3 r8.x, r11.yzwy, r7.xyzx
 572:         mad r6.w, -cb4[r5.y + 0].w, cb4[r5.y + 0].w, r6.w
 573:         mad r6.w, r8.x, r8.x, -r6.w
 574:         ge r8.y, r6.w, l(0)
 575:         sqrt r6.w, r6.w
 576:         add r6.w, -r8.x, r6.w
 577:         mad r7.xyz, r6.wwww, r11.yzwy, r7.xyzx
 578:         add r12.yzw, r7.xxyz, -cb4[r5.y + 682].xxyz
 579:         mad r6.w, r7.w, l(2.5000), l(-1.5000)
 580:         max r6.w, r6.w, l(0)
 581:         mul r7.x, r6.w, r6.w
 582:         mad r6.w, -r6.w, l(2.0000), l(3.0000)
 583:         mad r12.x, -r7.x, r6.w, l(1.0000)
 584:         movc r7.xyzw, r8.yyyy, r12.xyzw, r11.xyzw
 585:         mov r8.xyz, r7.yzwy
 586:         mov r8.w, cb4[r5.y + 341].y
 587:         sample_l(texturecubearray)(float,float,float,float) r8.xyzw, r8.xyzw, t2.xyzw, s3, r3.y
 588:         mul r7.yzw, r8.xxyz, cb4[r5.y + 341].xxxx
 589:         mul r7.yzw, r7.xxxx, r7.yyzw
 590:         mul r7.yzw, r3.zzzz, r7.yyzw
 591:         mad r6.xyz, r7.yzwy, r0.yyyy, r6.xyzx
 592:         mad r5.y, -r8.w, r7.x, l(1.0000)
 593:         mul r3.z, r3.z, r5.y
 594:       endif
 595:       iadd r4.w, r4.w, l(1)
 596:     endloop
 597:     if_nz r1.x
 598:       add r0.x, -r2.w, cb2[0].x
 599:       add r0.x, r0.x, l(-1.0000)
 600:       sample_l(texturecube)(float,float,float,float) r4.xyz, r11.yzwy, t0.xyzw, s1, r0.x
 601:       mul r4.xyz, r4.xyzx, cb1[180].xyzx
 602:       lt r0.z, l(0), cb2[0].w
 603:       if_nz r0.z
 604:         sample_l(texturecube)(float,float,float,float) r0.xzw, r11.yzwy, t1.xwyz, s2, r0.x
 605:         mad r0.xzw, r0.xxzw, cb1[180].xxyz, -r4.xxyz
 606:         mad r4.xyz, cb2[0].wwww, r0.xzwx, r4.xyzx
 607:       endif
 608:       mad r1.yzw, r4.xxyz, r0.yyyy, r1.yyzw
 609:     endif
 610:     mul r0.xyz, r1.yzwy, r3.zzzz
 611:     mad r0.xyz, r6.xyzx, cb1[156].xyzx, r0.xyzx
 612:     mad r0.xyz, cb1[134].yyyy, r0.xyzx, r5.xzwx
 613:   else
 614:     sample_l(texture2d)(float,float,float,float) r1.xy, r3.xwxx, t5.xyzw, s4, l(0)
 615:     mul_sat r0.w, r9.y, l(50.0000)
 616:     mul r0.w, r1.y, r0.w
 617:     mad r1.xyz, r9.xyzx, r1.xxxx, r0.wwww
 618:     mul r0.xyz, r1.xyzx, r2.xyzx
 619:   endif
 620:   min r0.xyz, -r0.xyzx, l(0, 0, 0, 0)
 621:   add o0.xyz, -r0.xyzx, r10.xyzx
 622: else
 623:   mov o0.xyz, r10.xyzx
 624: endif
 625: ret
