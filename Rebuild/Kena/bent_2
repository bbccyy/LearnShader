bent_2

ConeTraceObjectOcclusionCS 
DistanceFieldScreenGridLighting.usf 

Shader hash 69d7851c-e8f3d2b9-5f5e31e4-18876239

cs_5_0
      dcl_globalFlags refactoringAllowed
      dcl_constantbuffer cb0[23], immediateIndexed
      dcl_constantbuffer cb1[132], immediateIndexed
      dcl_constantbuffer cb2[9], dynamicIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_resource_texture3d (float,float,float,float) t0                     -> Texture3D  
      dcl_resource_structured t1, 16
      dcl_resource_structured t2, 16
      dcl_resource_texture2d (float,float,float,float) t3
      dcl_resource_buffer (uint,uint,uint,uint) t4                            -> Buffer<uint> CulledTileDataArray   
      dcl_uav_typed_buffer (uint,uint,uint,uint) u0
      dcl_input vThreadGroupID.x
      dcl_input vThreadIDInGroup.x
      dcl_temps 14
      dcl_thread_group 64, 1, 1
   0: ushr r0.x, vThreadIDInGroup.x, l(4)                                     -> SubCulledTileIndex = GroupThreadId.x / (CONE_TILE_SIZEX * CONE_TILE_SIZEX);
   1: ishl r0.y, vThreadGroupID.x, l(3)                                       -> GroupId.x * 8 
   2: imad r0.x, r0.x, l(2), r0.y                                             -> uint CulledTileDataBaseIndex = GroupId.x * CONE_TRACE_TILES_PER_THREADGROUP;
                                                                              -> uint CulledTileIndex = CulledTileDataBaseIndex + SubCulledTileIndex;
                                                                              -> uint index = CulledTileIndex * CULLED_TILE_DATA_STRIDE + 0 

   3: ld_indexable(buffer)(uint,uint,uint,uint) r0.x, r0.xxxx, t4.xyzw        -> uint TileIndex = CulledTileDataArray[~];
   4: udiv r1.x, r2.x, r0.x, cb0[9].z                                         -> cb0[9].z=54 -> 除数放在r1.x，余数放在r2.x 
   5: and r3.x, vThreadIDInGroup.x, l(3)                                      -> ThreadIDInGroup.x & 0b0011 -> mod 4 
   6: ubfe r3.y, l(2), l(2), vThreadIDInGroup.x                               -> uint PixelIndex = GroupThreadId.x % (CONE_TILE_SIZEX * CONE_TILE_SIZEX);
   7: mov r2.y, r1.x
   8: bfi r0.yz, l(0, 30, 30, 0), l(0, 2, 2, 0), r2.xxyx, r3.xxyx
   9: ine r0.x, r0.x, l(0x0000ffff)
  10: ult r1.xy, r0.yzyy, cb0[12].zwzz
  11: and r0.w, r1.y, r1.x
  12: and r0.x, r0.w, r0.x
  13: if_nz r0.x
  14:   imad r0.x, vThreadGroupID.x, l(8), l(1)
  15:   ld_indexable(buffer)(uint,uint,uint,uint) r0.x, r0.xxxx, t4.xyzw
  16:   ishl r1.xy, r3.xyxx, l(2, 2, 0, 0)
  17:   bfi r1.xy, l(30, 30, 0, 0), l(4, 4, 0, 0), r2.xyxx, r1.xyxx
  18:   utof r1.xy, r1.xyxx
  19:   add r1.xy, r1.xyxx, cb0[13].xyxx
  20:   add r1.zw, r1.xxxy, l(0.0000, 0.0000, 0.5000, 0.5000)
  21:   mul r1.zw, r1.zzzw, cb0[11].xxxy
  22:   sample_l(texture2d)(float,float,float,float) r2.xyzw, r1.zwzz, t3.xyzw, s1, l(0)
  23:   mad r1.xy, r1.xyxx, l(2.0000, 2.0000, 0.0000, 0.0000), cb1[129].xyxx
  24:   add r1.xy, r1.xyxx, l(0.5000, 0.5000, 0.0000, 0.0000)
  25:   mad r1.xy, r1.xyxx, cb1[131].zwzz, -cb1[66].wzww
  26:   div r1.xy, r1.xyxx, cb1[66].xyxx
  27:   mul r1.xy, r2.wwww, r1.xyxx
  28:   mul r1.yzw, r1.yyyy, cb1[49].xxyz
  29:   mad r1.xyz, r1.xxxx, cb1[48].xyzx, r1.yzwy
  30:   mad r1.xyz, r2.wwww, cb1[50].xyzx, r1.xyzx
  31:   add r1.xyz, r1.xyzx, cb1[51].xyzx
  32:   ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r3.xyzw, r0.x, l(0), t1.xyzw
  33:   add r3.xyz, -r1.xyzx, r3.xyzx
  34:   dp3 r0.w, r3.xyzx, r3.xyzx
  35:   mul r2.w, r3.w, r3.w
  36:   div r0.w, r2.w, r0.w
  37:   lt r0.w, l(0.0625), r0.w
  38:   if_nz r0.w
  39:     imul null, r0.w, r0.x, l(17)
  40:     imad r3.xyzw, r0.xxxx, l(17, 17, 17, 17), l(3, 1, 2, 4)
  41:     ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r4.xyz, r3.x, l(0), t2.xyzx
  42:     ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r5.xyzw, r0.w, l(0), t2.xyzw
  43:     ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r6.xyzw, r3.y, l(0), t2.xyzw
  44:     ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r7.xyzw, r3.z, l(0), t2.xyzw
  45:     ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r3.xyzw, r3.w, l(0), t2.xyzw
  46:     mov r1.w, l(1.0000)
  47:     dp4 r8.x, r1.xyzw, r5.xyzw
  48:     dp4 r8.y, r1.xyzw, r6.xyzw
  49:     dp4 r8.z, r1.xyzw, r7.xyzw
  50:     lt r1.xyz, r8.xyzx, -r4.xyzx
  51:     add r9.xyz, r4.xyzx, r8.xyzx
  52:     mov r9.xyz, abs(r9.xyzx)
  53:     and r1.xyz, r1.xyzx, r9.xyzx
  54:     lt r9.xyz, r4.xyzx, r8.xyzx
  55:     add r10.xyz, -r4.xyzx, r8.xyzx
  56:     mov r10.xyz, abs(r10.xyzx)
  57:     and r9.xyz, r9.xyzx, r10.xyzx
  58:     dp3 r0.w, r1.xyzx, l(1.0000, 1.0000, 1.0000, 0.0000)
  59:     dp3 r1.x, r9.xyzx, l(1.0000, 1.0000, 1.0000, 0.0000)
  60:     add r0.w, r0.w, r1.x
  61:     mul r0.w, abs(r3.w), r0.w
  62:     lt r0.w, r0.w, cb0[8].x
  63:     if_nz r0.w
  64:       imad r0.y, r0.z, cb0[12].z, r0.y
  65:       lt r0.z, abs(r2.z), l(0.9990)
  66:       movc r1.xyz, r0.zzzz, l(1.0000, 0.0000, 0.0000, 0.0000), l(0.0000, 1.0000, 0.0000, 0.0000)
  67:       mul r9.xyz, r2.yzxy, r1.xyzx
  68:       mad r1.xyz, r1.zxyz, r2.zxyz, -r9.xyzx
  69:       dp3 r0.z, r1.xyzx, r1.xyzx
  70:       rsq r0.z, r0.z
  71:       mul r1.xyz, r0.zzzz, r1.xyzx
  72:       mul r9.xyz, r1.yzxy, r2.zxyz
  73:       mad r9.xyz, r2.yzxy, r1.zxyz, -r9.xyzx
  74:       mul r0.z, cb0[8].z, l(10.0000)
  75:       mad r0.z, r0.z, r0.z, l(1.0000)
  76:       mul r0.z, r0.z, cb0[8].y
  77:       div r0.w, l(1.0000, 1.0000, 1.0000, 1.0000), cb0[9].y
  78:       imad r0.x, r0.x, l(17), l(5)
  79:       ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r10.xyzw, r0.x, l(0), t2.xyzw
  80:       dp3 r0.x, r4.xyzx, r4.xyzx
  81:       sqrt r0.x, r0.x
  82:       mul r0.x, abs(r3.w), r0.x
  83:       mul r0.x, r0.x, l(0.5000)
  84:       max r1.w, r10.w, l(0.0001)
  85:       div r1.w, l(1.0000, 1.0000, 1.0000, 1.0000), r1.w
  86:       add r2.w, cb0[8].y, l(2.0000)
  87:       mov r4.w, l(0)
  88:       loop
  89:         uge r5.w, r4.w, l(9)
  90:         breakc_nz r5.w
  91:         mul r11.xyz, r9.xyzx, cb2[r4.w + 0].yyyy
  92:         mad r11.xyz, cb2[r4.w + 0].xxxx, r1.xyzx, r11.xyzx
  93:         mad r11.xyz, cb2[r4.w + 0].zzzz, r2.xyzx, r11.xyzx
  94:         dp3 r12.x, r11.xyzx, r5.xyzx
  95:         dp3 r12.y, r11.xyzx, r6.xyzx
  96:         dp3 r12.z, r11.xyzx, r7.xyzx
  97:         mov r5.w, l(1.0000)
  98:         mov r6.w, r2.w
  99:         mov r7.w, r2.w
 100:         mov r8.w, l(0)
 101:         loop
 102:           ult r9.w, r8.w, l(10)
 103:           lt r10.w, r6.w, r0.z
 104:           and r9.w, r9.w, r10.w
 105:           breakc_z r9.w
 106:           mad r11.xyz, r12.xyzx, r6.wwww, r8.xyzx
 107:           max r13.xyz, -r4.xyzx, r11.xyzx
 108:           min r13.xyz, r4.xyzx, r13.xyzx
 109:           add r11.xyz, r11.xyzx, -r13.xyzx
 110:           dp3 r9.w, r11.xyzx, r11.xyzx
 111:           ishr r9.w, r9.w, l(1)
 112:           iadd r9.w, r9.w, l(0.0000)
 113:           mad r11.xyz, r13.xyzx, r3.xyzx, r10.xyzx
 114:           sample_l(texture3d)(float,float,float,float) r10.w, r11.xyzx, t0.yzwx, s0, l(0)
 115:           add r9.w, r9.w, r10.w
 116:           mul r10.w, abs(r3.w), r9.w
 117:           mul r11.x, r6.w, cb0[22].z
 118:           iadd r11.x, -r11.x, l(161547303404896380000000000000000000000.0000)
 119:           mul_sat r11.y, r10.w, r11.x
 120:           mul_sat r11.x, r0.x, r11.x
 121:           mul_sat r11.z, r1.w, r6.w
 122:           add r11.xz, -r11.xxzx, l(1.0000, 0.0000, 1.0000, 0.0000)
 123:           max r11.x, r11.z, r11.x
 124:           max r11.x, r11.x, r11.y
 125:           mad r9.w, r9.w, abs(r3.w), r6.w
 126:           mul r9.w, r0.w, r9.w
 127:           mul r9.w, r9.w, r9.w
 128:           mul r9.w, r9.w, l(0.6000)
 129:           min r9.w, r9.w, l(1.0000)
 130:           max r9.w, r9.w, r11.x
 131:           min r5.w, r5.w, r9.w
 132:           iadd r8.w, r8.w, l(1)
 133:           utof r9.w, r8.w
 134:           mul r9.w, r9.w, cb0[8].z
 135:           mad r9.w, r9.w, r9.w, l(1.0000)
 136:           mul r11.x, r9.w, cb0[8].y
 137:           mad r9.w, cb0[8].y, r9.w, -r7.w
 138:           add r9.w, r9.w, r9.w
 139:           max r9.w, r9.w, r10.w
 140:           add r6.w, r6.w, r9.w
 141:           mov r7.w, r11.x
 142:         endloop
 143:         imul null, r6.w, r4.w, cb0[12].z
 144:         imad r6.w, r6.w, cb0[12].w, r0.y
 145:         atomic_umin u0, r6.w, r5.w
 146:         iadd r4.w, r4.w, l(1)
 147:       endloop
 148:     endif
 149:   endif
 150: endif
 151: ret