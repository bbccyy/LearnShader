
Block_PreProcessing
{
	Sample Tex
	Decode Depth
	Decode Normal
	...
}

Block_For_#1~#15_Mat	//T9.W通道 -> *255 -> uint -> & 0x0000000F -> 结果'不是' 0  
{
	...
	求取了 AO 

	Block_For_#6_Mat
	{
		...
		利用法线扰动和AO入参，求取该材质特有的环境光底色 R14 
	}
	else 	//All but #6 Mat
	{
		设置默认光强 R14 = 0 
	}

	...
	设置默认的通用 Diffuse 基础色 R15 

	Block_For_#7_Mat
	{
		...
		...
		求7号材质的专门 Diffuse 基础色 R15
	}

	求取 GI_Diffuse -> R10颜色 = R15 * BaseCol关联值 + R14 
}
else 	// For #0 Mat 
{
	R10 = (0,0,0,0)	-> GI_Diffuse 
	O0.W = 0 
}

Block_For_Not#0_Not#7_Mat 	//不是0号和7号的材质可以进入下面分支 
{
	...

	R9颜色 = [0 or Purple.y] * 
			[(BaseCol * (1 - Fresnel_Term)) - 0.08*(1 + T11.x*{[-1, 0]区间,与roughness和NoV有关})] + 
			0.08*(1+T11.x*{[-1, 0]区间,与roughness和NoV有关}) 											-> For #4 Mat 
	R9颜色 = (BaseCol.rgb - 0.2*0.08) * [0 or Purple.y] + 0.2*0.08  										-> For Rest Mat 

	Spec_Intense_1 = 被A通道修正过的 specular 系数/强度?


	If True 		//受到cb0[0].x参数控制，总是可进入 
	{

		求取某种强度 R1W -> 扰动法线的模长 

		If True 	//受到cb1[189].x参数控制，总是可进入 
		{
			Block_For_#6_Mat 
			{
				重新求取某种强度 R1W 
			}
		}

		[0.045, 0.051, 0.029] * 强度值R1W -> R7颜色 -> GI_Spec_Base 
		r1.y = 1 - 强度值R1W
	}
	else
	{
		R7颜色 = (0,0,0,0) 
		r1.y = 1 
	}

	...

	While (i < 当前场景启用的IBL纹理个数 && Spec_Intense_1 > 0.001) 
	{
		...

		If In_Distance
		{

			Sample IBL using reflectDir_UpLite 

			Compute IBL spec color 					-> r8.xyw  -> TODO 

			Update Spec_Intense_1 with multipler	-> r5.w 
		}

		i++ 
	}

	If True 		//受到cb2[0].y参数控制，总是可进入
	{
		Sample SkyBox_1 using reflectDir_UpLite 

		If False 	//受到cb2[0].w参数控制，总是不可进 
		{
			Sample SkyBox_2 		//No Data 

			Mix with SkyBox_1 ... 
		}

		天空盒返回值1: [0.045, 0.051, 0.029] * 天空盒颜色 * 粗糙度因子1 + R7颜色 
	}

	prefilter_Specular: 整合IBL和Sky的GI_Spec = 天空盒返回值1 * Spec_Intense_1 + IBL_spec1&rough1_col + T12采样关联值(spec相关) 

	Block_For_#4_Mat
	{
		...

		在第一次采样IBL返回的 R7颜色基础上微调获得 -> R5颜色 

		Spec_Intense_2 = saturate(R0Y - 1) * (1 - T12.a) * [T11.x*(0.04*scale + bias)] 
			-> where R0Y = Purple.z * {Tex11.x*[0 or Purple.y]} +  exp2( ln(NoV + noise?) * roughness^2 ) 

		If True  					//受到cb0[0].x参数控制，总是可进入 
		{

			If True 				//受到cb1[189].x参数控制，总是可进入 
			{
				...

				计算某种强度值 r0.y 
			}

			r1.xzw = [0.045, 0.051, 0.029] * (1 - 强度值R0Y) -> R1颜色 -> 对应了之前的 R7 颜色 -> GI_Spec_base2 
			r0.y = 1 - 强度值R0Y 
		}
		else
		{
			R1颜色 = (0,0,0,0) 
			强度值 r0.y = 1
		}

		...


		While (i < 当前场景启用的IBL纹理个数 && Spec_Intense_2 > 0.001) 
		{
			... 

			If In_Distance 
			{
				Sample IBL using reflectDir 

				Compute IBL spec color 					-> r6.xyz  

				Update Spec_Intense_2 with multipler	-> r3.z 
			}

			i++ 
		}

		If True  		//受到cb2[0].y参数控制，总是可进入
		{
			Sample SkyBox_1 using reflectDir 

			If False 	//受到cb2[0].w参数控制，总是不可进 
			{
				Sample SkyBox_2 		//No Data 

				Mix with SkyBox_1 ... 
			}

			天空盒返回值2: [0.045, 0.051, 0.029] * 天空盒颜色 * 粗糙度因子2 + R1颜色 
		}

		r0.xyz = 天空盒返回值2 * Spec_Intense_2 + IBL_spec2&rough2_col + R5颜色  				-> prefilter_Specular_Final_A 
	}
	else 			//For Not #4 Mat 
	{
		...
		r0.xyz = prefilter_Specular * [R9颜色 * scale + bias * saturate(50 * R9颜色.y)] 		-> prefilter_Specular_Final_B 
	}

	o0.xyz = prefilter_Specular_Final_(A/B) + R10颜色 

}
else
{
	o0.xyz = R10颜色 
}