uber_skin_1
MainIndirectDispatchCS 
Shaders\Private\PostProcessSubsurface.usf 


Shader hash 74f50470-5a3f2fb4-c91b035e-b0884efe
DC -> 18411

cs_5_0
      dcl_globalFlags refactoringAllowed
      dcl_constantbuffer cb0[52], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_sampler s2, mode_default

      dcl_resource_texture2d (float,float,float,float) t0                     -> Comp_M_D_R_F 
      dcl_resource_texture2d (float,float,float,float) t1                     -> CustomData 
      dcl_resource_texture2d (float,float,float,float) t2                     -> LUT_ssss 
      dcl_resource_texture2d (float,float,float,float) t3                     -> DC:18411 对应 RT 31731; DC:18418 对应 RT 32035 
      dcl_resource_buffer (uint,uint,uint,uint) t4                            -> RWBuffer<uint> RWSeparableGroupBuffer -> [Buffer 32036] 
                                                                              -> 对应源码中的 GroupBuffer 

      dcl_uav_typed_texture2d (float,float,float,float) u0                    -> RWTexture2D<float4> SSSColorUAV -> [Buffer 32035] (DC:18411)
                                                                                                                 -> [Buffer 32030] (DC:18418)

      dcl_input vThreadIDInGroupFlattened
      dcl_input vThreadGroupID.x
      dcl_temps 15
      dcl_thread_group 64, 1, 1

   0: ishl r0.x, vThreadGroupID.x, l(1) 
   1: iadd r0.x, r0.x, l(2)
   2: ld_indexable(buffer)(uint,uint,uint,uint) r0.y, r0.xxxx, t4.yxzw        -> GroupBuffer[2*(IndirectG_ID.x + 1) + 0] 
   3: iadd r0.x, r0.x, l(1)
   4: ld_indexable(buffer)(uint,uint,uint,uint) r0.x, r0.xxxx, t4.xyzw        -> GroupBuffer[2*(IndirectG_ID.x + 1)+1] 
   5: utof r1.xyzw, r0.yxxx                                                   -> uint2 G_ID

   6: and r0.x, vThreadIDInGroupFlattened.x, l(7)                             -> GI % THREAD_SIZE_X 
   7: ushr r0.y, vThreadIDInGroupFlattened.x, l(3)                            -> GI / THREAD_SIZE_X 
   8: utof r2.xyzw, r0.xyyy
   9: mad r0.xyzw, r1.xyzw, l(8.0000, 8.0000, 8.0000, 8.0000), r2.xyzw
  10: ftou r0.xyzw, r0.xyzw               -> uint2 DT_ID = G_ID * float2(THREAD_SIZE_X, THREAD_SIZE_Y) + float2(GI % THREAD_SIZE_X, GI / THREAD_SIZE_X);

  11: ubfe r0.xyzw, l(29, 29, 29, 29), l(0, 0, 0, 0), r0.xyzw
  12: iadd r0.xyzw, r0.xyzw, cb0[51].xyyy
  13: utof r1.xy, r0.xwxx                                         -> uint2 Pos = DT_ID.xy*SUBSURFACE_GROUP_SIZE / THREAD_SIZE_1D + Output_ViewportMin;
  14: add r1.xy, r1.xyxx, l(0.5000, 0.5000, 0.0000, 0.0000)
  15: mul r1.zw, r1.xxxy, cb0[49].zzzw                                        -> Output_ExtentInverse == cb0[49].zw 
                                                                              -> float2 BufferUV = ConvertGridPos2UV(Pos);

-> SSSSSampleSceneColorPoint -> GetSceneColor(coord) -> PostProcessSubsuraface.usf -> GetSceneColor 
  16: max r2.xy, r1.zwzz, cb0[34].xyxx                                        -> cb0[34] = [0.00059, 0.00104, 0.99941, 0.99896]
  17: min r2.xy, r2.xyxx, cb0[34].zwzz                                        -> SubsurfaceInput0_UVViewportBilinearMin{Max} 
                                                                              -> clamp UV 操作 
  18: sample_l(texture2d)(float,float,float,float) r2.xyzw, r2.xyxx, t3.xyzw, s2, l(0)    -> float4 colorM = SSSSSampleSceneColorPoint(BufferUV);
  19: lt r3.x, l(0), r2.w                                                     -> colorM.a = GetMaskFromDepthInAlpha(colorM.a);
  20: if_z r3.x
  21:   mov r4.xyzw, l(0, 0, 0, 0)                                            -> return 0.0f; 非SSSS部分直接返回
  22: endif

  23: if_nz r3.x

  24:   mul r3.x, cb0[28].z, cb0[31].x                                        -> 0.00117 * 854.0 = 0.99918 
  25:   mul r3.xy, r3.xxxx, l(1024.0000, 0.0000, 0.0000, 0.0000)              -> float2 ViewportDirectionUV = float2(1, 0) * SUBSURFACE_RADIUS_SCALE; 
                                                                              -> SUBSURFACE_RADIUS_SCALE 由cpp端设置，数值为 1024 

  26:   sample_l(texture2d)(float,float,float,float) r3.z, r1.zwzz, t0.xywz, s0, l(0)
  27:   sample_l(texture2d)(float,float,float,float) r1.zw, r1.zwzz, t1.yzxw, s1, l(0)
  28:   mul r3.z, r3.z, l(255.0000)
  29:   round_ne r3.z, r3.z
  30:   ftou r3.z, r3.z
  31:   and r3.zw, r3.zzzz, l(0, 0, 15, 16)
  32:   ieq r5.xy, r3.zzzz, l(5, 9, 0, 0)
  33:   or r3.z, r5.y, r5.x                                                   -> UseSubsurfaceProfile() ? 
  34:   and r3.z, r3.z, l(1.0000)
  35:   mul r1.w, r1.w, r3.z
  36:   movc r1.w, r3.w, l(0), r1.w                                           -> Mask * ScreenSpaceData.GBuffer.CustomData.a
                                                                              -> float SSSStrength = GetSubsurfaceStrength(BufferUV); 
                                                                              -> 注意，r3.w 对应 DecodeSelectiveOutputMask(InGBufferB.a)
                                                                              -> 用于控制是否开启CustomData 


  37:   div r3.z, cb0[27].x, r2.w                                             -> float SSSScaleX = SubsurfaceParams.x; float scale = SSSScaleX / OutDepth; 
  38:   mul r3.xy, r3.xyxx, r3.zzzz                                           -> float2 finalStep = scale * dir; 
  39:   mul r3.xy, r1.wwww, r3.xyxx                                           -> finalStep *= SSSStrength; 

  40:   mad r1.z, r1.z, l(255.0000), l(0.5000)                                -> return uint(BufferData.CustomData.r * 255.0f + 0.5f); 
  41:   ftou r1.z, r1.z                                                       -> uint ExtractSubsurfaceProfileInt(FGBufferData BufferData) 

  42:   movc r5.y, r3.w, l(0), r1.z                                           -> 这是补齐GetGbufferData中的处理
                                                                              -> uint SubsurfaceProfileInt  

  43:   mov r5.xzw, l(6, 0, 0, 0)
  44:   ld_indexable(texture2d)(float,float,float,float) r6.xyz, r5.xyzw, t2.xyzw 
  45:   add r7.xyz, r6.xyzx, l(0.0000, 0.0000, 0.0000, 0.0000)                -> colorInvDiv += GetSubsurfaceProfileKernel(
                                                                                    SSSS_N_KERNELWEIGHTOFFSET, SubsurfaceProfileInt).rgb;

  46:   mov r5.xzw, l(4, 0, 0, 0)
  47:   ld_indexable(texture2d)(float,float,float,float) r5.xzw, r5.xyzw, t2.xwyz   -> GetSubsurfaceProfileBoundaryColorBleed 

--> Out LOOP Begin! 
  48:   mov r8.xzw, l(7, 0, 0, 0)
  49:   mov r8.y, r5.y
  50:   ld_indexable(texture2d)(float,float,float,float) r9.xyzw, r8.xyzw, t2.xyzw
  51:   mul r9.xyzw, r9.xyzw, l(1.0000, 1.0000, 1.0000, 3.0000)               -> SUBSURFACE_KERNEL_SIZE == 3 -> 由cpp端设置 
                                                -> half4 Kernel = GetSubsurfaceProfileKernel(SSSS_N_KERNELWEIGHTOFFSET + i, SubsurfaceProfileInt); 

  52:   mul r1.zw, r3.xxxy, r9.wwww                                           -> float2 UVOffset = Kernel.a * finalStep; 

  -> Inner First Loop 
  53:   mul r10.x, r1.z, l(-1.0000)                                           -> UVOffset.x * -1 {Side} 
  54:   mov r10.yw, l(0, 0x80000000, 0, 0x80000000)                           -> 0x80000000 是decimal number 最大值 -> 2,147,483,648
                                                                              -> 0x80000000 也是float number 的 -0.0 表示 
  55:   mad r3.zw, cb0[49].zzzw, r1.xxxy, r10.xxxy                            -> BufferUV + r10.xy { UVOffset * Side? }  -> r10.y == -0.0 -> 只调整x方向 
  56:   max r3.zw, r3.zzzw, cb0[34].xxxy
  57:   min r3.zw, r3.zzzw, cb0[34].zzzw
  58:   sample_l(texture2d)(float,float,float,float) r11.xyzw, r3.zwzz, t3.xyzw, s2, l(0)  -> float4 color = SSSSSampleSceneColor(LocalUV);

  59:   sample_l(texture2d)(float,float,float,float) r6.w, r3.zwzz, t0.xyzw, s0, l(0)     -> 采样获取 ShadingModleID 
  60:   sample_l(texture2d)(float,float,float,float) r3.z, r3.zwzz, t1.yzxw, s1, l(0)     -> CustomData.r 
  61:   mul r3.w, r6.w, l(255.0000)
  62:   round_ne r3.w, r3.w
  63:   ftou r3.w, r3.w
  64:   and r3.w, r3.w, l(16)                                                 -> Decode Mask 
  65:   mad r3.z, r3.z, l(255.0000), l(0.5000) 
  66:   ftou r3.z, r3.z
  67:   movc r3.z, r3.w, l(0), r3.z                                           -> uint LocalSubsurfaceProfileInt = SSSSSampleProfileId(LocalUV);

  68:   ieq r3.z, r5.y, r3.z
  69:   movc r12.xyz, r3.zzzz, l(1.0000, 1.0000, 1.0000, 0.0000), r5.xzwx     -> float3 ColorTint = 
                                                                  LocalSubsurfaceProfileInt == SubsurfaceProfileInt ? 1.0f : BoundaryColorBleed;
  70:   lt r3.z, l(0), r11.w 
  71:   and r3.z, r3.z, l(1.0000)                                             -> color.a = GetMaskFromDepthInAlpha(color.a);

  72:   mul r3.w, cb0[27].y, l(0.0300)                                        -> 12000.0f / 400000 * SubsurfaceParams.y=1.11089 
  73:   add r6.w, r2.w, -r11.w                                                -> (OutDepth - LocalDepth)
  74:   mul_sat r6.w, r3.w, abs(r6.w)                                         -> float s = saturate(~)

  75:   add r6.w, -r6.w, l(1.0000)
  76:   mul r13.w, r3.z, r6.w                                                 -> color.a *= 1 - s; 

  77:   mul r12.xyz, r12.xyzx, r13.wwww
  78:   mul r13.xyz, r11.xyzx, r12.xyzx                                       -> color.rgb *= color.a * ColorTint;

-> Inner Next Loop 
  79:   mad r1.zw, cb0[49].zzzw, r1.xxxy, r1.zzzw                             -> BufferUV + r1.zw {old UVOffset} -> 此时Side == 1，故省略 

  80:   max r1.zw, r1.zzzw, cb0[34].xxxy
  81:   min r1.zw, r1.zzzw, cb0[34].zzzw
  82:   sample_l(texture2d)(float,float,float,float) r11.xyzw, r1.zwzz, t3.xyzw, s2, l(0)
  83:   sample_l(texture2d)(float,float,float,float) r3.z, r1.zwzz, t0.xywz, s0, l(0)
  84:   sample_l(texture2d)(float,float,float,float) r1.z, r1.zwzz, t1.yzxw, s1, l(0)
  85:   mul r1.w, r3.z, l(255.0000)
  86:   round_ne r1.w, r1.w
  87:   ftou r1.w, r1.w
  88:   and r1.w, r1.w, l(16)
  89:   mad r1.z, r1.z, l(255.0000), l(0.5000)
  90:   ftou r1.z, r1.z
  91:   movc r1.z, r1.w, l(0), r1.z
  92:   ieq r1.z, r5.y, r1.z
  93:   movc r12.xyz, r1.zzzz, l(1.0000, 1.0000, 1.0000, 0.0000), r5.xzwx
  94:   lt r1.z, l(0), r11.w
  95:   and r1.z, r1.z, l(1.0000)
  96:   add r1.w, r2.w, -r11.w
  97:   mul_sat r1.w, abs(r1.w), r3.w
  98:   add r1.w, -r1.w, l(1.0000)
  99:   mul r14.w, r1.w, r1.z                                                 -> color.a *= 1 - s; 

 100:   mul r12.xyz, r12.xyzx, r14.wwww
 101:   mul r14.xyz, r11.xyzx, r12.xyzx                                       -> color.rgb *= color.a * ColorTint;


 102:   add r11.xyzw, r13.xyzw, r14.xyzw                                      -> merge color.rgba in two inner loop 

 103:   mul r11.xyz, r9.xyzx, r11.xyzx
 104:   mad r2.xyz, r2.xyzx, r6.xyzx, r11.xyzx                                -> colorAccum += Kernel.rgb * LocalAccum.rgb;
 105:   mad r6.xyz, r9.xyzx, r11.wwww, r7.xyzx                                -> colorInvDiv += Kernel.rgb * LocalAccum.a;

--> Next Out LOOP Begin! 
 106:   mov r8.xzw, l(8, 0, 0, 0)
 107:   ld_indexable(texture2d)(float,float,float,float) r7.xyzw, r8.xyzw, t2.xyzw 
 108:   mul r7.xyzw, r7.xyzw, l(1.0000, 1.0000, 1.0000, 3.0000)
 109:   mul r1.zw, r3.xxxy, r7.wwww
 110:   mul r10.z, r1.z, l(-1.0000)
 111:   mad r9.xy, cb0[49].zwzz, r1.xyxx, r10.zwzz
 112:   max r9.xy, r9.xyxx, cb0[34].xyxx
 113:   min r9.xy, r9.xyxx, cb0[34].zwzz
 114:   sample_l(texture2d)(float,float,float,float) r10.xyzw, r9.xyxx, t3.xyzw, s2, l(0)
 115:   sample_l(texture2d)(float,float,float,float) r3.z, r9.xyxx, t0.xywz, s0, l(0)
 116:   sample_l(texture2d)(float,float,float,float) r6.w, r9.xyxx, t1.yzwx, s1, l(0)
 117:   mul r3.z, r3.z, l(255.0000)
 118:   round_ne r3.z, r3.z
 119:   ftou r3.z, r3.z
 120:   and r3.z, r3.z, l(16)
 121:   mad r6.w, r6.w, l(255.0000), l(0.5000)
 122:   ftou r6.w, r6.w
 123:   movc r3.z, r3.z, l(0), r6.w
 124:   ieq r3.z, r5.y, r3.z
 125:   movc r9.xyz, r3.zzzz, l(1.0000, 1.0000, 1.0000, 0.0000), r5.xzwx
 126:   lt r3.z, l(0), r10.w
 127:   and r3.z, r3.z, l(1.0000)
 128:   add r6.w, r2.w, -r10.w
 129:   mul_sat r6.w, r3.w, abs(r6.w)
 130:   add r6.w, -r6.w, l(1.0000)
 131:   mul r11.w, r3.z, r6.w
 132:   mul r9.xyz, r9.xyzx, r11.wwww
 133:   mul r11.xyz, r9.xyzx, r10.xyzx
 134:   mad r1.zw, cb0[49].zzzw, r1.xxxy, r1.zzzw
 135:   max r1.zw, r1.zzzw, cb0[34].xxxy
 136:   min r1.zw, r1.zzzw, cb0[34].zzzw
 137:   sample_l(texture2d)(float,float,float,float) r9.xyzw, r1.zwzz, t3.xyzw, s2, l(0)
 138:   sample_l(texture2d)(float,float,float,float) r3.z, r1.zwzz, t0.xywz, s0, l(0)
 139:   sample_l(texture2d)(float,float,float,float) r1.z, r1.zwzz, t1.yzxw, s1, l(0)
 140:   mul r1.w, r3.z, l(255.0000)
 141:   round_ne r1.w, r1.w
 142:   ftou r1.w, r1.w
 143:   and r1.w, r1.w, l(16)
 144:   mad r1.z, r1.z, l(255.0000), l(0.5000)
 145:   ftou r1.z, r1.z
 146:   movc r1.z, r1.w, l(0), r1.z
 147:   ieq r1.z, r5.y, r1.z
 148:   movc r10.xyz, r1.zzzz, l(1.0000, 1.0000, 1.0000, 0.0000), r5.xzwx
 149:   lt r1.z, l(0), r9.w
 150:   and r1.z, r1.z, l(1.0000)
 151:   add r1.w, r2.w, -r9.w
 152:   mul_sat r1.w, abs(r1.w), r3.w
 153:   add r1.w, -r1.w, l(1.0000)
 154:   mul r12.w, r1.w, r1.z
 155:   mul r10.xyz, r10.xyzx, r12.wwww
 156:   mul r12.xyz, r9.xyzx, r10.xyzx
 157:   add r9.xyzw, r11.xyzw, r12.xyzw
 158:   mad r2.xyz, r7.xyzx, r9.xyzx, r2.xyzx
 159:   mad r6.xyz, r7.xyzx, r9.wwww, r6.xyzx
 160:   mov r8.xzw, l(9, 0, 0, 0)
 161:   ld_indexable(texture2d)(float,float,float,float) r7.xyzw, r8.xyzw, t2.xyzw
 162:   mul r7.xyzw, r7.xyzw, l(1.0000, 1.0000, 1.0000, 3.0000)
 163:   mul r1.zw, r3.xxxy, r7.wwww
 164:   mul r9.x, r1.z, l(-1.0000)
 165:   mov r9.yw, l(0, 0x80000000, 0, 0x80000000)
 166:   mad r9.xy, cb0[49].zwzz, r1.xyxx, r9.xyxx
 167:   max r9.xy, r9.xyxx, cb0[34].xyxx
 168:   min r9.xy, r9.xyxx, cb0[34].zwzz
 169:   sample_l(texture2d)(float,float,float,float) r10.xyzw, r9.xyxx, t3.xyzw, s2, l(0)
 170:   sample_l(texture2d)(float,float,float,float) r3.z, r9.xyxx, t0.xywz, s0, l(0)
 171:   sample_l(texture2d)(float,float,float,float) r6.w, r9.xyxx, t1.yzwx, s1, l(0)
 172:   mul r3.z, r3.z, l(255.0000)
 173:   round_ne r3.z, r3.z
 174:   ftou r3.z, r3.z
 175:   and r3.z, r3.z, l(16)
 176:   mad r6.w, r6.w, l(255.0000), l(0.5000)
 177:   ftou r6.w, r6.w
 178:   movc r3.z, r3.z, l(0), r6.w
 179:   ieq r3.z, r5.y, r3.z
 180:   movc r11.xyz, r3.zzzz, l(1.0000, 1.0000, 1.0000, 0.0000), r5.xzwx
 181:   lt r3.z, l(0), r10.w
 182:   and r3.z, r3.z, l(1.0000)
 183:   add r6.w, r2.w, -r10.w
 184:   mul_sat r6.w, r3.w, abs(r6.w)
 185:   add r6.w, -r6.w, l(1.0000)
 186:   mul r12.w, r3.z, r6.w
 187:   mul r11.xyz, r11.xyzx, r12.wwww
 188:   mul r12.xyz, r10.xyzx, r11.xyzx
 189:   mad r1.zw, cb0[49].zzzw, r1.xxxy, r1.zzzw
 190:   max r1.zw, r1.zzzw, cb0[34].xxxy
 191:   min r1.zw, r1.zzzw, cb0[34].zzzw
 192:   sample_l(texture2d)(float,float,float,float) r10.xyzw, r1.zwzz, t3.xyzw, s2, l(0)
 193:   sample_l(texture2d)(float,float,float,float) r3.z, r1.zwzz, t0.xywz, s0, l(0)
 194:   sample_l(texture2d)(float,float,float,float) r1.z, r1.zwzz, t1.yzxw, s1, l(0)
 195:   mul r1.w, r3.z, l(255.0000)
 196:   round_ne r1.w, r1.w
 197:   ftou r1.w, r1.w
 198:   and r1.w, r1.w, l(16)
 199:   mad r1.z, r1.z, l(255.0000), l(0.5000)
 200:   ftou r1.z, r1.z
 201:   movc r1.z, r1.w, l(0), r1.z
 202:   ieq r1.z, r5.y, r1.z
 203:   movc r11.xyz, r1.zzzz, l(1.0000, 1.0000, 1.0000, 0.0000), r5.xzwx
 204:   lt r1.z, l(0), r10.w
 205:   and r1.z, r1.z, l(1.0000)
 206:   add r1.w, r2.w, -r10.w
 207:   mul_sat r1.w, abs(r1.w), r3.w
 208:   add r1.w, -r1.w, l(1.0000)
 209:   mul r13.w, r1.w, r1.z
 210:   mul r11.xyz, r11.xyzx, r13.wwww
 211:   mul r13.xyz, r10.xyzx, r11.xyzx
 212:   add r10.xyzw, r12.xyzw, r13.xyzw
 213:   mad r2.xyz, r7.xyzx, r10.xyzx, r2.xyzx
 214:   mad r6.xyz, r7.xyzx, r10.wwww, r6.xyzx
 215:   mov r8.xzw, l(10, 0, 0, 0)
 216:   ld_indexable(texture2d)(float,float,float,float) r7.xyzw, r8.xyzw, t2.xyzw
 217:   mul r7.xyzw, r7.xyzw, l(1.0000, 1.0000, 1.0000, 3.0000)
 218:   mul r1.zw, r3.xxxy, r7.wwww
 219:   mul r9.z, r1.z, l(-1.0000)
 220:   mad r9.xy, cb0[49].zwzz, r1.xyxx, r9.zwzz
 221:   max r9.xy, r9.xyxx, cb0[34].xyxx
 222:   min r9.xy, r9.xyxx, cb0[34].zwzz
 223:   sample_l(texture2d)(float,float,float,float) r10.xyzw, r9.xyxx, t3.xyzw, s2, l(0)
 224:   sample_l(texture2d)(float,float,float,float) r3.z, r9.xyxx, t0.xywz, s0, l(0)
 225:   sample_l(texture2d)(float,float,float,float) r6.w, r9.xyxx, t1.yzwx, s1, l(0)
 226:   mul r3.z, r3.z, l(255.0000)
 227:   round_ne r3.z, r3.z
 228:   ftou r3.z, r3.z
 229:   and r3.z, r3.z, l(16)
 230:   mad r6.w, r6.w, l(255.0000), l(0.5000)
 231:   ftou r6.w, r6.w
 232:   movc r3.z, r3.z, l(0), r6.w
 233:   ieq r3.z, r5.y, r3.z
 234:   movc r9.xyz, r3.zzzz, l(1.0000, 1.0000, 1.0000, 0.0000), r5.xzwx
 235:   lt r3.z, l(0), r10.w
 236:   and r3.z, r3.z, l(1.0000)
 237:   add r6.w, r2.w, -r10.w
 238:   mul_sat r6.w, r3.w, abs(r6.w)
 239:   add r6.w, -r6.w, l(1.0000)
 240:   mul r11.w, r3.z, r6.w
 241:   mul r9.xyz, r9.xyzx, r11.wwww
 242:   mul r11.xyz, r9.xyzx, r10.xyzx
 243:   mad r1.zw, cb0[49].zzzw, r1.xxxy, r1.zzzw
 244:   max r1.zw, r1.zzzw, cb0[34].xxxy
 245:   min r1.zw, r1.zzzw, cb0[34].zzzw
 246:   sample_l(texture2d)(float,float,float,float) r9.xyzw, r1.zwzz, t3.xyzw, s2, l(0)
 247:   sample_l(texture2d)(float,float,float,float) r3.z, r1.zwzz, t0.xywz, s0, l(0)
 248:   sample_l(texture2d)(float,float,float,float) r1.z, r1.zwzz, t1.yzxw, s1, l(0)
 249:   mul r1.w, r3.z, l(255.0000)
 250:   round_ne r1.w, r1.w
 251:   ftou r1.w, r1.w
 252:   and r1.w, r1.w, l(16)
 253:   mad r1.z, r1.z, l(255.0000), l(0.5000)
 254:   ftou r1.z, r1.z
 255:   movc r1.z, r1.w, l(0), r1.z
 256:   ieq r1.z, r5.y, r1.z
 257:   movc r10.xyz, r1.zzzz, l(1.0000, 1.0000, 1.0000, 0.0000), r5.xzwx
 258:   lt r1.z, l(0), r9.w
 259:   and r1.z, r1.z, l(1.0000)
 260:   add r1.w, r2.w, -r9.w
 261:   mul_sat r1.w, abs(r1.w), r3.w
 262:   add r1.w, -r1.w, l(1.0000)
 263:   mul r12.w, r1.w, r1.z
 264:   mul r10.xyz, r10.xyzx, r12.wwww
 265:   mul r12.xyz, r9.xyzx, r10.xyzx
 266:   add r9.xyzw, r11.xyzw, r12.xyzw
 267:   mad r2.xyz, r7.xyzx, r9.xyzx, r2.xyzx
 268:   mad r6.xyz, r7.xyzx, r9.wwww, r6.xyzx
 269:   mov r8.xzw, l(11, 0, 0, 0)
 270:   ld_indexable(texture2d)(float,float,float,float) r7.xyzw, r8.xyzw, t2.xyzw
 271:   mul r7.xyzw, r7.xyzw, l(1.0000, 1.0000, 1.0000, 3.0000)
 272:   mul r1.zw, r3.xxxy, r7.wwww
 273:   mul r9.x, r1.z, l(-1.0000)
 274:   mov r9.yw, l(0, 0x80000000, 0, 0x80000000)
 275:   mad r9.xy, cb0[49].zwzz, r1.xyxx, r9.xyxx
 276:   max r9.xy, r9.xyxx, cb0[34].xyxx
 277:   min r9.xy, r9.xyxx, cb0[34].zwzz
 278:   sample_l(texture2d)(float,float,float,float) r10.xyzw, r9.xyxx, t3.xyzw, s2, l(0)
 279:   sample_l(texture2d)(float,float,float,float) r3.z, r9.xyxx, t0.xywz, s0, l(0)
 280:   sample_l(texture2d)(float,float,float,float) r6.w, r9.xyxx, t1.yzwx, s1, l(0)
 281:   mul r3.z, r3.z, l(255.0000)
 282:   round_ne r3.z, r3.z
 283:   ftou r3.z, r3.z
 284:   and r3.z, r3.z, l(16)
 285:   mad r6.w, r6.w, l(255.0000), l(0.5000)
 286:   ftou r6.w, r6.w
 287:   movc r3.z, r3.z, l(0), r6.w
 288:   ieq r3.z, r5.y, r3.z
 289:   movc r11.xyz, r3.zzzz, l(1.0000, 1.0000, 1.0000, 0.0000), r5.xzwx
 290:   lt r3.z, l(0), r10.w
 291:   and r3.z, r3.z, l(1.0000)
 292:   add r6.w, r2.w, -r10.w
 293:   mul_sat r6.w, r3.w, abs(r6.w)
 294:   add r6.w, -r6.w, l(1.0000)
 295:   mul r12.w, r3.z, r6.w
 296:   mul r11.xyz, r11.xyzx, r12.wwww
 297:   mul r12.xyz, r10.xyzx, r11.xyzx
 298:   mad r1.zw, cb0[49].zzzw, r1.xxxy, r1.zzzw
 299:   max r1.zw, r1.zzzw, cb0[34].xxxy
 300:   min r1.zw, r1.zzzw, cb0[34].zzzw
 301:   sample_l(texture2d)(float,float,float,float) r10.xyzw, r1.zwzz, t3.xyzw, s2, l(0)
 302:   sample_l(texture2d)(float,float,float,float) r3.z, r1.zwzz, t0.xywz, s0, l(0)
 303:   sample_l(texture2d)(float,float,float,float) r1.z, r1.zwzz, t1.yzxw, s1, l(0)
 304:   mul r1.w, r3.z, l(255.0000)
 305:   round_ne r1.w, r1.w
 306:   ftou r1.w, r1.w
 307:   and r1.w, r1.w, l(16)
 308:   mad r1.z, r1.z, l(255.0000), l(0.5000)
 309:   ftou r1.z, r1.z
 310:   movc r1.z, r1.w, l(0), r1.z
 311:   ieq r1.z, r5.y, r1.z
 312:   movc r11.xyz, r1.zzzz, l(1.0000, 1.0000, 1.0000, 0.0000), r5.xzwx
 313:   lt r1.z, l(0), r10.w
 314:   and r1.z, r1.z, l(1.0000)
 315:   add r1.w, r2.w, -r10.w
 316:   mul_sat r1.w, abs(r1.w), r3.w
 317:   add r1.w, -r1.w, l(1.0000)
 318:   mul r13.w, r1.w, r1.z
 319:   mul r11.xyz, r11.xyzx, r13.wwww
 320:   mul r13.xyz, r10.xyzx, r11.xyzx
 321:   add r10.xyzw, r12.xyzw, r13.xyzw
 322:   mad r2.xyz, r7.xyzx, r10.xyzx, r2.xyzx
 323:   mad r6.xyz, r7.xyzx, r10.wwww, r6.xyzx
 324:   mov r8.xzw, l(12, 0, 0, 0)
 325:   ld_indexable(texture2d)(float,float,float,float) r7.xyzw, r8.xyzw, t2.xyzw
 326:   mul r7.xyzw, r7.xyzw, l(1.0000, 1.0000, 1.0000, 3.0000)
 327:   mul r1.zw, r3.xxxy, r7.wwww
 328:   mul r9.z, r1.z, l(-1.0000)
 329:   mad r9.xy, cb0[49].zwzz, r1.xyxx, r9.zwzz
 330:   max r9.xy, r9.xyxx, cb0[34].xyxx
 331:   min r9.xy, r9.xyxx, cb0[34].zwzz
 332:   sample_l(texture2d)(float,float,float,float) r10.xyzw, r9.xyxx, t3.xyzw, s2, l(0)
 333:   sample_l(texture2d)(float,float,float,float) r3.z, r9.xyxx, t0.xywz, s0, l(0)
 334:   sample_l(texture2d)(float,float,float,float) r6.w, r9.xyxx, t1.yzwx, s1, l(0)
 335:   mul r3.z, r3.z, l(255.0000)
 336:   round_ne r3.z, r3.z
 337:   ftou r3.z, r3.z
 338:   and r3.z, r3.z, l(16)
 339:   mad r6.w, r6.w, l(255.0000), l(0.5000)
 340:   ftou r6.w, r6.w
 341:   movc r3.z, r3.z, l(0), r6.w
 342:   ieq r3.z, r5.y, r3.z
 343:   movc r9.xyz, r3.zzzz, l(1.0000, 1.0000, 1.0000, 0.0000), r5.xzwx
 344:   lt r3.z, l(0), r10.w
 345:   and r3.z, r3.z, l(1.0000)
 346:   add r6.w, r2.w, -r10.w
 347:   mul_sat r6.w, r3.w, abs(r6.w)
 348:   add r6.w, -r6.w, l(1.0000)
 349:   mul r11.w, r3.z, r6.w
 350:   mul r9.xyz, r9.xyzx, r11.wwww
 351:   mul r11.xyz, r9.xyzx, r10.xyzx
 352:   mad r1.zw, cb0[49].zzzw, r1.xxxy, r1.zzzw
 353:   max r1.zw, r1.zzzw, cb0[34].xxxy
 354:   min r1.zw, r1.zzzw, cb0[34].zzzw
 355:   sample_l(texture2d)(float,float,float,float) r9.xyzw, r1.zwzz, t3.xyzw, s2, l(0)
 356:   sample_l(texture2d)(float,float,float,float) r3.z, r1.zwzz, t0.xywz, s0, l(0)
 357:   sample_l(texture2d)(float,float,float,float) r1.z, r1.zwzz, t1.yzxw, s1, l(0)
 358:   mul r1.w, r3.z, l(255.0000)
 359:   round_ne r1.w, r1.w
 360:   ftou r1.w, r1.w
 361:   and r1.w, r1.w, l(16)
 362:   mad r1.z, r1.z, l(255.0000), l(0.5000)
 363:   ftou r1.z, r1.z
 364:   movc r1.z, r1.w, l(0), r1.z
 365:   ieq r1.z, r5.y, r1.z
 366:   movc r10.xyz, r1.zzzz, l(1.0000, 1.0000, 1.0000, 0.0000), r5.xzwx
 367:   lt r1.z, l(0), r9.w
 368:   and r1.z, r1.z, l(1.0000)
 369:   add r1.w, r2.w, -r9.w
 370:   mul_sat r1.w, abs(r1.w), r3.w
 371:   add r1.w, -r1.w, l(1.0000)
 372:   mul r12.w, r1.w, r1.z
 373:   mul r10.xyz, r10.xyzx, r12.wwww
 374:   mul r12.xyz, r9.xyzx, r10.xyzx
 375:   add r9.xyzw, r11.xyzw, r12.xyzw
 376:   mad r2.xyz, r7.xyzx, r9.xyzx, r2.xyzx
 377:   mad r6.xyz, r7.xyzx, r9.wwww, r6.xyzx
 378:   mov r8.xzw, l(13, 0, 0, 0)
 379:   ld_indexable(texture2d)(float,float,float,float) r7.xyzw, r8.xyzw, t2.xyzw
 380:   mul r7.xyzw, r7.xyzw, l(1.0000, 1.0000, 1.0000, 3.0000)
 381:   mul r1.zw, r3.xxxy, r7.wwww
 382:   mul r9.x, r1.z, l(-1.0000)
 383:   mov r9.yw, l(0, 0x80000000, 0, 0x80000000)
 384:   mad r9.xy, cb0[49].zwzz, r1.xyxx, r9.xyxx
 385:   max r9.xy, r9.xyxx, cb0[34].xyxx
 386:   min r9.xy, r9.xyxx, cb0[34].zwzz
 387:   sample_l(texture2d)(float,float,float,float) r10.xyzw, r9.xyxx, t3.xyzw, s2, l(0)
 388:   sample_l(texture2d)(float,float,float,float) r3.z, r9.xyxx, t0.xywz, s0, l(0)
 389:   sample_l(texture2d)(float,float,float,float) r6.w, r9.xyxx, t1.yzwx, s1, l(0)
 390:   mul r3.z, r3.z, l(255.0000)
 391:   round_ne r3.z, r3.z
 392:   ftou r3.z, r3.z
 393:   and r3.z, r3.z, l(16)
 394:   mad r6.w, r6.w, l(255.0000), l(0.5000)
 395:   ftou r6.w, r6.w
 396:   movc r3.z, r3.z, l(0), r6.w
 397:   ieq r3.z, r5.y, r3.z
 398:   movc r11.xyz, r3.zzzz, l(1.0000, 1.0000, 1.0000, 0.0000), r5.xzwx
 399:   lt r3.z, l(0), r10.w
 400:   and r3.z, r3.z, l(1.0000)
 401:   add r6.w, r2.w, -r10.w
 402:   mul_sat r6.w, r3.w, abs(r6.w)
 403:   add r6.w, -r6.w, l(1.0000)
 404:   mul r12.w, r3.z, r6.w
 405:   mul r11.xyz, r11.xyzx, r12.wwww
 406:   mul r12.xyz, r10.xyzx, r11.xyzx
 407:   mad r1.zw, cb0[49].zzzw, r1.xxxy, r1.zzzw
 408:   max r1.zw, r1.zzzw, cb0[34].xxxy
 409:   min r1.zw, r1.zzzw, cb0[34].zzzw
 410:   sample_l(texture2d)(float,float,float,float) r10.xyzw, r1.zwzz, t3.xyzw, s2, l(0)
 411:   sample_l(texture2d)(float,float,float,float) r3.z, r1.zwzz, t0.xywz, s0, l(0)
 412:   sample_l(texture2d)(float,float,float,float) r1.z, r1.zwzz, t1.yzxw, s1, l(0)
 413:   mul r1.w, r3.z, l(255.0000)
 414:   round_ne r1.w, r1.w
 415:   ftou r1.w, r1.w
 416:   and r1.w, r1.w, l(16)
 417:   mad r1.z, r1.z, l(255.0000), l(0.5000)
 418:   ftou r1.z, r1.z
 419:   movc r1.z, r1.w, l(0), r1.z
 420:   ieq r1.z, r5.y, r1.z
 421:   movc r11.xyz, r1.zzzz, l(1.0000, 1.0000, 1.0000, 0.0000), r5.xzwx
 422:   lt r1.z, l(0), r10.w
 423:   and r1.z, r1.z, l(1.0000)
 424:   add r1.w, r2.w, -r10.w
 425:   mul_sat r1.w, abs(r1.w), r3.w
 426:   add r1.w, -r1.w, l(1.0000)
 427:   mul r13.w, r1.w, r1.z
 428:   mul r11.xyz, r11.xyzx, r13.wwww
 429:   mul r13.xyz, r10.xyzx, r11.xyzx
 430:   add r10.xyzw, r12.xyzw, r13.xyzw
 431:   mad r2.xyz, r7.xyzx, r10.xyzx, r2.xyzx
 432:   mad r6.xyz, r7.xyzx, r10.wwww, r6.xyzx
 433:   mov r8.xzw, l(14, 0, 0, 0)
 434:   ld_indexable(texture2d)(float,float,float,float) r7.xyzw, r8.xyzw, t2.xyzw
 435:   mul r7.xyzw, r7.xyzw, l(1.0000, 1.0000, 1.0000, 3.0000)
 436:   mul r1.zw, r3.xxxy, r7.wwww
 437:   mul r9.z, r1.z, l(-1.0000)
 438:   mad r9.xy, cb0[49].zwzz, r1.xyxx, r9.zwzz
 439:   max r9.xy, r9.xyxx, cb0[34].xyxx
 440:   min r9.xy, r9.xyxx, cb0[34].zwzz
 441:   sample_l(texture2d)(float,float,float,float) r10.xyzw, r9.xyxx, t3.xyzw, s2, l(0)
 442:   sample_l(texture2d)(float,float,float,float) r3.z, r9.xyxx, t0.xywz, s0, l(0)
 443:   sample_l(texture2d)(float,float,float,float) r6.w, r9.xyxx, t1.yzwx, s1, l(0)
 444:   mul r3.z, r3.z, l(255.0000)
 445:   round_ne r3.z, r3.z
 446:   ftou r3.z, r3.z
 447:   and r3.z, r3.z, l(16)
 448:   mad r6.w, r6.w, l(255.0000), l(0.5000)
 449:   ftou r6.w, r6.w
 450:   movc r3.z, r3.z, l(0), r6.w
 451:   ieq r3.z, r5.y, r3.z
 452:   movc r9.xyz, r3.zzzz, l(1.0000, 1.0000, 1.0000, 0.0000), r5.xzwx
 453:   lt r3.z, l(0), r10.w
 454:   and r3.z, r3.z, l(1.0000)
 455:   add r6.w, r2.w, -r10.w
 456:   mul_sat r6.w, r3.w, abs(r6.w)
 457:   add r6.w, -r6.w, l(1.0000)
 458:   mul r11.w, r3.z, r6.w
 459:   mul r9.xyz, r9.xyzx, r11.wwww
 460:   mul r11.xyz, r9.xyzx, r10.xyzx
 461:   mad r1.zw, cb0[49].zzzw, r1.xxxy, r1.zzzw
 462:   max r1.zw, r1.zzzw, cb0[34].xxxy
 463:   min r1.zw, r1.zzzw, cb0[34].zzzw
 464:   sample_l(texture2d)(float,float,float,float) r9.xyzw, r1.zwzz, t3.xyzw, s2, l(0)
 465:   sample_l(texture2d)(float,float,float,float) r3.z, r1.zwzz, t0.xywz, s0, l(0)
 466:   sample_l(texture2d)(float,float,float,float) r1.z, r1.zwzz, t1.yzxw, s1, l(0)
 467:   mul r1.w, r3.z, l(255.0000)
 468:   round_ne r1.w, r1.w
 469:   ftou r1.w, r1.w
 470:   and r1.w, r1.w, l(16)
 471:   mad r1.z, r1.z, l(255.0000), l(0.5000)
 472:   ftou r1.z, r1.z
 473:   movc r1.z, r1.w, l(0), r1.z
 474:   ieq r1.z, r5.y, r1.z
 475:   movc r10.xyz, r1.zzzz, l(1.0000, 1.0000, 1.0000, 0.0000), r5.xzwx
 476:   lt r1.z, l(0), r9.w
 477:   and r1.z, r1.z, l(1.0000)
 478:   add r1.w, r2.w, -r9.w
 479:   mul_sat r1.w, abs(r1.w), r3.w
 480:   add r1.w, -r1.w, l(1.0000)
 481:   mul r12.w, r1.w, r1.z
 482:   mul r10.xyz, r10.xyzx, r12.wwww
 483:   mul r12.xyz, r9.xyzx, r10.xyzx
 484:   add r9.xyzw, r11.xyzw, r12.xyzw
 485:   mad r2.xyz, r7.xyzx, r9.xyzx, r2.xyzx
 486:   mad r6.xyz, r7.xyzx, r9.wwww, r6.xyzx
 487:   mov r8.xzw, l(15, 0, 0, 0)
 488:   ld_indexable(texture2d)(float,float,float,float) r7.xyzw, r8.xyzw, t2.xyzw
 489:   mul r7.xyzw, r7.xyzw, l(1.0000, 1.0000, 1.0000, 3.0000)
 490:   mul r1.zw, r3.xxxy, r7.wwww
 491:   mul r9.x, r1.z, l(-1.0000)
 492:   mov r9.yw, l(0, 0x80000000, 0, 0x80000000)
 493:   mad r9.xy, cb0[49].zwzz, r1.xyxx, r9.xyxx
 494:   max r9.xy, r9.xyxx, cb0[34].xyxx
 495:   min r9.xy, r9.xyxx, cb0[34].zwzz
 496:   sample_l(texture2d)(float,float,float,float) r10.xyzw, r9.xyxx, t3.xyzw, s2, l(0)
 497:   sample_l(texture2d)(float,float,float,float) r3.z, r9.xyxx, t0.xywz, s0, l(0)
 498:   sample_l(texture2d)(float,float,float,float) r6.w, r9.xyxx, t1.yzwx, s1, l(0)
 499:   mul r3.z, r3.z, l(255.0000)
 500:   round_ne r3.z, r3.z
 501:   ftou r3.z, r3.z
 502:   and r3.z, r3.z, l(16)
 503:   mad r6.w, r6.w, l(255.0000), l(0.5000)
 504:   ftou r6.w, r6.w
 505:   movc r3.z, r3.z, l(0), r6.w
 506:   ieq r3.z, r5.y, r3.z
 507:   movc r11.xyz, r3.zzzz, l(1.0000, 1.0000, 1.0000, 0.0000), r5.xzwx
 508:   lt r3.z, l(0), r10.w
 509:   and r3.z, r3.z, l(1.0000)
 510:   add r6.w, r2.w, -r10.w
 511:   mul_sat r6.w, r3.w, abs(r6.w)
 512:   add r6.w, -r6.w, l(1.0000)
 513:   mul r12.w, r3.z, r6.w
 514:   mul r11.xyz, r11.xyzx, r12.wwww
 515:   mul r12.xyz, r10.xyzx, r11.xyzx
 516:   mad r1.zw, cb0[49].zzzw, r1.xxxy, r1.zzzw
 517:   max r1.zw, r1.zzzw, cb0[34].xxxy
 518:   min r1.zw, r1.zzzw, cb0[34].zzzw
 519:   sample_l(texture2d)(float,float,float,float) r10.xyzw, r1.zwzz, t3.xyzw, s2, l(0)
 520:   sample_l(texture2d)(float,float,float,float) r3.z, r1.zwzz, t0.xywz, s0, l(0)
 521:   sample_l(texture2d)(float,float,float,float) r1.z, r1.zwzz, t1.yzxw, s1, l(0)
 522:   mul r1.w, r3.z, l(255.0000)
 523:   round_ne r1.w, r1.w
 524:   ftou r1.w, r1.w
 525:   and r1.w, r1.w, l(16)
 526:   mad r1.z, r1.z, l(255.0000), l(0.5000)
 527:   ftou r1.z, r1.z
 528:   movc r1.z, r1.w, l(0), r1.z
 529:   ieq r1.z, r5.y, r1.z
 530:   movc r11.xyz, r1.zzzz, l(1.0000, 1.0000, 1.0000, 0.0000), r5.xzwx
 531:   lt r1.z, l(0), r10.w
 532:   and r1.z, r1.z, l(1.0000)
 533:   add r1.w, r2.w, -r10.w
 534:   mul_sat r1.w, abs(r1.w), r3.w
 535:   add r1.w, -r1.w, l(1.0000)
 536:   mul r13.w, r1.w, r1.z
 537:   mul r11.xyz, r11.xyzx, r13.wwww
 538:   mul r13.xyz, r10.xyzx, r11.xyzx
 539:   add r10.xyzw, r12.xyzw, r13.xyzw
 540:   mad r2.xyz, r7.xyzx, r10.xyzx, r2.xyzx
 541:   mad r6.xyz, r7.xyzx, r10.wwww, r6.xyzx
 542:   mov r8.xzw, l(16, 0, 0, 0)
 543:   ld_indexable(texture2d)(float,float,float,float) r7.xyzw, r8.xyzw, t2.xyzw
 544:   mul r7.xyzw, r7.xyzw, l(1.0000, 1.0000, 1.0000, 3.0000)
 545:   mul r1.zw, r3.xxxy, r7.wwww
 546:   mul r9.z, r1.z, l(-1.0000)
 547:   mad r9.xy, cb0[49].zwzz, r1.xyxx, r9.zwzz
 548:   max r9.xy, r9.xyxx, cb0[34].xyxx
 549:   min r9.xy, r9.xyxx, cb0[34].zwzz
 550:   sample_l(texture2d)(float,float,float,float) r10.xyzw, r9.xyxx, t3.xyzw, s2, l(0)
 551:   sample_l(texture2d)(float,float,float,float) r3.z, r9.xyxx, t0.xywz, s0, l(0)
 552:   sample_l(texture2d)(float,float,float,float) r6.w, r9.xyxx, t1.yzwx, s1, l(0)
 553:   mul r3.z, r3.z, l(255.0000)
 554:   round_ne r3.z, r3.z
 555:   ftou r3.z, r3.z
 556:   and r3.z, r3.z, l(16)
 557:   mad r6.w, r6.w, l(255.0000), l(0.5000)
 558:   ftou r6.w, r6.w
 559:   movc r3.z, r3.z, l(0), r6.w
 560:   ieq r3.z, r5.y, r3.z
 561:   movc r9.xyz, r3.zzzz, l(1.0000, 1.0000, 1.0000, 0.0000), r5.xzwx
 562:   lt r3.z, l(0), r10.w
 563:   and r3.z, r3.z, l(1.0000)
 564:   add r6.w, r2.w, -r10.w
 565:   mul_sat r6.w, r3.w, abs(r6.w)
 566:   add r6.w, -r6.w, l(1.0000)
 567:   mul r11.w, r3.z, r6.w
 568:   mul r9.xyz, r9.xyzx, r11.wwww
 569:   mul r11.xyz, r9.xyzx, r10.xyzx
 570:   mad r1.zw, cb0[49].zzzw, r1.xxxy, r1.zzzw
 571:   max r1.zw, r1.zzzw, cb0[34].xxxy
 572:   min r1.zw, r1.zzzw, cb0[34].zzzw
 573:   sample_l(texture2d)(float,float,float,float) r9.xyzw, r1.zwzz, t3.xyzw, s2, l(0)
 574:   sample_l(texture2d)(float,float,float,float) r3.z, r1.zwzz, t0.xywz, s0, l(0)
 575:   sample_l(texture2d)(float,float,float,float) r1.z, r1.zwzz, t1.yzxw, s1, l(0)
 576:   mul r1.w, r3.z, l(255.0000)
 577:   round_ne r1.w, r1.w
 578:   ftou r1.w, r1.w
 579:   and r1.w, r1.w, l(16)
 580:   mad r1.z, r1.z, l(255.0000), l(0.5000)
 581:   ftou r1.z, r1.z
 582:   movc r1.z, r1.w, l(0), r1.z
 583:   ieq r1.z, r5.y, r1.z
 584:   movc r10.xyz, r1.zzzz, l(1.0000, 1.0000, 1.0000, 0.0000), r5.xzwx
 585:   lt r1.z, l(0), r9.w
 586:   and r1.z, r1.z, l(1.0000)
 587:   add r1.w, r2.w, -r9.w
 588:   mul_sat r1.w, abs(r1.w), r3.w
 589:   add r1.w, -r1.w, l(1.0000)
 590:   mul r12.w, r1.w, r1.z
 591:   mul r10.xyz, r10.xyzx, r12.wwww
 592:   mul r12.xyz, r9.xyzx, r10.xyzx
 593:   add r9.xyzw, r11.xyzw, r12.xyzw
 594:   mad r2.xyz, r7.xyzx, r9.xyzx, r2.xyzx
 595:   mad r6.xyz, r7.xyzx, r9.wwww, r6.xyzx
 596:   mov r8.xzw, l(17, 0, 0, 0)
 597:   ld_indexable(texture2d)(float,float,float,float) r7.xyzw, r8.xyzw, t2.xyzw
 598:   mul r7.xyzw, r7.xyzw, l(1.0000, 1.0000, 1.0000, 3.0000)
 599:   mul r1.zw, r3.xxxy, r7.wwww
 600:   mul r9.x, r1.z, l(-1.0000)
 601:   mov r9.yw, l(0, 0x80000000, 0, 0x80000000)
 602:   mad r9.xy, cb0[49].zwzz, r1.xyxx, r9.xyxx
 603:   max r9.xy, r9.xyxx, cb0[34].xyxx
 604:   min r9.xy, r9.xyxx, cb0[34].zwzz
 605:   sample_l(texture2d)(float,float,float,float) r10.xyzw, r9.xyxx, t3.xyzw, s2, l(0)
 606:   sample_l(texture2d)(float,float,float,float) r3.z, r9.xyxx, t0.xywz, s0, l(0)
 607:   sample_l(texture2d)(float,float,float,float) r6.w, r9.xyxx, t1.yzwx, s1, l(0)
 608:   mul r3.z, r3.z, l(255.0000)
 609:   round_ne r3.z, r3.z
 610:   ftou r3.z, r3.z
 611:   and r3.z, r3.z, l(16)
 612:   mad r6.w, r6.w, l(255.0000), l(0.5000)
 613:   ftou r6.w, r6.w
 614:   movc r3.z, r3.z, l(0), r6.w
 615:   ieq r3.z, r5.y, r3.z
 616:   movc r11.xyz, r3.zzzz, l(1.0000, 1.0000, 1.0000, 0.0000), r5.xzwx
 617:   lt r3.z, l(0), r10.w
 618:   and r3.z, r3.z, l(1.0000)
 619:   add r6.w, r2.w, -r10.w
 620:   mul_sat r6.w, r3.w, abs(r6.w)
 621:   add r6.w, -r6.w, l(1.0000)
 622:   mul r12.w, r3.z, r6.w
 623:   mul r11.xyz, r11.xyzx, r12.wwww
 624:   mul r12.xyz, r10.xyzx, r11.xyzx
 625:   mad r1.zw, cb0[49].zzzw, r1.xxxy, r1.zzzw
 626:   max r1.zw, r1.zzzw, cb0[34].xxxy
 627:   min r1.zw, r1.zzzw, cb0[34].zzzw
 628:   sample_l(texture2d)(float,float,float,float) r10.xyzw, r1.zwzz, t3.xyzw, s2, l(0)
 629:   sample_l(texture2d)(float,float,float,float) r3.z, r1.zwzz, t0.xywz, s0, l(0)
 630:   sample_l(texture2d)(float,float,float,float) r1.z, r1.zwzz, t1.yzxw, s1, l(0)
 631:   mul r1.w, r3.z, l(255.0000)
 632:   round_ne r1.w, r1.w
 633:   ftou r1.w, r1.w
 634:   and r1.w, r1.w, l(16)
 635:   mad r1.z, r1.z, l(255.0000), l(0.5000)
 636:   ftou r1.z, r1.z
 637:   movc r1.z, r1.w, l(0), r1.z
 638:   ieq r1.z, r5.y, r1.z
 639:   movc r11.xyz, r1.zzzz, l(1.0000, 1.0000, 1.0000, 0.0000), r5.xzwx
 640:   lt r1.z, l(0), r10.w
 641:   and r1.z, r1.z, l(1.0000)
 642:   add r1.w, r2.w, -r10.w
 643:   mul_sat r1.w, abs(r1.w), r3.w
 644:   add r1.w, -r1.w, l(1.0000)
 645:   mul r13.w, r1.w, r1.z
 646:   mul r11.xyz, r11.xyzx, r13.wwww
 647:   mul r13.xyz, r10.xyzx, r11.xyzx
 648:   add r10.xyzw, r12.xyzw, r13.xyzw
 649:   mad r2.xyz, r7.xyzx, r10.xyzx, r2.xyzx
 650:   mad r6.xyz, r7.xyzx, r10.wwww, r6.xyzx
 651:   mov r8.xzw, l(18, 0, 0, 0)
 652:   ld_indexable(texture2d)(float,float,float,float) r7.xyzw, r8.xyzw, t2.xyzw
 653:   mul r7.xyzw, r7.xyzw, l(1.0000, 1.0000, 1.0000, 3.0000)
 654:   mul r1.zw, r3.xxxy, r7.wwww
 655:   mul r9.z, r1.z, l(-1.0000)
 656:   mad r3.xy, cb0[49].zwzz, r1.xyxx, r9.zwzz
 657:   max r3.xy, r3.xyxx, cb0[34].xyxx
 658:   min r3.xy, r3.xyxx, cb0[34].zwzz
 659:   sample_l(texture2d)(float,float,float,float) r8.xyzw, r3.xyxx, t3.xyzw, s2, l(0)
 660:   sample_l(texture2d)(float,float,float,float) r3.z, r3.xyxx, t0.xywz, s0, l(0)
 661:   sample_l(texture2d)(float,float,float,float) r3.x, r3.xyxx, t1.xyzw, s1, l(0)
 662:   mul r3.y, r3.z, l(255.0000)
 663:   round_ne r3.y, r3.y
 664:   ftou r3.y, r3.y
 665:   and r3.y, r3.y, l(16)
 666:   mad r3.x, r3.x, l(255.0000), l(0.5000)
 667:   ftou r3.x, r3.x
 668:   movc r3.x, r3.y, l(0), r3.x
 669:   ieq r3.x, r5.y, r3.x
 670:   movc r3.xyz, r3.xxxx, l(1.0000, 1.0000, 1.0000, 0.0000), r5.xzwx
 671:   lt r6.w, l(0), r8.w
 672:   and r6.w, r6.w, l(1.0000)
 673:   add r7.w, r2.w, -r8.w
 674:   mul_sat r7.w, r3.w, abs(r7.w)
 675:   add r7.w, -r7.w, l(1.0000)
 676:   mul r9.w, r6.w, r7.w
 677:   mul r3.xyz, r3.xyzx, r9.wwww
 678:   mul r9.xyz, r3.xyzx, r8.xyzx
 679:   mad r1.xy, cb0[49].zwzz, r1.xyxx, r1.zwzz
 680:   max r1.xy, r1.xyxx, cb0[34].xyxx
 681:   min r1.xy, r1.xyxx, cb0[34].zwzz
 682:   sample_l(texture2d)(float,float,float,float) r8.xyzw, r1.xyxx, t3.xyzw, s2, l(0)
 683:   sample_l(texture2d)(float,float,float,float) r1.z, r1.xyxx, t0.xywz, s0, l(0)
 684:   sample_l(texture2d)(float,float,float,float) r1.x, r1.xyxx, t1.xyzw, s1, l(0)
 685:   mul r1.y, r1.z, l(255.0000)
 686:   round_ne r1.y, r1.y
 687:   ftou r1.y, r1.y
 688:   and r1.y, r1.y, l(16)
 689:   mad r1.x, r1.x, l(255.0000), l(0.5000)
 690:   ftou r1.x, r1.x
 691:   movc r1.x, r1.y, l(0), r1.x
 692:   ieq r1.x, r5.y, r1.x
 693:   movc r1.xyz, r1.xxxx, l(1.0000, 1.0000, 1.0000, 0.0000), r5.xzwx
 694:   lt r1.w, l(0), r8.w
 695:   and r1.w, r1.w, l(1.0000)
 696:   add r3.x, r2.w, -r8.w
 697:   mul_sat r3.x, abs(r3.x), r3.w
 698:   add r3.x, -r3.x, l(1.0000)
 699:   mul r3.w, r1.w, r3.x

 700:   mul r1.xyz, r1.xyzx, r3.wwww
 701:   mul r3.xyz, r1.xyzx, r8.xyzx

 702:   add r1.xyzw, r3.xyzw, r9.xyzw
 703:   mad r1.xyz, r7.xyzx, r1.xyzx, r2.xyzx                                 -> colorAccum += Kernel.rgb * LocalAccum.rgb;
 704:   mad r2.xyz, r7.xyzx, r1.wwww, r6.xyzx                                 -> colorInvDiv += Kernel.rgb * LocalAccum.a;

 705:   div r4.xyz, r1.xyzx, r2.xyzx                                          -> float3 OutColor = colorAccum / colorInvDiv; 
 706:   mov r4.w, r2.w                                                        -> alpha = OutDepth 
 707: endif
                                                                              -> float4 OutColor = SSSSBlurPS(BufferUV, ViewportDirectionUV, false);

 708: ult r1.xy, r0.xwxx, cb0[51].zwzz                                        -> if (all(Pos < Output_ViewportMax))
 709: and r1.x, r1.y, r1.x
 710: if_nz r1.x
 711:   store_uav_typed u0.xyzw, r0.xyzw, r4.xyzw                             -> SSSColorUAV[Pos] = OutColor; 
 712: endif
 713: ret
