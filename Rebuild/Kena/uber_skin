SetupIndirectCS -> Shaders\Private\PostProcessSubsurface.usf
cpp部分对应： Source\Runtime\Renderer\Pirvate\PostProcess\PostProcessSubsurface.cpp -> METHOD:ComputeSubsurfaceForView(...) 


Shader hash 6bb788c7-18abcca6-c234fe19-484d4f22
DC -> 18384

cs_5_0
      dcl_globalFlags refactoringAllowed
      dcl_constantbuffer cb0[52], immediateIndexed
      dcl_constantbuffer cb1[152], immediateIndexed
      dcl_constantbuffer cb2[1], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_sampler s1, mode_default
      dcl_sampler s2, mode_default
      dcl_resource_texture2d (float,float,float,float) t0         depth 
      dcl_resource_texture2d (float,float,float,float) t1         Comp_M_D_R_F 
      dcl_resource_texture2d (float,float,float,float) t2         Color 

      dcl_uav_typed_buffer (uint,uint,uint,uint) u0 
      dcl_uav_typed_buffer (uint,uint,uint,uint) u1 
      dcl_uav_typed_texture2d (float,float,float,float) u2        RWTexture2D<float4> SetupTexture;

      dcl_input vThreadIDInGroupFlattened
      dcl_input vThreadGroupID.xy
      dcl_input vThreadID.xy
      dcl_temps 9
      dcl_tgsm_raw g0, 4                                          groupshared uint SubsurfaceTypeFlag;
      dcl_thread_group 8, 8, 1

   0: ieq r0.x, vThreadIDInGroupFlattened.x, l(0) 
   1: if_z vThreadIDInGroupFlattened.x                -> if (GI == 0)
   2:   store_raw g0.x, l(0), l(0)                    -> SubsurfaceTypeFlag = 0;
   3: endif
   4: sync_g
   5: iadd r1.xyzw, vThreadID.xyyy, cb0[51].xyyy      -> uint2 Pos = DT_ID.xy + Output_ViewportMin;  -> Output_ViewportMin=0
   6: utof r0.yz, r1.xxwx
   7: add r0.yz, r0.yyzy, l(0.0000, 0.5000, 0.5000, 0.0000)
   8: mul r0.yz, r0.yyzy, cb0[49].zzwz                -> float2 BufferUV = ConvertGridPos2UV(Pos);

   9: mad r2.xyzw, cb0[28].zwzw, l(-0.5000, 0.5000, 0.5000, 0.5000), r0.yzyz  -> BufferUV + float2(-0.5, 0.5f) * SubsurfaceInput0_ExtentInverse 
                                                      -> cb0[28].zw = [0.00059, 0.00104] 
  10: min r2.xyzw, r2.xyzw, cb0[34].zwzw              -> UVSceneColor = min((~), SubsurfaceInput0_UVViewportBilinearMax)
                                                      -> cb0[34] = [1.00, 1.00, 0.99912, 0.99948] 

----------Func:SetupSubsurfaceForOnePixel() Start X 1----------
  11: sample_l(texture2d)(float,float,float,float) r0.w, r2.xyxx, t1.xyzw, s0, l(0)
  12: mul r0.w, r0.w, l(255.0000)
  13: round_ne r0.w, r0.w
  14: ftou r0.w, r0.w
  15: and r0.w, r0.w, l(15)
  16: ieq r3.xy, r0.wwww, l(5, 9, 0, 0)
  17: or r0.w, r3.y, r3.x
  18: if_nz r0.w
  19:   mul r3.xy, r2.xyxx, cb1[131].xyxx
  20:   ftou r3.xy, r3.xyxx                           -> uint2 PixelPos = uint2(UVSceneColor * View.BufferSizeAndInvSize.xy);
  21:   ftou r0.w, cb1[151].x                         -> cb1[151].x=View.TemporalAAParams.x
  22:   iadd r3.x, r3.y, r3.x
  23:   iadd r0.w, r0.w, r3.x
  24:   and r0.w, r0.w, l(1)                          -> bool bChecker = CheckerFromSceneColorUV(UVSceneColor);

  25:   sample_l(texture2d)(float,float,float,float) r3.xyz, r2.xyxx, t2.xyzw, s2, l(0)
  26:   sample_l(1,0,0)(texture2d)(float,float,float,float) r4.xyz, r2.xyxx, t2.xyzw, s2, l(0)
  27:   sample_l(-1,0,0)(texture2d)(float,float,float,float) r5.xyz, r2.xyxx, t2.xyzw, s2, l(0)
  28:   add r4.xyz, r4.xyzx, r5.xyzx
  29:   mul r5.xyz, r4.xyzx, l(0.5000, 0.5000, 0.5000, 0.0000)    ->  Quant1 = 0.5f * (
                                                                        LookupSceneColor(UVSceneColor, int2( 1, 0)) +
                                                                        LookupSceneColor(UVSceneColor, int2(-1, 0)));
  30:   movc r0.w, r0.w, l(1.0000), l(0)
  31:   mad r3.xyz, -r4.xyzx, l(0.5000, 0.5000, 0.5000, 0.0000), r3.xyzx
  32:   mad r3.xyz, r0.wwww, r3.xyzx, r5.xyzx
  33:   mov r3.w, l(1.0000)                           -> Ret.a = 1;
  34: else
  35:   mov r3.xyzw, l(0, 0, 0, 0)
  36: endif
----------Func:SetupSubsurfaceForOnePixel() End----------

----------Func:SetupSubsurfaceForOnePixel() Start X 2----------
  37: sample_l(texture2d)(float,float,float,float) r0.w, r2.zwzz, t1.xyzw, s0, l(0)
  38: mul r0.w, r0.w, l(255.0000)
  39: round_ne r0.w, r0.w
  40: ftou r0.w, r0.w
  41: and r0.w, r0.w, l(15)
  42: ieq r2.xy, r0.wwww, l(5, 9, 0, 0)
  43: or r0.w, r2.y, r2.x
  44: if_nz r0.w
  45:   mul r2.xy, r2.zwzz, cb1[131].xyxx
  46:   ftou r2.xy, r2.xyxx
  47:   ftou r0.w, cb1[151].x
  48:   iadd r2.x, r2.y, r2.x
  49:   iadd r0.w, r0.w, r2.x
  50:   and r0.w, r0.w, l(1)
  51:   sample_l(texture2d)(float,float,float,float) r4.xyz, r2.zwzz, t2.xyzw, s2, l(0)
  52:   sample_l(1,0,0)(texture2d)(float,float,float,float) r5.xyz, r2.zwzz, t2.xyzw, s2, l(0)
  53:   sample_l(-1,0,0)(texture2d)(float,float,float,float) r2.xyz, r2.zwzz, t2.xyzw, s2, l(0)
  54:   add r2.xyz, r2.xyzx, r5.xyzx
  55:   mul r5.xyz, r2.xyzx, l(0.5000, 0.5000, 0.5000, 0.0000)
  56:   movc r0.w, r0.w, l(1.0000), l(0)
  57:   mad r2.xyz, -r2.xyzx, l(0.5000, 0.5000, 0.5000, 0.0000), r4.xyzx
  58:   mad r2.xyz, r0.wwww, r2.xyzx, r5.xyzx
  59:   mov r2.w, l(1.0000)
  60: else
  61:   mov r2.xyzw, l(0, 0, 0, 0)
  62: endif
----------Func:SetupSubsurfaceForOnePixel() End X 2---------- 

----------Func:SetupSubsurfaceForOnePixel() Start X 3----------
  63: mad r4.xyzw, cb0[28].zwzw, l(0.5000, -0.5000, -0.5000, -0.5000), r0.yzyz
  64: min r4.xyzw, r4.xyzw, cb0[34].zwzw
  65: sample_l(texture2d)(float,float,float,float) r0.w, r4.xyxx, t1.xyzw, s0, l(0)
  66: mul r0.w, r0.w, l(255.0000)
  67: round_ne r0.w, r0.w
  68: ftou r0.w, r0.w
  69: and r0.w, r0.w, l(15)
  70: ieq r5.xy, r0.wwww, l(5, 9, 0, 0)
  71: or r0.w, r5.y, r5.x
  72: if_nz r0.w
  73:   mul r5.xy, r4.xyxx, cb1[131].xyxx
  74:   ftou r5.xy, r5.xyxx
  75:   ftou r0.w, cb1[151].x
  76:   iadd r5.x, r5.y, r5.x
  77:   iadd r0.w, r0.w, r5.x
  78:   and r0.w, r0.w, l(1)
  79:   sample_l(texture2d)(float,float,float,float) r5.xyz, r4.xyxx, t2.xyzw, s2, l(0)
  80:   sample_l(1,0,0)(texture2d)(float,float,float,float) r6.xyz, r4.xyxx, t2.xyzw, s2, l(0)
  81:   sample_l(-1,0,0)(texture2d)(float,float,float,float) r7.xyz, r4.xyxx, t2.xyzw, s2, l(0)
  82:   add r6.xyz, r6.xyzx, r7.xyzx
  83:   mul r7.xyz, r6.xyzx, l(0.5000, 0.5000, 0.5000, 0.0000)
  84:   movc r0.w, r0.w, l(1.0000), l(0)
  85:   mad r5.xyz, -r6.xyzx, l(0.5000, 0.5000, 0.5000, 0.0000), r5.xyzx
  86:   mad r5.xyz, r0.wwww, r5.xyzx, r7.xyzx
  87:   mov r5.w, l(1.0000)
  88: else
  89:   mov r5.xyzw, l(0, 0, 0, 0)
  90: endif
  ----------Func:SetupSubsurfaceForOnePixel() End X 3---------- 

----------Func:SetupSubsurfaceForOnePixel() Start X 4----------
  91: sample_l(texture2d)(float,float,float,float) r0.w, r4.zwzz, t1.xyzw, s0, l(0)
  92: mul r0.w, r0.w, l(255.0000)
  93: round_ne r0.w, r0.w
  94: ftou r0.w, r0.w
  95: and r0.w, r0.w, l(15)
  96: ieq r4.xy, r0.wwww, l(5, 9, 0, 0)
  97: or r0.w, r4.y, r4.x
  98: if_nz r0.w
  99:   mul r4.xy, r4.zwzz, cb1[131].xyxx
 100:   ftou r4.xy, r4.xyxx
 101:   ftou r0.w, cb1[151].x
 102:   iadd r4.x, r4.y, r4.x
 103:   iadd r0.w, r0.w, r4.x
 104:   and r0.w, r0.w, l(1)
 105:   sample_l(texture2d)(float,float,float,float) r6.xyz, r4.zwzz, t2.xyzw, s2, l(0)
 106:   sample_l(1,0,0)(texture2d)(float,float,float,float) r7.xyz, r4.zwzz, t2.xyzw, s2, l(0)
 107:   sample_l(-1,0,0)(texture2d)(float,float,float,float) r4.xyz, r4.zwzz, t2.xyzw, s2, l(0)
 108:   add r4.xyz, r4.xyzx, r7.xyzx
 109:   mul r7.xyz, r4.xyzx, l(0.5000, 0.5000, 0.5000, 0.0000)
 110:   movc r0.w, r0.w, l(1.0000), l(0)
 111:   mad r4.xyz, -r4.xyzx, l(0.5000, 0.5000, 0.5000, 0.0000), r6.xyzx
 112:   mad r4.xyz, r0.wwww, r4.xyzx, r7.xyzx
 113:   mov r4.w, l(1.0000)
 114: else
 115:   mov r4.xyzw, l(0, 0, 0, 0)
 116: endif
----------Func:SetupSubsurfaceForOnePixel() End X 4----------


 117: add r6.xyzw, r2.xyzw, r3.xyzw
 118: add r7.xyzw, r4.xyzw, r5.xyzw
 119: add r6.xyzw, r6.xyzw, r7.xyzw                         -> float4 Sum = (A + B) + (C + D);
 120: max r0.w, r6.w, l(0.0000)                       
 121: div r0.w, l(1.0000, 1.0000, 1.0000, 1.0000), r0.w     -> float Div = 1.0f / max(Sum.a, 0.00001f); 

 122: gather4(texture2d)(float,float,float,float) r7.xyzw, r0.yzyy, t0.xyzw, s1.x
 123: mad r0.yz, r7.xxyx, cb1[65].xxxx, cb1[65].yyyy
 124: mad r2.xy, r7.xyxx, cb1[65].zzzz, -cb1[65].wwww
 125: div r2.xy, l(1.0000, 1.0000, 1.0000, 1.0000), r2.xyxx
 126: add r8.xy, r0.yzyy, r2.xyxx
 127: mad r0.yz, r7.zzwz, cb1[65].xxxx, cb1[65].yyyy
 128: mad r2.xy, r7.zwzz, cb1[65].zzzz, -cb1[65].wwww
 129: div r2.xy, l(1.0000, 1.0000, 1.0000, 1.0000), r2.xyxx
 130: add r8.zw, r0.yyyz, r2.xxxy                           -> float4 FourDepth = GatherSceneDepth(BufferUV, SubsurfaceInput0_ExtentInverse); 

 131: mov r4.x, r3.w
 132: mov r4.y, r2.w
 133: mov r4.z, r5.w
 134: dp4 r0.y, r8.xyzw, r4.xyzw                            -> dot(FourDepth, float4(A.a, B.a, C.a, D.a))
 135: mul r2.w, r0.w, r0.y                                  -> float SingleDepth = dot(FourDepth, float4(A.a, B.a, C.a, D.a)) * Div; 

 136: lt r0.y, l(0), r2.w                                   -> if (OutColor.a > 0)  其中 OutColor.a == SingleDepth 
 137: and r0.y, r0.y, l(1)                                  -> bHasSubsurface = true; 
 138: ult r3.xy, r1.xwxx, cb0[51].zwzz                      -> if (all(Pos < Output_ViewportMax))  
 139: and r0.z, r3.y, r3.x
 140: if_nz r0.z
 141:   mul r2.xyz, r0.wwww, r6.xyzx
 142:   store_uav_typed u2.xyzw, r1.xyzw, r2.xyzw
 143: endif
 144: atomic_or g0, l(0), r0.y
 145: sync_g_t
 146: ld_raw r0.y, l(0), g0.xxxx
 147: and r0.yz, r0.yyyy, l(0, 1, 2, 0)
 148: ine r0.yz, r0.yyzy, l(0, 0, 0, 0)
 149: and r0.xy, r0.yzyy, r0.xxxx
 150: if_nz r0.x
 151:   imm_atomic_iadd r1.x, u0, l(0), l(1)
 152:   ult r0.x, r1.x, cb2[0].x
 153:   if_nz r0.x
 154:     ishl r0.x, r1.x, l(1)
 155:     iadd r0.x, r0.x, l(2)
 156:     store_uav_typed u0.xyzw, r0.xxxx, vThreadGroupID.xxxx
 157:     iadd r0.z, r0.x, l(1)
 158:     store_uav_typed u0.xyzw, r0.zzzz, vThreadGroupID.yyyy
 159:   endif
 160: endif
 161: if_nz r0.y
 162:   imm_atomic_iadd r0.x, u1, l(0), l(1)
 163:   ult r0.y, r0.x, cb2[0].x
 164:   if_nz r0.y
 165:     ishl r0.x, r0.x, l(1)
 166:     iadd r0.x, r0.x, l(2)
 167:     store_uav_typed u1.xyzw, r0.xxxx, vThreadGroupID.xxxx
 168:     iadd r0.y, r0.x, l(1)
 169:     store_uav_typed u1.xyzw, r0.yyyy, vThreadGroupID.yyyy
 170:   endif
 171: endif
 172: ret
