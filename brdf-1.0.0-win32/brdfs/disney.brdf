analytic

# Copyright Disney Enterprises, Inc.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License
# and the following modification to it: Section 6 Trademarks.
# deleted and replaced with:
#
# 6. Trademarks. This License does not grant permission to use the
# trade names, trademarks, service marks, or product names of the
# Licensor and its affiliates, except as required for reproducing
# the content of the NOTICE file.
#
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0


# variables go here...
# [type] [name] [min val] [max val] [default val]
::begin parameters

//固有色
color baseColor .82 .67 .16

//金属度，规定电介质为0，金属为1；
//当值趋向1时：弱化漫反射比率，强化镜面反射强度，同时镜面反射逐渐附带上金属色
//半导体材质情况特殊，尽量避免使用半导体调试效果 
float metallic 0 1 0

//次表面，控制漫反射形状
float subsurface 0 1 0

//高光强度(镜面反射强度)
//控制镜面反射光占入射光的比率，用于取代折射率
float specular 0 1 .5

//粗糙度，影响漫反射和镜面反射 
float roughness 0 1 .5

//高光染色，和baseColor一起，控制镜面反射的颜色
//注意，这是非物理效果，且掠射镜面反射依然是非彩色
float specularTint 0 1 0

//各向异性程度，控制镜面反射在不同朝向上的强度，既镜面反射高光的纵横比
//规定完全各向同性时为0，完全各项异性时为1
float anisotropic 0 1 0

//光泽度，一种额外的掠射分量，一般用于补偿布料在掠射角下的光能  
float sheen 0 1 0

//光泽色，控制sheen的颜色
float sheenTint 0 1 .5

//清漆强度，控制第二个镜面反射波瓣形成及其影响范围
float clearcoat 0 1 0

//清漆光泽度，控制透明涂层的高光强度（光泽度）
//规定缎面(satin)为0，光泽(gloss)为1；
float clearcoatGloss 0 1 1

::end parameters

::begin shader

const float PI = 3.14159265358979323846;

//平方函数，square
float sqr(float x) { return x*x; }

//入参u时视方向与法线的点积
//返回F0为0情况下的SchlickFresnel的解，既0 + (1-0)(1-vdoth)^5
float SchlickFresnel(float u)
{
    float m = clamp(1-u, 0, 1);//将1-vdoth的结果限制在[0,1]空间内 
    float m2 = m*m;
    return m2*m2*m; // pow(m,5) 求5次方
}

//GTR 1 (次镜面波瓣，gamma=1)
//次用于上层透明涂层材质（ClearCoat清漆材质，俗称上层高光），是各向同性且非金属的。
float GTR1(float NdotH, float a)
{
    //考虑到粗糙度a在等于1的情况下，公式返回值无意义，因此固定返回1/pi，
    //说明在完全粗糙的情况下，各个方向的法线分布均匀，且积分后得1
    if (a >= 1) return 1/PI;

    float a2 = a*a;
    float t = 1 + (a2-1)*NdotH*NdotH; //公式主部
    return (a2-1) / (PI*log(a2)*t);   //GTR1的c，迪士尼取值为：(a2-1)/(PI*log(a2))
}

//GTR 2(主镜面波瓣，gamma=2) 先用于基础层材质（Base Material）用于各项同性的金属或非金属（俗称下层高光）
float GTR2(float NdotH, float a)
{
    float a2 = a*a;
    float t = 1 + (a2-1)*NdotH*NdotH;
    return a2 / (PI * t*t);  //GTR2的c，迪士尼取值为:a2/PI
}

//主镜面波瓣的各向异性版本
//其中HdotX为半角向量与物体表面法线空间中的切线方向向量的点积
//HdotY为半角点乘切线空间中的副切线向量 
//ax 和 ay 分别是这2个方向上的可感粗糙度，范围是0~1 
float GTR2_aniso(float NdotH, float HdotX, float HdotY, float ax, float ay)
{
    return 1 / (PI * ax*ay * sqr( sqr(HdotX/ax) + sqr(HdotY/ay) + NdotH*NdotH ));
}

//2012版disney采用的Smith GGX导出的G项，本质是Smith联合遮蔽阴影函数中的“分离的遮蔽阴影型”
//入参NdotV视情况也可替换会NdotL，用于计算阴影相关G1；
//入参alphaG默认是0.25f，被用来表现清漆波瓣 
float smithG_GGX(float NdotV, float alphaG)
{
    float a = alphaG*alphaG;
    float b = NdotV*NdotV;
    return 1 / (NdotV + sqrt(a + b - a*b));
}

float smithG_GGX_aniso(float NdotV, float VdotX, float VdotY, float ax, float ay)
{
    return 1 / (NdotV + sqrt( sqr(VdotX*ax) + sqr(VdotY*ay) + sqr(NdotV) ));
}

vec3 mon2lin(vec3 x)
{
    return vec3(pow(x[0], 2.2), pow(x[1], 2.2), pow(x[2], 2.2));
}


vec3 BRDF( vec3 L, vec3 V, vec3 N, vec3 X, vec3 Y )
{
    float NdotL = dot(N,L);
    float NdotV = dot(N,V);
    if (NdotL < 0 || NdotV < 0) return vec3(0);

    vec3 H = normalize(L+V);
    float NdotH = dot(N,H);
    float LdotH = dot(L,H); 

    vec3 Cdlin = mon2lin(baseColor);
    float Cdlum = .3*Cdlin[0] + .6*Cdlin[1]  + .1*Cdlin[2]; // luminance approx.

    vec3 Ctint = Cdlum > 0 ? Cdlin/Cdlum : vec3(1); // normalize lum. to isolate hue+sat
    vec3 Cspec0 = mix(specular*.08*mix(vec3(1), Ctint, specularTint), Cdlin, metallic);
    vec3 Csheen = mix(vec3(1), Ctint, sheenTint);

    // Diffuse fresnel - go from 1 at normal incidence to .5 at grazing
    // and mix in diffuse retro-reflection based on roughness
    float FL = SchlickFresnel(NdotL), FV = SchlickFresnel(NdotV);
    float Fd90 = 0.5 + 2 * LdotH*LdotH * roughness;
    float Fd = mix(1.0, Fd90, FL) * mix(1.0, Fd90, FV);

    // Based on Hanrahan-Krueger brdf approximation of isotropic bssrdf
    // 1.25 scale is used to (roughly) preserve albedo
    // Fss90 used to "flatten" retroreflection based on roughness
    float Fss90 = LdotH*LdotH*roughness;
    float Fss = mix(1.0, Fss90, FL) * mix(1.0, Fss90, FV);
    float ss = 1.25 * (Fss * (1 / (NdotL + NdotV) - .5) + .5);

    // specular
    float aspect = sqrt(1-anisotropic*.9);
    float ax = max(.001, sqr(roughness)/aspect);
    float ay = max(.001, sqr(roughness)*aspect);
    float Ds = GTR2_aniso(NdotH, dot(H, X), dot(H, Y), ax, ay);
    float FH = SchlickFresnel(LdotH);
    vec3 Fs = mix(Cspec0, vec3(1), FH);
    float Gs;
    Gs  = smithG_GGX_aniso(NdotL, dot(L, X), dot(L, Y), ax, ay);
    Gs *= smithG_GGX_aniso(NdotV, dot(V, X), dot(V, Y), ax, ay);

    // sheen
    vec3 Fsheen = FH * sheen * Csheen;

    // clearcoat (ior = 1.5 -> F0 = 0.04)
    float Dr = GTR1(NdotH, mix(.1,.001,clearcoatGloss));
    float Fr = mix(.04, 1.0, FH);
    float Gr = smithG_GGX(NdotL, .25) * smithG_GGX(NdotV, .25);

    return ((1/PI) * mix(Fd, ss, subsurface)*Cdlin + Fsheen)
        * (1-metallic)
        + Gs*Fs*Ds + .25*clearcoat*Gr*Fr*Dr;
}

::end shader
